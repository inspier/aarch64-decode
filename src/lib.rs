#[allow(unused_variables)]
#[allow(non_snake_case)]
#[allow(unreachable_patterns)]
pub fn decode_a64(instr: u32) -> Option<Instr> {
    match ((instr >> 29) & 7, (instr >> 24) & 31, instr & 16777215) {
        (_, x1, _) if x1 & 30 == 0 => {
            match (
                (instr >> 29) & 7,
                (instr >> 25) & 15,
                (instr >> 16) & 511,
                instr & 65535,
            ) {
                (x0, _, x2, _) if x0 == 0 && x2 == 0 => {
                    let imm16 = instr & 65535;
                    match () {
                        () => Some(Instr::UdfOnlyPermUndef { imm16: imm16 as _ }),
                    }
                }
                (_, _, x2, _) if x2 != 0 => None,
                (x0, _, _, _) if x0 != 0 => None,
                _ => None,
            }
        }
        (_, x1, _) if x1 == 3 => None,
        (_, x1, _) if x1 & 30 == 4 => {
            match (
                (instr >> 29) & 7,
                (instr >> 25) & 15,
                (instr >> 23) & 3,
                (instr >> 22) & 1,
                (instr >> 17) & 31,
                (instr >> 16) & 1,
                (instr >> 10) & 63,
                instr & 1023,
            ) {
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 16 == 16 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 15) & 1,
                        (instr >> 14) & 1,
                        instr & 16383,
                    ) {
                        (_, _, _, _, x4, _, _) if x4 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let op = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match op {
                                x0 if x0 == 0 => Some(Instr::MlaZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MlsZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, _, _) if x4 == 1 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let op = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Za = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match op {
                                x0 if x0 == 0 => Some(Instr::MadZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Za: Za as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MsbZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Za: Za as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 56 == 0 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 18) & 7,
                        (instr >> 16) & 3,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 & 6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AddZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::SubZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => None,
                                x0 if x0 == 3 => Some(Instr::SubrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 & 4 == 4 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 & 6 == 2 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (opc, U) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SmaxZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::UmaxZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::SminZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UminZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::SabdZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::UabdZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 4 => {
                            let size = (instr >> 22) & 3;
                            let H = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (H, U) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::MulZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::SmulhZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UmulhZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 5 => {
                            let size = (instr >> 22) & 3;
                            let R = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (R, U) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SdivZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::UdivZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::SdivrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UdivrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 & 6 == 6 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::EorZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::AndZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::BicZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 & 4 == 4 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 56 == 8 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 16) & 7,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Vd = instr & 31;
                            match (opc, U) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SaddvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::UaddvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, _) if x0 == 1 => None,
                                (x0, _) if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 1 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Vd = instr & 31;
                            match (opc, U) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SmaxvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::UmaxvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::SminvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UminvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                (x0, _) if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 2 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let M = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::MovprfxZPZ {
                                    size: size as _,
                                    M: M as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => None,
                                x0 if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 3 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Vd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::EorvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::AndvRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                x0 if x0 == 3 => None,
                                x0 if x0 & 4 == 4 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 56 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 16) & 7,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 & 2 == 0 => {
                            let tszh = (instr >> 22) & 3;
                            let opc = (instr >> 18) & 3;
                            let L = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let tszl = (instr >> 8) & 3;
                            let imm3 = (instr >> 5) & 7;
                            let Zdn = instr & 31;
                            match (opc, L, U) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::AsrZPZi {
                                        tszh: tszh as _,
                                        Pg: Pg as _,
                                        tszl: tszl as _,
                                        imm3: imm3 as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::LsrZPZi {
                                        tszh: tszh as _,
                                        Pg: Pg as _,
                                        tszl: tszl as _,
                                        imm3: imm3 as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::LslZPZi {
                                        tszh: tszh as _,
                                        Pg: Pg as _,
                                        tszl: tszl as _,
                                        imm3: imm3 as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::AsrdZPZi {
                                        tszh: tszh as _,
                                        Pg: Pg as _,
                                        tszl: tszl as _,
                                        imm3: imm3 as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => None,
                                (x0, x1, _) if x0 == 1 && x1 == 1 => None,
                                (x0, _, _) if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 2 => {
                            let size = (instr >> 22) & 3;
                            let R = (instr >> 18) & 1;
                            let L = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (R, L, U) {
                                (_, x1, x2) if x1 == 1 && x2 == 0 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::AsrZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::LsrZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::LslZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::AsrrZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::LsrrZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::LslrZPZz {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 3 => {
                            let size = (instr >> 22) & 3;
                            let R = (instr >> 18) & 1;
                            let L = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (R, L, U) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::AsrZPZw {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::LsrZPZw {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::LslZPZw {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zm: Zm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, _, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 56 == 40 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 16) & 7,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 & 2 == 0 => None,
                        (_, _, _, x3, _, _, _) if x3 == 2 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::SxtbZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::UxtbZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::SxthZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::UxthZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::SxtwZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::UxtwZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::AbsZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::NegZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 3 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::ClsZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::ClzZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::CntZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::CnotZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::FabsZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::FnegZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::NotZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 7 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 56 == 0 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let opc = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::AddZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::SubZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 & 6 == 2 => None,
                        x0 if x0 == 4 => Some(Instr::SqaddZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 5 => Some(Instr::UqaddZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 6 => Some(Instr::SqsubZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 7 => Some(Instr::UqsubZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 56 == 8 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 12) & 1,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, _, _) if x5 == 0 => None,
                        (_, _, _, _, _, x5, x6, _) if x5 == 1 && x6 == 0 => {
                            let opc = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AndZZz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::OrrZZz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::EorZZz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::BicZZz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, x6, _) if x5 == 1 && x6 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 16 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 12) & 15,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, _) if x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let imm5b = (instr >> 16) & 31;
                            let imm5 = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::IndexZIi {
                                    size: size as _,
                                    imm5b: imm5b as _,
                                    imm5: imm5 as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 1 => {
                            let size = (instr >> 22) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let Rn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::IndexZRi {
                                    size: size as _,
                                    imm5: imm5 as _,
                                    Rn: Rn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 2 => {
                            let size = (instr >> 22) & 3;
                            let Rm = (instr >> 16) & 31;
                            let imm5 = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::IndexZIr {
                                    size: size as _,
                                    Rm: Rm as _,
                                    imm5: imm5 as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 3 => {
                            let size = (instr >> 22) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Rn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::IndexZRr {
                                    size: size as _,
                                    Rm: Rm as _,
                                    Rn: Rn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 20 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 23) & 1,
                        (instr >> 22) & 1,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 12) & 15,
                        (instr >> 11) & 1,
                        instr & 2047,
                    ) {
                        (_, x1, _, _, _, _, x6, _) if x1 == 0 && x6 == 0 => {
                            let op = (instr >> 22) & 1;
                            let Rn = (instr >> 16) & 31;
                            let imm6 = (instr >> 5) & 63;
                            let Rd = instr & 31;
                            match op {
                                x0 if x0 == 0 => Some(Instr::AddvlRRi {
                                    Rn: Rn as _,
                                    imm6: imm6 as _,
                                    Rd: Rd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::AddplRRi {
                                    Rn: Rn as _,
                                    imm6: imm6 as _,
                                    Rd: Rd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, _, x6, _) if x1 == 1 && x6 == 0 => {
                            let op = (instr >> 22) & 1;
                            let opc2 = (instr >> 16) & 31;
                            let imm6 = (instr >> 5) & 63;
                            let Rd = instr & 31;
                            match (op, opc2) {
                                (x0, x1) if x0 == 0 && x1 & 16 == 0 => None,
                                (x0, x1) if x0 == 0 && x1 & 24 == 16 => None,
                                (x0, x1) if x0 == 0 && x1 & 28 == 24 => None,
                                (x0, x1) if x0 == 0 && x1 & 30 == 28 => None,
                                (x0, x1) if x0 == 0 && x1 == 30 => None,
                                (x0, x1) if x0 == 0 && x1 == 31 => Some(Instr::RdvlRI {
                                    imm6: imm6 as _,
                                    Rd: Rd as _,
                                }),
                                (x0, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 56 == 24 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 56 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 12) & 1,
                        instr & 4095,
                    ) {
                        (_, _, _, _, _, x5, _) if x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let opc = (instr >> 10) & 3;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AsrZZw {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::LsrZZw {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => None,
                                x0 if x0 == 3 => Some(Instr::LslZZw {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 1 => {
                            let tszh = (instr >> 22) & 3;
                            let tszl = (instr >> 19) & 3;
                            let imm3 = (instr >> 16) & 7;
                            let opc = (instr >> 10) & 3;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AsrZZi {
                                    tszh: tszh as _,
                                    tszl: tszl as _,
                                    imm3: imm3 as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::LsrZZi {
                                    tszh: tszh as _,
                                    tszl: tszl as _,
                                    imm3: imm3 as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => None,
                                x0 if x0 == 3 => Some(Instr::LslZZi {
                                    tszh: tszh as _,
                                    tszl: tszl as _,
                                    imm3: imm3 as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 40 =>
                {
                    let opc = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let msz = (instr >> 10) & 3;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::AdrZAzDS32Scaled {
                            Zm: Zm as _,
                            msz: msz as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::AdrZAzDU32Scaled {
                            Zm: Zm as _,
                            msz: msz as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 & 2 == 2 => Some(Instr::AdrZAzSdSameScaled {
                            Zm: Zm as _,
                            msz: msz as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 44 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 12) & 15,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, _) if x5 & 2 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let op = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match op {
                                x0 if x0 == 0 => Some(Instr::FtsselZZz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 2 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FexpaZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => None,
                                x0 if x0 & 30 == 2 => None,
                                x0 if x0 & 28 == 4 => None,
                                x0 if x0 & 24 == 8 => None,
                                x0 if x0 & 16 == 16 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 3 => {
                            let opc = (instr >> 22) & 3;
                            let opc2 = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match (opc, opc2) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::MovprfxZZ {
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, x1) if x0 == 0 && x1 & 30 == 2 => None,
                                (x0, x1) if x0 == 0 && x1 & 28 == 4 => None,
                                (x0, x1) if x0 == 0 && x1 & 24 == 8 => None,
                                (x0, x1) if x0 == 0 && x1 & 16 == 16 => None,
                                (x0, _) if x0 == 1 => None,
                                (x0, _) if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 48 == 48 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 20) & 1,
                        (instr >> 16) & 15,
                        (instr >> 14) & 3,
                        (instr >> 11) & 7,
                        instr & 2047,
                    ) {
                        (_, _, _, x3, _, _, x6, _) if x3 == 0 && x6 & 6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let D = (instr >> 11) & 1;
                            let U = (instr >> 10) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (size, D, U) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::SqinchZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::UqinchZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::SqdechZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::UqdechZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::SqincwZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::UqincwZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::SqdecwZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::UqdecwZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::SqincdZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::UqincdZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::SqdecdZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::UqdecdZZs {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 0 && x6 == 4 => {
                            let size = (instr >> 22) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let op = (instr >> 10) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Rd = instr & 31;
                            match (size, op) {
                                (_, x1) if x1 == 1 => None,
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::CntbRS {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rd: Rd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::CnthRS {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rd: Rd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::CntwRS {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rd: Rd as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::CntdRS {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rd: Rd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 0 && x6 == 5 => None,
                        (_, _, _, x3, _, _, x6, _) if x3 == 1 && x6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let D = (instr >> 10) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match (size, D) {
                                (x0, _) if x0 == 0 => None,
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::InchZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::DechZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::IncwZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::DecwZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::IncdZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::DecdZZs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 1 && x6 == 4 => {
                            let size = (instr >> 22) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let D = (instr >> 10) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Rdn = instr & 31;
                            match (size, D) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::IncbRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::DecbRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::InchRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::DechRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::IncwRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::DecwRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::IncdRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::DecdRRs {
                                    imm4: imm4 as _,
                                    pattern: pattern as _,
                                    Rdn: Rdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 1 && x6 & 3 == 1 => None,
                        (_, _, _, _, _, _, x6, _) if x6 & 6 == 2 => None,
                        (_, _, _, _, _, _, x6, _) if x6 & 6 == 6 => {
                            let size = (instr >> 22) & 3;
                            let sf = (instr >> 20) & 1;
                            let imm4 = (instr >> 16) & 15;
                            let D = (instr >> 11) & 1;
                            let U = (instr >> 10) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Rdn = instr & 31;
                            match (size, sf, D, U) {
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincbRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincbRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecbRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecbRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincbRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincbRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecbRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecbRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqinchRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqinchRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdechRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdechRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqinchRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqinchRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdechRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdechRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincwRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincwRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecwRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecwRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincwRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincwRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecwRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecwRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincdRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincdRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecdRRsSx {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecdRRsUw {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincdRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::UqincdRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecdRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::UqdecdRRsX {
                                        imm4: imm4 as _,
                                        pattern: pattern as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 0 && x2 & 2 == 2 && x4 & 24 == 0 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 20) & 3,
                        (instr >> 18) & 3,
                        instr & 262143,
                    ) {
                        (_, x1, _, x3, _) if x1 == 3 && x3 == 0 => {
                            let imm13 = (instr >> 5) & 8191;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::DupmZI {
                                    imm13: imm13 as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, x1, _, x3, _) if x1 != 3 && x3 == 0 => {
                            let opc = (instr >> 22) & 3;
                            let imm13 = (instr >> 5) & 8191;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrrZZi {
                                    imm13: imm13 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::EorZZi {
                                    imm13: imm13 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::AndZZi {
                                    imm13: imm13 as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _) if x3 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 0 && x2 & 2 == 2 && x4 & 24 == 8 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 20) & 3,
                        (instr >> 16) & 15,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, _, x4, _) if x4 & 4 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 16) & 15;
                            let M = (instr >> 14) & 1;
                            let sh = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zd = instr & 31;
                            match M {
                                x0 if x0 == 0 => Some(Instr::CpyZOI {
                                    size: size as _,
                                    Pg: Pg as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::CpyZPI {
                                    size: size as _,
                                    Pg: Pg as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, _) if x4 & 6 == 4 => None,
                        (_, _, _, _, x4, _) if x4 == 6 => {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 16) & 15;
                            let imm8 = (instr >> 5) & 255;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::FcpyZPI {
                                    size: size as _,
                                    Pg: Pg as _,
                                    imm8: imm8 as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, _, x4, _) if x4 == 7 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 56 == 8 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 17) & 3,
                        (instr >> 16) & 1,
                        (instr >> 13) & 7,
                        (instr >> 12) & 1,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 0 && x4 == 0 && x5 == 0 && x7 == 1 && x8 == 2 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Rn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::DupZR {
                                    size: size as _,
                                    Rn: Rn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 0 && x4 == 2 && x5 == 0 && x7 == 1 && x8 == 2 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Rm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match () {
                                () => Some(Instr::InsrZR {
                                    size: size as _,
                                    Rm: Rm as _,
                                    Zdn: Zdn as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 0 && x4 & 1 == 0 && x5 == 0 && x7 == 0 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 0 && x4 & 1 == 0 && x5 == 0 && x7 == 1 && x8 & 1 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 0 && x4 & 1 == 1 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, _, x8, _) if x3 == 0 && x4 & 1 == 1 && x8 == 1 => {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, x8, _)
                            if x3 == 0 && x5 == 1 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, _, x8, _) if x3 == 0 && x5 == 1 && x8 == 1 => None,
                        (_, _, _, x3, _, _, _, x7, x8, _) if x3 == 0 && x7 == 0 && x8 & 2 == 2 => {
                            None
                        }
                        (_, _, _, x3, _, _, _, _, x8, _) if x3 == 1 && x8 != 0 => None,
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 2 && x4 & 2 == 0 && x7 == 0 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 2 && x4 & 2 == 0 && x7 == 1 && x8 == 2 =>
                        {
                            let size = (instr >> 22) & 3;
                            let U = (instr >> 17) & 1;
                            let H = (instr >> 16) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match (U, H) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SunpkloZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::SunpkhiZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::UunpkloZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UunpkhiZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 2 && x4 & 2 == 0 && x7 == 1 && x8 & 1 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 2 && x4 == 2 && x5 == 0 && x7 == 0 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 2 && x4 == 2 && x5 == 0 && x7 == 1 && x8 == 2 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Vm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match () {
                                () => Some(Instr::InsrZV {
                                    size: size as _,
                                    Vm: Vm as _,
                                    Zdn: Zdn as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 2 && x4 == 2 && x5 == 0 && x7 == 1 && x8 & 1 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 2 && x4 == 3 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, _, x8, _) if x3 == 2 && x4 == 3 && x8 == 1 => None,
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 2 && x4 & 2 == 2 && x5 == 1 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, _, x8, _)
                            if x3 == 2 && x4 & 2 == 2 && x5 == 1 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 3 && x4 == 0 && x5 == 0 && x7 == 0 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 3 && x4 == 0 && x5 == 0 && x7 == 1 && x8 == 2 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::RevZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 3 && x4 == 0 && x5 == 0 && x7 == 1 && x8 & 1 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, x7, x8, _)
                            if x3 == 3 && x4 & 2 == 0 && x5 == 1 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, _, x8, _)
                            if x3 == 3 && x4 & 2 == 0 && x5 == 1 && x8 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, x7, x8, _)
                            if x3 == 3 && x4 != 0 && x7 == 1 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, _, x8, _) if x3 == 3 && x4 != 0 && x8 == 1 => None,
                        (_, _, _, x3, _, _, _, x7, x8, _)
                            if x3 & 2 == 2 && x7 == 0 && x8 & 2 == 2 =>
                        {
                            None
                        }
                        (_, _, _, _, _, _, _, x7, x8, _) if x7 == 0 && x8 == 0 => {
                            let imm2 = (instr >> 22) & 3;
                            let tsz = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::DupZZi {
                                    imm2: imm2 as _,
                                    tsz: tsz as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, _, _, _, _, x7, x8, _) if x7 == 1 && x8 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::TblZZz1 {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 56 == 16 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 9) & 15,
                        (instr >> 5) & 15,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, _, x3, _, x5, _, x7, _)
                            if x1 == 0 && x3 & 30 == 16 && x5 == 0 && x7 == 0 =>
                        {
                            let H = (instr >> 16) & 1;
                            let Pn = (instr >> 5) & 15;
                            let Pd = instr & 15;
                            match H {
                                x0 if x0 == 0 => Some(Instr::PunpkloPP {
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PunpkhiPP {
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, x3, _, x5, _, x7, _)
                            if x1 == 1 && x3 & 30 == 16 && x5 == 0 && x7 == 0 =>
                        {
                            None
                        }
                        (_, x1, _, x3, _, x5, _, x7, _)
                            if x1 == 2 && x3 & 30 == 16 && x5 == 0 && x7 == 0 =>
                        {
                            None
                        }
                        (_, x1, _, x3, _, x5, _, x7, _)
                            if x1 == 3 && x3 & 30 == 16 && x5 == 0 && x7 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, _)
                            if x3 & 16 == 0 && x5 & 1 == 0 && x7 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pm = (instr >> 16) & 15;
                            let opc = (instr >> 11) & 3;
                            let H = (instr >> 10) & 1;
                            let Pn = (instr >> 5) & 15;
                            let Pd = instr & 15;
                            match (opc, H) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Zip1PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Zip2PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Uzp1PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Uzp2PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Trn1PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Trn2PPp {
                                    size: size as _,
                                    Pm: Pm as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _, x7, _)
                            if x3 & 16 == 0 && x5 & 1 == 1 && x7 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, _) if x3 == 20 && x5 == 0 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Pn = (instr >> 5) & 15;
                            let Pd = instr & 15;
                            match () {
                                () => Some(Instr::RevPP {
                                    size: size as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, _, x5, _, x7, _) if x3 == 21 && x5 == 0 && x7 == 0 => None,
                        (_, _, _, x3, _, x5, _, x7, _) if x3 & 26 == 16 && x5 == 8 && x7 == 0 => {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, _)
                            if x3 & 26 == 16 && x5 & 7 == 4 && x7 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, _)
                            if x3 & 26 == 16 && x5 & 3 == 2 && x7 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, x7, _)
                            if x3 & 26 == 16 && x5 & 1 == 1 && x7 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, _, _, x7, _) if x3 & 26 == 18 && x7 == 0 => None,
                        (_, _, _, x3, _, _, _, x7, _) if x3 & 24 == 24 && x7 == 0 => None,
                        (_, _, _, _, _, _, _, x7, _) if x7 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 56 == 24 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let opc = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::Zip1ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::Zip2ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::Uzp1ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::Uzp2ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 4 => Some(Instr::Trn1ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 5 => Some(Instr::Trn2ZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 & 6 == 6 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 48 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 20) & 1,
                        (instr >> 17) & 7,
                        (instr >> 16) & 1,
                        (instr >> 14) & 3,
                        (instr >> 13) & 1,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 0 && x5 == 0 && x7 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Vn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::CpyZPV {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Vn: Vn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 0 && x5 == 1 && x7 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::CompactZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 == 0 && x7 == 1 => {
                            let size = (instr >> 22) & 3;
                            let B = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Rd = instr & 31;
                            match B {
                                x0 if x0 == 0 => Some(Instr::LastaRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Rd: Rd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::LastbRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Rd: Rd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 == 1 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let B = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Vd = instr & 31;
                            match B {
                                x0 if x0 == 0 => Some(Instr::LastaVPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::LastbVPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Vd: Vd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 & 6 == 2 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::RevbZZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::RevhZZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::RevwZZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::RbitZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 & 6 == 2 && x7 == 1 => None,
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 4 && x5 == 0 && x7 == 1 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match () {
                                () => Some(Instr::CpyZPR {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zd: Zd as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 4 && x5 == 1 && x7 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 == 4 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let B = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match B {
                                x0 if x0 == 0 => Some(Instr::ClastaZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::ClastbZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 == 5 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let B = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Vdn = instr & 31;
                            match B {
                                x0 if x0 == 0 => Some(Instr::ClastaVPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Vdn: Vdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::ClastbVPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Vdn: Vdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 6 && x5 == 0 && x7 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match () {
                                () => Some(Instr::SpliceZPZzDes {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                            }
                        }
                        (_, _, _, x3, x4, x5, _, x7, _)
                            if x3 == 0 && x4 == 6 && x5 == 0 && x7 == 1 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, x5, _, _, _) if x3 == 0 && x4 == 6 && x5 == 1 => None,
                        (_, _, _, x3, x4, x5, _, _, _) if x3 == 0 && x4 == 7 && x5 == 0 => None,
                        (_, _, _, x3, x4, x5, _, _, _) if x3 == 0 && x4 == 7 && x5 == 1 => None,
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 0 && x4 & 3 == 1 && x7 == 1 => None,
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 1 && x4 == 0 && x7 == 0 => None,
                        (_, _, _, x3, x4, _, _, x7, _) if x3 == 1 && x4 == 0 && x7 == 1 => {
                            let size = (instr >> 22) & 3;
                            let B = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Rdn = instr & 31;
                            match B {
                                x0 if x0 == 0 => Some(Instr::ClastaRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Rdn: Rdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::ClastbRPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Rdn: Rdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, _, _, _) if x3 == 1 && x4 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 48 == 48 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let Pg = (instr >> 10) & 15;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match () {
                        () => Some(Instr::SelZPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 == 2 && x4 & 16 == 16 && x6 & 56 == 0 =>
                {
                    match (
                        (instr >> 23) & 511,
                        (instr >> 22) & 1,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, x1, _, _, _, _) if x1 == 0 => {
                            let imm8h = (instr >> 16) & 31;
                            let imm8l = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match () {
                                () => Some(Instr::ExtZZiDes {
                                    imm8h: imm8h as _,
                                    imm8l: imm8l as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                            }
                        }
                        (_, x1, _, _, _, _) if x1 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 0 && x2 == 3 && x4 & 16 == 16 && x6 & 56 == 0 =>
                {
                    let op = (instr >> 22) & 1;
                    let Zm = (instr >> 16) & 31;
                    let opc2 = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match (op, opc2) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Zip1ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Zip2ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Uzp1ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Uzp2ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 & 6 == 4 => None,
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::Trn1ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::Trn2ZZzQ {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 1 && x2 & 2 == 0 && x4 & 16 == 0 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 15) & 63,
                        (instr >> 14) & 1,
                        instr & 16383,
                    ) {
                        (_, _, _, _, x4, _) if x4 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let op = (instr >> 15) & 1;
                            let o2 = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let ne = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (op, o2, ne) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::CmphsPPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::CmphiPPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::CmpeqPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::CmpnePPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::CmpgePPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::CmpgtPPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::CmpeqPPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::CmpnePPZz {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, _) if x4 == 1 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 15) & 1;
                            let lt = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let ne = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (U, lt, ne) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::CmpgePPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::CmpgtPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::CmpltPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::CmplePPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::CmphsPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::CmphiPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::CmploPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::CmplsPPZw {
                                        size: size as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 1 && x2 & 2 == 0 && x4 & 16 == 16 => {
                    let size = (instr >> 22) & 3;
                    let imm7 = (instr >> 14) & 127;
                    let lt = (instr >> 13) & 1;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let ne = (instr >> 4) & 1;
                    let Pd = instr & 15;
                    match (lt, ne) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::CmphsPPZi {
                            size: size as _,
                            imm7: imm7 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::CmphiPPZi {
                            size: size as _,
                            imm7: imm7 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::CmploPPZi {
                            size: size as _,
                            imm7: imm7 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::CmplsPPZi {
                            size: size as _,
                            imm7: imm7 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 16 == 0 =>
                {
                    let size = (instr >> 22) & 3;
                    let imm5 = (instr >> 16) & 31;
                    let op = (instr >> 15) & 1;
                    let o2 = (instr >> 13) & 1;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let ne = (instr >> 4) & 1;
                    let Pd = instr & 15;
                    match (op, o2, ne) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => Some(Instr::CmpgePPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => Some(Instr::CmpgtPPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => Some(Instr::CmpltPPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => Some(Instr::CmplePPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => Some(Instr::CmpeqPPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => Some(Instr::CmpnePPZi {
                            size: size as _,
                            imm5: imm5 as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 24 == 0 && x6 & 48 == 16 =>
                {
                    let op = (instr >> 23) & 1;
                    let S = (instr >> 22) & 1;
                    let Pm = (instr >> 16) & 15;
                    let Pg = (instr >> 10) & 15;
                    let o2 = (instr >> 9) & 1;
                    let Pn = (instr >> 5) & 15;
                    let o3 = (instr >> 4) & 1;
                    let Pd = instr & 15;
                    match (op, S, o2, o3) {
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::AndPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::BicPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::EorPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::SelPPPp {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::AndsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::BicsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::EorsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::OrrPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::OrnPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::NorPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::NandPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::OrrsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::OrnsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::NorsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 => {
                            Some(Instr::NandsPPPpZ {
                                Pm: Pm as _,
                                Pg: Pg as _,
                                Pn: Pn as _,
                                Pd: Pd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 24 == 0 && x6 & 48 == 48 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 20) & 3,
                        (instr >> 16) & 15,
                        (instr >> 14) & 3,
                        (instr >> 10) & 15,
                        (instr >> 9) & 1,
                        instr & 511,
                    ) {
                        (_, _, _, _, _, _, x6, _) if x6 == 0 => {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pm = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 15;
                            let Pn = (instr >> 5) & 15;
                            let B = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (op, S, B) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::BrkpaPPPp {
                                        Pm: Pm as _,
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::BrkpbPPPp {
                                        Pm: Pm as _,
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::BrkpasPPPp {
                                        Pm: Pm as _,
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::BrkpbsPPPp {
                                        Pm: Pm as _,
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, _, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 24 == 8 && x6 & 48 == 16 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 23) & 1,
                        (instr >> 22) & 1,
                        (instr >> 20) & 3,
                        (instr >> 16) & 15,
                        (instr >> 14) & 3,
                        (instr >> 10) & 15,
                        (instr >> 9) & 1,
                        (instr >> 5) & 15,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, _, _, x4, _, _, x7, _, x9, _)
                            if x1 == 0 && x4 == 8 && x7 == 0 && x9 == 0 =>
                        {
                            let S = (instr >> 22) & 1;
                            let Pg = (instr >> 10) & 15;
                            let Pn = (instr >> 5) & 15;
                            let Pdm = instr & 15;
                            match S {
                                x0 if x0 == 0 => Some(Instr::BrknPPPp {
                                    Pg: Pg as _,
                                    Pn: Pn as _,
                                    Pdm: Pdm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::BrknsPPPp {
                                    Pg: Pg as _,
                                    Pn: Pn as _,
                                    Pdm: Pdm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, x4, _, _, x7, _, x9, _)
                            if x1 == 0 && x4 == 8 && x7 == 0 && x9 == 1 =>
                        {
                            None
                        }
                        (_, x1, _, _, x4, _, _, x7, _, _, _)
                            if x1 == 0 && x4 & 7 == 0 && x7 == 1 =>
                        {
                            None
                        }
                        (_, x1, _, _, x4, _, _, _, _, _, _) if x1 == 0 && x4 & 4 == 4 => None,
                        (_, x1, _, _, x4, _, _, _, _, _, _) if x1 == 0 && x4 & 2 == 2 => None,
                        (_, x1, _, _, x4, _, _, _, _, _, _) if x1 == 0 && x4 & 1 == 1 => None,
                        (_, x1, _, _, x4, _, _, x7, _, _, _) if x1 == 1 && x4 == 0 && x7 == 1 => {
                            None
                        }
                        (_, x1, _, _, x4, _, _, _, _, _, _) if x1 == 1 && x4 != 0 => None,
                        (_, _, _, _, x4, _, _, x7, _, _, _) if x4 == 0 && x7 == 0 => {
                            let B = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pg = (instr >> 10) & 15;
                            let Pn = (instr >> 5) & 15;
                            let M = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (B, S, M) {
                                (_, x1, x2) if x1 == 1 && x2 == 1 => None,
                                (x0, x1, _) if x0 == 0 && x1 == 0 => Some(Instr::BrkaPPP {
                                    Pg: Pg as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::BrkasPPPZ {
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 1 && x1 == 0 => Some(Instr::BrkbPPP {
                                    Pg: Pg as _,
                                    Pn: Pn as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::BrkbsPPPZ {
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 24 == 8 && x6 & 48 == 48 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 20) & 3,
                        (instr >> 16) & 15,
                        (instr >> 14) & 3,
                        (instr >> 11) & 7,
                        (instr >> 9) & 3,
                        (instr >> 5) & 15,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, _, _, x3, _, _, x6, _, x8, _) if x3 == 0 && x6 & 1 == 0 && x8 == 0 => {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pg = (instr >> 10) & 15;
                            let Pn = (instr >> 5) & 15;
                            let opc2 = instr & 15;
                            match (op, S, opc2) {
                                (x0, x1, _) if x0 == 0 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::PtestPP {
                                        Pg: Pg as _,
                                        Pn: Pn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 & 14 == 2 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 & 12 == 4 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 & 8 == 8 => None,
                                (x0, _, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _, x8, _) if x3 == 4 && x6 & 1 == 0 && x8 == 0 => {
                            None
                        }
                        (_, _, _, x3, _, _, x6, _, x8, _)
                            if x3 & 11 == 2 && x6 & 1 == 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, _, x6, _, x8, _)
                            if x3 & 9 == 1 && x6 & 1 == 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, _, x6, _, x8, _)
                            if x3 & 8 == 0 && x6 & 1 == 1 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 8 && x5 == 0 && x6 == 0 && x8 == 0 =>
                        {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pg = (instr >> 5) & 15;
                            let Pdn = instr & 15;
                            match (op, S) {
                                (x0, x1) if x0 == 0 && x1 == 0 => None,
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::PfirstPPP {
                                    Pg: Pg as _,
                                    Pdn: Pdn as _,
                                }),
                                (x0, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 8 && x5 == 0 && x6 != 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, x7, x8, _)
                            if x3 == 8 && x5 == 4 && x6 == 2 && x7 == 0 && x8 == 0 =>
                        {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pd = instr & 15;
                            match (op, S) {
                                (x0, x1) if x0 == 0 && x1 == 0 => {
                                    Some(Instr::PfalseP { Pd: Pd as _ })
                                }
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, x6, x7, x8, _)
                            if x3 == 8 && x5 == 4 && x6 == 2 && x7 != 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 8 && x5 == 6 && x6 == 0 && x8 == 0 =>
                        {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pg = (instr >> 5) & 15;
                            let Pd = instr & 15;
                            match (op, S) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::RdffrPPF {
                                    Pg: Pg as _,
                                    Pd: Pd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::RdffrsPPF {
                                    Pg: Pg as _,
                                    Pd: Pd as _,
                                }),
                                (x0, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 9 && x5 == 0 && x6 & 2 == 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 9 && x5 == 0 && x6 == 2 && x8 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let Pg = (instr >> 5) & 15;
                            let Pdn = instr & 15;
                            match () {
                                () => Some(Instr::PnextPPP {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Pdn: Pdn as _,
                                }),
                            }
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 9 && x5 == 0 && x6 == 3 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 == 9 && x5 == 4 && x6 == 2 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, x7, x8, _)
                            if x3 == 9 && x5 == 6 && x6 == 0 && x7 == 0 && x8 == 0 =>
                        {
                            let op = (instr >> 23) & 1;
                            let S = (instr >> 22) & 1;
                            let Pd = instr & 15;
                            match (op, S) {
                                (x0, x1) if x0 == 0 && x1 == 0 => {
                                    Some(Instr::RdffrPF { Pd: Pd as _ })
                                }
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, x6, x7, x8, _)
                            if x3 == 9 && x5 == 6 && x6 == 0 && x7 != 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, _, x8, _) if x3 & 14 == 8 && x5 == 2 && x8 == 0 => {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 & 14 == 8 && x5 == 4 && x6 & 2 == 0 && x8 == 0 =>
                        {
                            let size = (instr >> 22) & 3;
                            let S = (instr >> 16) & 1;
                            let pattern = (instr >> 5) & 31;
                            let Pd = instr & 15;
                            match S {
                                x0 if x0 == 0 => Some(Instr::PtruePS {
                                    size: size as _,
                                    pattern: pattern as _,
                                    Pd: Pd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PtruesPS {
                                    size: size as _,
                                    pattern: pattern as _,
                                    Pd: Pd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 & 14 == 8 && x5 == 4 && x6 == 3 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, x6, _, x8, _)
                            if x3 & 14 == 8 && x5 == 6 && x6 != 0 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, x5, _, _, x8, _)
                            if x3 & 14 == 8 && x5 & 1 == 1 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, _, _, _, _, x8, _) if x3 & 14 == 12 && x8 == 0 => None,
                        (_, _, _, x3, _, _, _, _, x8, _) if x3 & 10 == 10 && x8 == 0 => None,
                        (_, _, _, _, _, _, _, _, x8, _) if x8 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 48 == 0 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 14) & 3,
                        (instr >> 13) & 1,
                        (instr >> 10) & 7,
                        (instr >> 4) & 63,
                        instr & 15,
                    ) {
                        (_, _, _, _, _, x5, _, _, _) if x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Rm = (instr >> 16) & 31;
                            let sf = (instr >> 12) & 1;
                            let U = (instr >> 11) & 1;
                            let lt = (instr >> 10) & 1;
                            let Rn = (instr >> 5) & 31;
                            let eq = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (U, lt, eq) {
                                (_, x1, _) if x1 == 0 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::WhileltPPRr {
                                        size: size as _,
                                        Rm: Rm as _,
                                        sf: sf as _,
                                        Rn: Rn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::WhilelePPRr {
                                        size: size as _,
                                        Rm: Rm as _,
                                        sf: sf as _,
                                        Rn: Rn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::WhileloPPRr {
                                        size: size as _,
                                        Rm: Rm as _,
                                        sf: sf as _,
                                        Rn: Rn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::WhilelsPPRr {
                                        size: size as _,
                                        Rm: Rm as _,
                                        sf: sf as _,
                                        Rn: Rn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, x6, _, x8) if x5 == 1 && x6 == 0 && x8 == 0 => {
                            let op = (instr >> 23) & 1;
                            let sz = (instr >> 22) & 1;
                            let Rm = (instr >> 16) & 31;
                            let Rn = (instr >> 5) & 31;
                            let ne = (instr >> 4) & 1;
                            match (op, ne) {
                                (x0, _) if x0 == 0 => None,
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::CtermeqRr {
                                    sz: sz as _,
                                    Rm: Rm as _,
                                    Rn: Rn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::CtermneRr {
                                    sz: sz as _,
                                    Rm: Rm as _,
                                    Rn: Rn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, x6, _, x8) if x5 == 1 && x6 == 0 && x8 != 0 => None,
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 1 && x6 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 48 == 16 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 16 == 16 && x6 & 48 == 48 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 17) & 3,
                        (instr >> 16) & 1,
                        (instr >> 14) & 3,
                        instr & 16383,
                    ) {
                        (_, _, _, x3, _, _, _, _) if x3 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let sh = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AddZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::SubZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => None,
                                x0 if x0 == 3 => Some(Instr::SubrZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::SqaddZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::UqaddZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::SqsubZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::UqsubZZi {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _, _) if x3 == 1 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let o2 = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zdn = instr & 31;
                            match (opc, o2) {
                                (x0, x1) if x0 & 4 == 0 && x1 == 1 => None,
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SmaxZZi {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::UmaxZZi {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::SminZZi {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::UminZZi {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, _) if x0 & 4 == 4 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _, _) if x3 == 2 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let o2 = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zdn = instr & 31;
                            match (opc, o2) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::MulZZi {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zdn: Zdn as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, _) if x0 == 1 => None,
                                (x0, _) if x0 & 6 == 2 => None,
                                (x0, _) if x0 & 4 == 4 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _, _) if x3 == 3 && x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let sh = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::DupZI {
                                    size: size as _,
                                    sh: sh as _,
                                    imm8: imm8 as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => None,
                                x0 if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _, _) if x3 == 3 && x5 == 1 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 17) & 3;
                            let o2 = (instr >> 13) & 1;
                            let imm8 = (instr >> 5) & 255;
                            let Zd = instr & 31;
                            match (opc, o2) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::FdupZI {
                                    size: size as _,
                                    imm8: imm8 as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => None,
                                (x0, _) if x0 == 1 => None,
                                (x0, _) if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 28 == 16 && x6 & 48 == 32 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 7;
                    let Pg = (instr >> 10) & 15;
                    let o2 = (instr >> 9) & 1;
                    let Pn = (instr >> 5) & 15;
                    let Rd = instr & 31;
                    match (opc, o2) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::CntpRPP {
                            size: size as _,
                            Pg: Pg as _,
                            Pn: Pn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => None,
                        (x0, _) if x0 == 1 => None,
                        (x0, _) if x0 & 6 == 2 => None,
                        (x0, _) if x0 & 4 == 4 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 28 == 20 && x6 & 60 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 19) & 7,
                        (instr >> 18) & 1,
                        (instr >> 16) & 3,
                        (instr >> 12) & 15,
                        (instr >> 11) & 1,
                        instr & 2047,
                    ) {
                        (_, _, _, x3, _, _, x6, _) if x3 == 0 && x6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let D = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let opc = (instr >> 9) & 3;
                            let Pm = (instr >> 5) & 15;
                            let Zdn = instr & 31;
                            match (D, U, opc) {
                                (_, _, x2) if x2 == 1 => None,
                                (_, _, x2) if x2 & 2 == 2 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::SqincpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::UqincpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::SqdecpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::UqdecpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 0 && x6 == 1 => {
                            let size = (instr >> 22) & 3;
                            let D = (instr >> 17) & 1;
                            let U = (instr >> 16) & 1;
                            let sf = (instr >> 10) & 1;
                            let op = (instr >> 9) & 1;
                            let Pm = (instr >> 5) & 15;
                            let Rdn = instr & 31;
                            match (D, U, sf, op) {
                                (_, _, _, x3) if x3 == 1 => None,
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqincpRPRSx {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqincpRPRX {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::UqincpRPRUw {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::UqincpRPRX {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::SqdecpRPRSx {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::SqdecpRPRX {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::UqdecpRPRUw {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::UqdecpRPRX {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 1 && x6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let op = (instr >> 17) & 1;
                            let D = (instr >> 16) & 1;
                            let opc2 = (instr >> 9) & 3;
                            let Pm = (instr >> 5) & 15;
                            let Zdn = instr & 31;
                            match (op, D, opc2) {
                                (x0, _, x2) if x0 == 0 && x2 == 1 => None,
                                (x0, _, x2) if x0 == 0 && x2 & 2 == 2 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::IncpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::DecpZPZ {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Zdn: Zdn as _,
                                    })
                                }
                                (x0, _, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _) if x3 == 1 && x6 == 1 => {
                            let size = (instr >> 22) & 3;
                            let op = (instr >> 17) & 1;
                            let D = (instr >> 16) & 1;
                            let opc2 = (instr >> 9) & 3;
                            let Pm = (instr >> 5) & 15;
                            let Rdn = instr & 31;
                            match (op, D, opc2) {
                                (x0, _, x2) if x0 == 0 && x2 == 1 => None,
                                (x0, _, x2) if x0 == 0 && x2 & 2 == 2 => None,
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::IncpRPR {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::DecpRPR {
                                        size: size as _,
                                        Pm: Pm as _,
                                        Rdn: Rdn as _,
                                    })
                                }
                                (x0, _, _) if x0 == 1 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 28 == 20 && x6 & 60 == 36 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 19) & 7,
                        (instr >> 18) & 1,
                        (instr >> 16) & 3,
                        (instr >> 12) & 15,
                        (instr >> 9) & 7,
                        (instr >> 5) & 15,
                        instr & 31,
                    ) {
                        (_, _, _, x3, x4, _, x6, _, x8)
                            if x3 == 0 && x4 == 0 && x6 == 0 && x8 == 0 =>
                        {
                            let opc = (instr >> 22) & 3;
                            let Pn = (instr >> 5) & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::WrffrFP { Pn: Pn as _ }),
                                x0 if x0 == 1 => None,
                                x0 if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, x6, x7, x8)
                            if x3 == 1 && x4 == 0 && x6 == 0 && x7 == 0 && x8 == 0 =>
                        {
                            let opc = (instr >> 22) & 3;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::SetffrF),
                                x0 if x0 == 1 => None,
                                x0 if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, x4, _, x6, x7, x8)
                            if x3 == 1 && x4 == 0 && x6 == 0 && x7 & 8 == 8 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, x6, x7, x8)
                            if x3 == 1 && x4 == 0 && x6 == 0 && x7 & 4 == 4 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, x6, x7, x8)
                            if x3 == 1 && x4 == 0 && x6 == 0 && x7 & 2 == 2 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, x3, x4, _, x6, x7, x8)
                            if x3 == 1 && x4 == 0 && x6 == 0 && x7 & 1 == 1 && x8 == 0 =>
                        {
                            None
                        }
                        (_, _, _, _, x4, _, x6, _, x8) if x4 == 0 && x6 == 0 && x8 != 0 => None,
                        (_, _, _, _, x4, _, x6, _, _) if x4 == 0 && x6 != 0 => None,
                        (_, _, _, _, x4, _, _, _, _) if x4 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 28 == 20 && x6 & 56 == 40 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 1 && x2 & 2 == 2 && x4 & 24 == 24 && x6 & 48 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 2 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 32 == 0 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 15) & 1,
                        (instr >> 14) & 1,
                        (instr >> 11) & 7,
                        (instr >> 10) & 1,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 0 && x6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match U {
                                x0 if x0 == 0 => Some(Instr::SdotZZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::UdotZZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 0 && x6 != 0 => None,
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 1 && x6 & 4 == 0 => None,
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 1 && x6 & 6 == 4 => None,
                        (_, _, _, _, _, x5, x6, _, _) if x5 == 1 && x6 == 6 => None,
                        (_, _, _, _, _, x5, x6, x7, _) if x5 == 1 && x6 == 7 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match size {
                                x0 if x0 & 2 == 0 => None,
                                x0 if x0 == 2 => Some(Instr::UsdotZZzzS {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, x6, x7, _) if x5 == 1 && x6 == 7 && x7 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 2 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 32 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 2 && x2 & 2 == 0 && x4 & 16 == 16 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 11) & 3,
                        instr & 2047,
                    ) {
                        (_, _, _, _, x4, x5, _) if x4 == 0 && x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 31;
                            let U = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match (size, U) {
                                (x0, _) if x0 & 2 == 0 => None,
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::SdotZZzziS {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::UdotZZzziS {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::SdotZZzziD {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::UdotZZzziD {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, x5, _) if x4 == 0 && x5 == 1 => None,
                        (_, _, _, _, x4, x5, _) if x4 == 0 && x5 == 2 => None,
                        (_, _, _, _, x4, x5, _) if x4 == 0 && x5 == 3 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 31;
                            let U = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match (size, U) {
                                (x0, _) if x0 & 2 == 0 => None,
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::UsdotZZzziS {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::SudotZZzziS {
                                    opc: opc as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                (x0, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, _, _) if x4 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 2 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 32 == 0 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 2 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 48 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 14) & 3,
                        (instr >> 10) & 15,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, _) if x5 & 12 == 0 => None,
                        (_, _, _, _, _, x5, _) if x5 & 14 == 4 => None,
                        (_, _, _, _, _, x5, _) if x5 == 6 => {
                            let uns = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match uns {
                                x0 if x0 == 0 => Some(Instr::SmmlaZZzz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => None,
                                x0 if x0 == 2 => Some(Instr::UsmmlaZZzz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::UmmlaZZzz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 7 => None,
                        (_, _, _, _, _, x5, _) if x5 & 8 == 8 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 2 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 48 == 48 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 2 && x2 & 2 == 2 && x4 & 16 == 16 => None,
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 0 && x6 & 32 == 0 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let rot = (instr >> 13) & 3;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zda = instr & 31;
                    match () {
                        () => Some(Instr::FcmlaZPZzz {
                            size: size as _,
                            Zm: Zm as _,
                            rot: rot as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 26 == 2 && x6 & 32 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 == 0 && x6 & 56 == 32 =>
                {
                    let size = (instr >> 22) & 3;
                    let rot = (instr >> 16) & 1;
                    let Pg = (instr >> 10) & 7;
                    let Zm = (instr >> 5) & 31;
                    let Zdn = instr & 31;
                    match () {
                        () => Some(Instr::FcaddZPZz {
                            size: size as _,
                            rot: rot as _,
                            Pg: Pg as _,
                            Zm: Zm as _,
                            Zdn: Zdn as _,
                        }),
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 == 0 && x6 & 56 == 40 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 == 0 && x6 & 48 == 48 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 == 1 && x6 & 32 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 30 == 4 && x6 & 56 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 30 == 4 && x6 & 56 == 40 =>
                {
                    let opc = (instr >> 22) & 3;
                    let opc2 = (instr >> 16) & 3;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match (opc, opc2) {
                        (x0, _) if x0 & 2 == 0 => None,
                        (x0, x1) if x0 == 2 && x1 & 2 == 0 => None,
                        (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::BfcvtntZPZS2Bf {
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 3 => None,
                        (x0, _) if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 30 == 4 && x6 & 48 == 48 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 24 == 8 && x6 & 32 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 22 == 2 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 62 == 0 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 31;
                    let op = (instr >> 10) & 1;
                    let Zn = (instr >> 5) & 31;
                    let Zda = instr & 31;
                    match (size, op) {
                        (x0, x1) if x0 & 2 == 0 && x1 == 0 => Some(Instr::FmlaZZzziH {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        (x0, x1) if x0 & 2 == 0 && x1 == 1 => Some(Instr::FmlsZZzziH {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::FmlaZZzziS {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::FmlsZZzziS {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::FmlaZZzziD {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::FmlsZZzziD {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 4 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 31;
                    let rot = (instr >> 10) & 3;
                    let Zn = (instr >> 5) & 31;
                    let Zda = instr & 31;
                    match size {
                        x0 if x0 & 2 == 0 => None,
                        x0 if x0 == 2 => Some(Instr::FcmlaZZzziH {
                            opc: opc as _,
                            rot: rot as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::FcmlaZZzziS {
                            opc: opc as _,
                            rot: rot as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 == 8 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 31;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match size {
                        x0 if x0 & 2 == 0 => Some(Instr::FmulZZziH {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::FmulZZziS {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::FmulZZziD {
                            opc: opc as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 == 9 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 12 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 52 == 16 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 23) & 1,
                        (instr >> 22) & 1,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 14) & 3,
                        (instr >> 13) & 1,
                        (instr >> 12) & 1,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, x1, _, _, _, _, x6, _, x8, _) if x1 == 0 && x6 == 0 && x8 == 0 => {
                            let op = (instr >> 22) & 1;
                            let i2 = (instr >> 19) & 3;
                            let Zm = (instr >> 16) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match op {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::BfdotZZzzi {
                                    i2: i2 as _,
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, _, x6, _, x8, _) if x1 == 0 && x6 == 0 && x8 != 0 => None,
                        (_, x1, _, _, _, _, x6, _, _, _) if x1 == 0 && x6 == 1 => None,
                        (_, x1, _, _, _, _, _, _, _, _) if x1 == 1 => {
                            let o2 = (instr >> 22) & 1;
                            let i3h = (instr >> 19) & 3;
                            let Zm = (instr >> 16) & 7;
                            let op = (instr >> 13) & 1;
                            let i3l = (instr >> 11) & 1;
                            let T = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match (o2, op, T) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::BfmlalbZZzzi {
                                        i3h: i3h as _,
                                        Zm: Zm as _,
                                        i3l: i3l as _,
                                        Zn: Zn as _,
                                        Zda: Zda as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::BfmlaltZZzzi {
                                        i3h: i3h as _,
                                        Zm: Zm as _,
                                        i3l: i3l as _,
                                        Zn: Zn as _,
                                        Zda: Zda as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 1 && x1 == 1 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 52 == 20 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 54 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 23) & 1,
                        (instr >> 22) & 1,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 14) & 3,
                        (instr >> 13) & 1,
                        (instr >> 11) & 3,
                        (instr >> 10) & 1,
                        instr & 1023,
                    ) {
                        (_, x1, _, _, _, _, x6, _, x8, _) if x1 == 0 && x6 == 0 && x8 == 0 => {
                            let op = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match op {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::BfdotZZzz {
                                    Zm: Zm as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, _, x6, _, x8, _) if x1 == 0 && x6 == 0 && x8 == 1 => None,
                        (_, x1, _, _, _, _, x6, _, _, _) if x1 == 0 && x6 == 1 => None,
                        (_, x1, _, _, _, _, _, _, _, _) if x1 == 1 => {
                            let o2 = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let op = (instr >> 13) & 1;
                            let T = (instr >> 10) & 1;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match (o2, op, T) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::BfmlalbZZzz {
                                        Zm: Zm as _,
                                        Zn: Zn as _,
                                        Zda: Zda as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::BfmlaltZZzz {
                                        Zm: Zm as _,
                                        Zn: Zn as _,
                                        Zda: Zda as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 1 && x1 == 1 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 52 == 36 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 56 == 48 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 == 56 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 == 57 =>
                {
                    let opc = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let Zn = (instr >> 5) & 31;
                    let Zda = instr & 31;
                    match opc {
                        x0 if x0 == 0 => None,
                        x0 if x0 == 1 => Some(Instr::BfmmlaZZzz {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::FmmlaZZzzS {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::FmmlaZZzzD {
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zda: Zda as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 62 == 58 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 0 && x4 & 16 == 16 && x6 & 60 == 60 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 16 == 16 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let op = (instr >> 15) & 1;
                    let o2 = (instr >> 13) & 1;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let o3 = (instr >> 4) & 1;
                    let Pd = instr & 15;
                    match (op, o2, o3) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => Some(Instr::FcmgePPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => Some(Instr::FcmgtPPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => Some(Instr::FcmeqPPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => Some(Instr::FcmnePPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => Some(Instr::FcmuoPPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => Some(Instr::FacgePPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => Some(Instr::FacgtPPZz {
                            size: size as _,
                            Zm: Zm as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Pd: Pd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 56 == 0 =>
                {
                    let size = (instr >> 22) & 3;
                    let Zm = (instr >> 16) & 31;
                    let opc = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Zd = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::FaddZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::FsubZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::FmulZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::FtsmulZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 & 6 == 4 => None,
                        x0 if x0 == 6 => Some(Instr::FrecpsZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        x0 if x0 == 7 => Some(Instr::FrsqrtsZZz {
                            size: size as _,
                            Zm: Zm as _,
                            Zn: Zn as _,
                            Zd: Zd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 56 == 32 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 19) & 3,
                        (instr >> 16) & 7,
                        (instr >> 13) & 7,
                        (instr >> 10) & 7,
                        (instr >> 6) & 15,
                        instr & 63,
                    ) {
                        (_, _, _, x3, _, _, _, _, _) if x3 & 2 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FaddZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FsubZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::FmulZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::FsubrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::FmaxnmZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::FminnmZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::FmaxZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::FminZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 8 => Some(Instr::FabdZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 9 => Some(Instr::FscaleZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 10 => Some(Instr::FmulxZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 11 => None,
                                x0 if x0 == 12 => Some(Instr::FdivrZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 13 => Some(Instr::FdivZPZz {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 & 14 == 14 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, x6, _, _) if x3 == 2 && x6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let imm3 = (instr >> 16) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match () {
                                () => Some(Instr::FtmadZZzi {
                                    size: size as _,
                                    imm3: imm3 as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                            }
                        }
                        (_, _, _, x3, _, _, x6, _, _) if x3 == 2 && x6 != 0 => None,
                        (_, _, _, x3, _, _, _, x7, _) if x3 == 3 && x7 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let i1 = (instr >> 5) & 1;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FaddZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FsubZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::FmulZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::FsubrZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::FmaxnmZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::FminnmZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::FmaxZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::FminZPZs {
                                    size: size as _,
                                    Pg: Pg as _,
                                    i1: i1 as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _, x7, _) if x3 == 3 && x7 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 16 == 0 && x6 & 56 == 40 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 18) & 7,
                        (instr >> 16) & 3,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 & 6 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FrintnZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FrintpZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::FrintmZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::FrintzZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::FrintaZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 5 => None,
                                x0 if x0 == 6 => Some(Instr::FrintxZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::FrintiZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 2 => {
                            let opc = (instr >> 22) & 3;
                            let opc2 = (instr >> 16) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match (opc, opc2) {
                                (x0, _) if x0 & 2 == 0 => None,
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::FcvtZPZS2H {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::FcvtZPZH2S {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::BfcvtZPZS2Bf {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => None,
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::FcvtZPZD2H {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::FcvtZPZH2D {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::FcvtZPZD2S {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::FcvtZPZS2D {
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 3 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FrecpxZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FsqrtZPZ {
                                    size: size as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 & 6 == 4 => {
                            let opc = (instr >> 22) & 3;
                            let opc2 = (instr >> 17) & 3;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match (opc, opc2, U) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, _) if x0 == 1 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZH2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZH2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZW2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZW2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZX2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZX2Fp16 {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 & 2 == 0 => None,
                                (x0, x1, x2) if x0 == 2 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZW2S {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZW2S {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 == 3 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZW2D {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZW2D {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 1 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZX2S {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZX2S {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 3 && x2 == 0 => {
                                    Some(Instr::ScvtfZPZX2D {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 3 && x2 == 1 => {
                                    Some(Instr::UcvtfZPZX2D {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 & 6 == 6 => {
                            let opc = (instr >> 22) & 3;
                            let opc2 = (instr >> 17) & 3;
                            let U = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match (opc, opc2, U) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, _) if x0 == 1 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZFp162H {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZFp162H {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZFp162W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZFp162W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZFp162X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZFp162X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 & 2 == 0 => None,
                                (x0, x1, x2) if x0 == 2 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZS2W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZS2W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 == 3 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZD2W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZD2W {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 1 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZS2X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZS2X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 3 && x2 == 0 => {
                                    Some(Instr::FcvtzsZPZD2X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 3 && x2 == 1 => {
                                    Some(Instr::FcvtzuZPZD2X {
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zd: Zd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 28 == 0 && x6 & 56 == 8 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 7;
                    let Pg = (instr >> 10) & 7;
                    let Zn = (instr >> 5) & 31;
                    let Vd = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::FaddvVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Vd: Vd as _,
                        }),
                        x0 if x0 == 1 => None,
                        x0 if x0 & 6 == 2 => None,
                        x0 if x0 == 4 => Some(Instr::FmaxnmvVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Vd: Vd as _,
                        }),
                        x0 if x0 == 5 => Some(Instr::FminnmvVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Vd: Vd as _,
                        }),
                        x0 if x0 == 6 => Some(Instr::FmaxvVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Vd: Vd as _,
                        }),
                        x0 if x0 == 7 => Some(Instr::FminvVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zn: Zn as _,
                            Vd: Vd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 28 == 4 && x6 & 60 == 8 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 28 == 4 && x6 & 60 == 12 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 19) & 7,
                        (instr >> 16) & 7,
                        (instr >> 12) & 15,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, _, _, _, x5, _) if x5 == 0 => {
                            let size = (instr >> 22) & 3;
                            let opc = (instr >> 16) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zd = instr & 31;
                            match opc {
                                x0 if x0 & 4 == 0 => None,
                                x0 if x0 & 6 == 4 => None,
                                x0 if x0 == 6 => Some(Instr::FrecpeZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::FrsqrteZZ {
                                    size: size as _,
                                    Zn: Zn as _,
                                    Zd: Zd as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 != 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 28 == 8 && x6 & 56 == 8 =>
                {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 19) & 7,
                        (instr >> 18) & 1,
                        (instr >> 16) & 3,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, _, x3, _, _, _) if x3 == 0 => {
                            let size = (instr >> 22) & 3;
                            let eq = (instr >> 17) & 1;
                            let lt = (instr >> 16) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let ne = (instr >> 4) & 1;
                            let Pd = instr & 15;
                            match (eq, lt, ne) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::FcmgePPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::FcmgtPPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::FcmltPPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::FcmlePPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, _, x2) if x0 == 1 && x2 == 1 => None,
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::FcmeqPPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::FcmnePPZ0 {
                                        size: size as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Pd: Pd as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _)
                    if x0 == 3 && x2 & 2 == 2 && x4 & 28 == 12 && x6 & 56 == 8 =>
                {
                    let size = (instr >> 22) & 3;
                    let opc = (instr >> 16) & 7;
                    let Pg = (instr >> 10) & 7;
                    let Zm = (instr >> 5) & 31;
                    let Vdn = instr & 31;
                    match opc {
                        x0 if x0 == 0 => Some(Instr::FaddaVPZ {
                            size: size as _,
                            Pg: Pg as _,
                            Zm: Zm as _,
                            Vdn: Vdn as _,
                        }),
                        x0 if x0 == 1 => None,
                        x0 if x0 & 6 == 2 => None,
                        x0 if x0 & 4 == 4 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 3 && x2 & 2 == 2 && x4 & 16 == 16 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 22) & 3,
                        (instr >> 21) & 1,
                        (instr >> 16) & 31,
                        (instr >> 15) & 1,
                        instr & 32767,
                    ) {
                        (_, _, _, _, x4, _) if x4 == 0 => {
                            let size = (instr >> 22) & 3;
                            let Zm = (instr >> 16) & 31;
                            let opc = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zda = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FmlaZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FmlsZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::FnmlaZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::FnmlsZPZzz {
                                    size: size as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zda: Zda as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, x4, _) if x4 == 1 => {
                            let size = (instr >> 22) & 3;
                            let Za = (instr >> 16) & 31;
                            let opc = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Zm = (instr >> 5) & 31;
                            let Zdn = instr & 31;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::FmadZPZzz {
                                    size: size as _,
                                    Za: Za as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::FmsbZPZzz {
                                    size: size as _,
                                    Za: Za as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::FnmadZPZzz {
                                    size: size as _,
                                    Za: Za as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::FnmsbZPZzz {
                                    size: size as _,
                                    Za: Za as _,
                                    Pg: Pg as _,
                                    Zm: Zm as _,
                                    Zdn: Zdn as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, _, _) if x0 == 4 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 5) & 255,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 0 && x2 & 1 == 1 && x4 & 4 == 0 && x6 == 0 =>
                        {
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let msz = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 0 && x2 & 1 == 1 && x4 & 4 == 0 && x6 == 1 =>
                        {
                            None
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 == 1 && x2 & 1 == 1 && x4 & 4 == 0 => {
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (U, ff) {
                                (x0, x1) if x0 == 0 && x1 == 0 => {
                                    Some(Instr::Ld1ShZPBzSX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 0 && x1 == 1 => {
                                    Some(Instr::Ldff1ShZPBzSX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ld1HZPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => {
                                    Some(Instr::Ldff1HZPBzSX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 == 2 && x2 & 1 == 1 && x4 & 4 == 0 => {
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (U, ff) {
                                (x0, _) if x0 == 0 => None,
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ld1WZPBzSX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => {
                                    Some(Instr::Ldff1WZPBzSX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 3 && x2 & 2 == 0 && x4 == 0 && x6 == 0 =>
                        {
                            let imm9h = (instr >> 16) & 63;
                            let imm9l = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Pt = instr & 15;
                            match () {
                                () => Some(Instr::LdrPBi {
                                    imm9h: imm9h as _,
                                    imm9l: imm9l as _,
                                    Rn: Rn as _,
                                    Pt: Pt as _,
                                }),
                            }
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 3 && x2 & 2 == 0 && x4 == 0 && x6 == 1 =>
                        {
                            None
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 == 3 && x2 & 2 == 0 && x4 == 2 => {
                            let imm9h = (instr >> 16) & 63;
                            let imm9l = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match () {
                                () => Some(Instr::LdrZBi {
                                    imm9h: imm9h as _,
                                    imm9l: imm9l as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                            }
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 == 3 && x2 & 2 == 0 && x4 & 5 == 1 => {
                            None
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 3 && x2 & 2 == 2 && x4 & 4 == 0 && x6 == 0 =>
                        {
                            let imm6 = (instr >> 16) & 63;
                            let msz = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPBiS {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPBiS {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPBiS {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPBiS {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 3 && x2 & 2 == 2 && x4 & 4 == 0 && x6 == 1 =>
                        {
                            None
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 != 3 && x2 & 1 == 0 && x4 & 4 == 0 => {
                            let opc = (instr >> 23) & 3;
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (opc, U, ff) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SbZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SbZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1BZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1BZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPBzSX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 == 0 && x4 & 6 == 4 => None,
                        (_, _, x2, _, x4, _, x6, _) if x2 == 0 && x4 == 6 && x6 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPBrS {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPBrS {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPBrS {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPBrS {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, x6, _) if x2 == 0 && x4 == 7 && x6 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, x6, _) if x2 == 0 && x4 & 6 == 6 && x6 == 1 => None,
                        (_, _, x2, _, x4, _, _, _) if x2 == 1 && x4 & 4 == 4 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, U, ff) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SbZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SbZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1BZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1BZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 2 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPAiS {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, _, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 & 2 == 2 && x4 & 4 == 4 => {
                            let dtypeh = (instr >> 23) & 3;
                            let imm6 = (instr >> 16) & 63;
                            let dtypel = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (dtypeh, dtypel) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Ld1RbZPBiU8 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Ld1RbZPBiU16 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Ld1RbZPBiU32 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Ld1RbZPBiU64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ld1RswZPBiS64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Ld1RhZPBiU16 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Ld1RhZPBiU32 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::Ld1RhZPBiU64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Ld1RshZPBiS64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Ld1RshZPBiS32 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::Ld1RwZPBiU32 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => Some(Instr::Ld1RwZPBiU64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::Ld1RsbZPBiS64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::Ld1RsbZPBiS32 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::Ld1RsbZPBiS16 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::Ld1RdZPBiU64 {
                                    imm6: imm6 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, _, _) if x0 == 5 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 16) & 15,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, x2, x3, _, x5, _) if x2 == 0 && x3 == 0 && x5 == 7 => {
                            let msz = (instr >> 23) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::Ldnt1BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ldnt1HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ldnt1WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ldnt1DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, x5, _) if x2 == 0 && x5 == 6 => {
                            let msz = (instr >> 23) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::Ldnt1BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ldnt1HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ldnt1WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ldnt1DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, x3, _, x5, _) if x2 != 0 && x3 == 0 && x5 == 7 => {
                            let msz = (instr >> 23) & 3;
                            let opc = (instr >> 21) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, opc) {
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Ld2BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Ld3BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Ld4BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Ld2HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Ld3HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::Ld4HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Ld2WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::Ld3WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => Some(Instr::Ld4WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::Ld2DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::Ld3DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::Ld4DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, x5, _) if x2 != 0 && x5 == 6 => {
                            let msz = (instr >> 23) & 3;
                            let opc = (instr >> 21) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, opc) {
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Ld2BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Ld3BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Ld4BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Ld2HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Ld3HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::Ld4HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Ld2WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::Ld3WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => Some(Instr::Ld4WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::Ld2DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::Ld3DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::Ld4DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _) if x3 == 0 && x5 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let ssz = (instr >> 21) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, ssz) {
                                (_, x1) if x1 & 2 == 2 => None,
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Ld1RqbZPBiU8 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Ld1RobZPBiU8 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ld1RqhZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Ld1RohZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Ld1RqwZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Ld1RowZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::Ld1RqdZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::Ld1RodZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _) if x3 == 0 && x5 == 5 => {
                            let dtype = (instr >> 21) & 15;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match dtype {
                                x0 if x0 == 0 => Some(Instr::Ld1BZPBiU8 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ld1BZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ld1BZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ld1BZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::Ld1SwZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::Ld1HZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::Ld1HZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::Ld1HZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 8 => Some(Instr::Ld1ShZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 9 => Some(Instr::Ld1ShZPBiS32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 10 => Some(Instr::Ld1WZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 11 => Some(Instr::Ld1WZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 12 => Some(Instr::Ld1SbZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 13 => Some(Instr::Ld1SbZPBiS32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 14 => Some(Instr::Ld1SbZPBiS16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 15 => Some(Instr::Ld1DZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _) if x3 == 1 && x5 == 1 => None,
                        (_, _, _, x3, _, x5, _) if x3 == 1 && x5 == 5 => {
                            let dtype = (instr >> 21) & 15;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match dtype {
                                x0 if x0 == 0 => Some(Instr::Ldnf1BZPBiU8 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ldnf1BZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ldnf1BZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ldnf1BZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::Ldnf1SwZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::Ldnf1HZPBiU16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::Ldnf1HZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::Ldnf1HZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 8 => Some(Instr::Ldnf1ShZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 9 => Some(Instr::Ldnf1ShZPBiS32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 10 => Some(Instr::Ldnf1WZPBiU32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 11 => Some(Instr::Ldnf1WZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 12 => Some(Instr::Ldnf1SbZPBiS64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 13 => Some(Instr::Ldnf1SbZPBiS32 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 14 => Some(Instr::Ldnf1SbZPBiS16 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 15 => Some(Instr::Ldnf1DZPBiU64 {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, x5, _) if x3 == 1 && x5 == 7 => None,
                        (_, _, _, _, _, x5, _) if x5 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let ssz = (instr >> 21) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, ssz) {
                                (_, x1) if x1 & 2 == 2 => None,
                                (x0, x1) if x0 == 0 && x1 == 0 => {
                                    Some(Instr::Ld1RqbZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 0 && x1 == 1 => {
                                    Some(Instr::Ld1RobZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 1 && x1 == 0 => {
                                    Some(Instr::Ld1RqhZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 1 && x1 == 1 => {
                                    Some(Instr::Ld1RohZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 2 && x1 == 0 => {
                                    Some(Instr::Ld1RqwZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 2 && x1 == 1 => {
                                    Some(Instr::Ld1RowZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 3 && x1 == 0 => {
                                    Some(Instr::Ld1RqdZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1) if x0 == 3 && x1 == 1 => {
                                    Some(Instr::Ld1RodZPBrContiguous {
                                        Rm: Rm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 2 => {
                            let dtype = (instr >> 21) & 15;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match dtype {
                                x0 if x0 == 0 => Some(Instr::Ld1BZPBrU8 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ld1BZPBrU16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ld1BZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ld1BZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::Ld1SwZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::Ld1HZPBrU16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::Ld1HZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::Ld1HZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 8 => Some(Instr::Ld1ShZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 9 => Some(Instr::Ld1ShZPBrS32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 10 => Some(Instr::Ld1WZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 11 => Some(Instr::Ld1WZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 12 => Some(Instr::Ld1SbZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 13 => Some(Instr::Ld1SbZPBrS32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 14 => Some(Instr::Ld1SbZPBrS16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 15 => Some(Instr::Ld1DZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 3 => {
                            let dtype = (instr >> 21) & 15;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match dtype {
                                x0 if x0 == 0 => Some(Instr::Ldff1BZPBrU8 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Ldff1BZPBrU16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Ldff1BZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Ldff1BZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::Ldff1SwZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::Ldff1HZPBrU16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::Ldff1HZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::Ldff1HZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 8 => Some(Instr::Ldff1ShZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 9 => Some(Instr::Ldff1ShZPBrS32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 10 => Some(Instr::Ldff1WZPBrU32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 11 => Some(Instr::Ldff1WZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 12 => Some(Instr::Ldff1SbZPBrS64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 13 => Some(Instr::Ldff1SbZPBrS32 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 14 => Some(Instr::Ldff1SbZPBrS16 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 15 => Some(Instr::Ldff1DZPBrU64 {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _) if x5 == 4 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, _, _) if x0 == 6 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        (instr >> 5) & 255,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 0 && x2 == 1 && x4 & 4 == 0 && x6 == 1 =>
                        {
                            None
                        }
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 0 && x2 == 3 && x4 & 4 == 4 && x6 == 0 =>
                        {
                            let Zm = (instr >> 16) & 31;
                            let msz = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, _, _, x6, _) if x1 == 0 && x2 == 3 && x6 == 1 => None,
                        (_, x1, x2, _, x4, _, x6, _)
                            if x1 == 0 && x2 & 1 == 1 && x4 & 4 == 0 && x6 == 0 =>
                        {
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let msz = (instr >> 13) & 3;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPBzDX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPBzDX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPBzDX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPBzDX32Scaled {
                                    xs: xs as _,
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 != 0 && x2 == 3 && x4 & 4 == 4 => {
                            let opc = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (opc, U, ff) {
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SwZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SwZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1DZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1DZPBzD64Scaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, x1, x2, _, x4, _, _, _) if x1 != 0 && x2 & 1 == 1 && x4 & 4 == 0 => {
                            let opc = (instr >> 23) & 3;
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (opc, U, ff) {
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SwZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SwZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1DZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1DZPBzDX32Scaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 == 0 && x4 & 6 == 4 => None,
                        (_, _, x2, _, x4, _, _, _) if x2 == 0 && x4 == 6 => None,
                        (_, _, x2, _, x4, _, x6, _) if x2 == 0 && x4 == 7 && x6 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let prfop = instr & 15;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::PrfbIPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::PrfhIPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::PrfwIPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::PrfdIPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    prfop: prfop as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, x6, _) if x2 == 0 && x4 == 7 && x6 == 1 => None,
                        (_, _, x2, _, x4, _, _, _) if x2 == 1 && x4 & 4 == 4 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, U, ff) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SbZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SbZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1BZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1BZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SwZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SwZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1DZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1DZPAiD {
                                        imm5: imm5 as _,
                                        Pg: Pg as _,
                                        Zn: Zn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 == 2 && x4 & 4 == 4 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, U, ff) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SbZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SbZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1BZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1BZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SwZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SwZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1DZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1DZPBzD64Unscaled {
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 & 1 == 0 && x4 & 4 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let xs = (instr >> 22) & 1;
                            let Zm = (instr >> 16) & 31;
                            let U = (instr >> 14) & 1;
                            let ff = (instr >> 13) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, U, ff) {
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SbZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SbZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1BZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1BZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1ShZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1ShZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1HZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1HZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Ld1SwZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Ldff1SwZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1WZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1WZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, _) if x0 == 3 && x1 == 0 => None,
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Ld1DZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Ldff1DZPBzDX32Unscaled {
                                        xs: xs as _,
                                        Zm: Zm as _,
                                        Pg: Pg as _,
                                        Rn: Rn as _,
                                        Zt: Zt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, x6, _) if x0 == 7 && x6 & 40 == 0 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 22) & 7,
                        (instr >> 16) & 63,
                        (instr >> 15) & 1,
                        (instr >> 14) & 1,
                        (instr >> 13) & 1,
                        (instr >> 5) & 255,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, _, _, x4, _, _, _, _) if x1 & 4 == 0 && x4 == 0 => None,
                        (_, x1, _, _, x4, _, _, _, _) if x1 & 6 == 4 && x4 == 0 => None,
                        (_, x1, _, _, x4, _, _, x7, _) if x1 == 6 && x4 == 0 && x7 == 0 => {
                            let imm9h = (instr >> 16) & 63;
                            let imm9l = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Pt = instr & 15;
                            match () {
                                () => Some(Instr::StrPBi {
                                    imm9h: imm9h as _,
                                    imm9l: imm9l as _,
                                    Rn: Rn as _,
                                    Pt: Pt as _,
                                }),
                            }
                        }
                        (_, x1, _, _, x4, _, _, x7, _) if x1 == 6 && x4 == 0 && x7 == 1 => None,
                        (_, x1, _, _, x4, _, _, _, _) if x1 == 6 && x4 == 1 => {
                            let imm9h = (instr >> 16) & 63;
                            let imm9l = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match () {
                                () => Some(Instr::StrZBi {
                                    imm9h: imm9h as _,
                                    imm9l: imm9l as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                            }
                        }
                        (_, x1, _, _, x4, _, _, _, _) if x1 == 7 && x4 == 0 => None,
                        (_, x1, _, _, x4, _, _, _, _) if x1 != 6 && x4 == 1 => {
                            let opc = (instr >> 22) & 7;
                            let o2 = (instr >> 21) & 1;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (opc, o2) {
                                (x0, _) if x0 & 6 == 0 => Some(Instr::St1BZPBr {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, _) if x0 & 6 == 2 => Some(Instr::St1HZPBr {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, _) if x0 & 6 == 4 => Some(Instr::St1WZPBr {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 7 && x1 == 0 => None,
                                (x0, x1) if x0 == 7 && x1 == 1 => Some(Instr::St1DZPBr {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, x6, _) if x0 == 7 && x6 & 40 == 8 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 16) & 31,
                        (instr >> 15) & 1,
                        (instr >> 14) & 1,
                        (instr >> 13) & 1,
                        instr & 8191,
                    ) {
                        (_, _, x2, _, _, x5, _, _) if x2 == 0 && x5 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::Stnt1BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Stnt1HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Stnt1WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Stnt1DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, x5, _, _) if x2 != 0 && x5 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let opc = (instr >> 21) & 3;
                            let Rm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, opc) {
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::St2BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::St3BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::St4BZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::St2HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::St3HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::St4HZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::St2WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::St3WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => Some(Instr::St4WZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::St2DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::St3DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::St4DZPBrContiguous {
                                    Rm: Rm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _, _) if x5 == 0 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, x6, _) if x0 == 7 && x6 & 40 == 32 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 16) & 31,
                        (instr >> 15) & 1,
                        (instr >> 14) & 1,
                        (instr >> 13) & 1,
                        instr & 8191,
                    ) {
                        (_, _, x2, _, _, _, _, _) if x2 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let xs = (instr >> 14) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPBzDX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPBzDX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzDX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPBzDX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _, _, _) if x2 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let xs = (instr >> 14) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::St1HZPBzDX32Scaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzDX32Scaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPBzDX32Scaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _, _, _) if x2 == 2 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let xs = (instr >> 14) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPBzSX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPBzSX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzSX32Unscaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _, _, _) if x2 == 3 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let xs = (instr >> 14) & 1;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::St1HZPBzSX32Scaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzSX32Scaled {
                                    Zm: Zm as _,
                                    xs: xs as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, x6, _) if x0 == 7 && x6 & 56 == 40 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 16) & 31,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, x2, _, _, _) if x2 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPBzD64Unscaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPBzD64Unscaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzD64Unscaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPBzD64Unscaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let Zm = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::St1HZPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPBzD64Scaled {
                                    Zm: Zm as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 == 2 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPAiD {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 == 3 => {
                            let msz = (instr >> 23) & 3;
                            let imm5 = (instr >> 16) & 31;
                            let Pg = (instr >> 10) & 7;
                            let Zn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPAiS {
                                    imm5: imm5 as _,
                                    Pg: Pg as _,
                                    Zn: Zn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, _, _, x6, _) if x0 == 7 && x6 & 56 == 56 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 16) & 15,
                        (instr >> 13) & 7,
                        instr & 8191,
                    ) {
                        (_, _, x2, x3, _, _, _) if x2 == 0 && x3 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::Stnt1BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::Stnt1HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::Stnt1WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::Stnt1DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, x3, _, _, _) if x2 != 0 && x3 == 1 => {
                            let msz = (instr >> 23) & 3;
                            let opc = (instr >> 21) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match (msz, opc) {
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::St2BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::St3BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::St4BZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::St2HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::St3HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::St4HZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::St2WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::St3WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 3 => Some(Instr::St4WZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::St2DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::St3DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::St4DZPBiContiguous {
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _) if x3 == 0 => {
                            let msz = (instr >> 23) & 3;
                            let size = (instr >> 21) & 3;
                            let imm4 = (instr >> 16) & 15;
                            let Pg = (instr >> 10) & 7;
                            let Rn = (instr >> 5) & 31;
                            let Zt = instr & 31;
                            match msz {
                                x0 if x0 == 0 => Some(Instr::St1BZPBi {
                                    size: size as _,
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::St1HZPBi {
                                    size: size as _,
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::St1WZPBi {
                                    size: size as _,
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::St1DZPBi {
                                    size: size as _,
                                    imm4: imm4 as _,
                                    Pg: Pg as _,
                                    Rn: Rn as _,
                                    Zt: Zt as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _) if x1 & 30 == 6 => None,
        (_, x1, _) if x1 & 28 == 16 => {
            match (
                (instr >> 29) & 7,
                (instr >> 26) & 7,
                (instr >> 23) & 7,
                instr & 8388607,
            ) {
                (_, _, x2, _) if x2 & 6 == 0 => {
                    let op = (instr >> 31) & 1;
                    let immlo = (instr >> 29) & 3;
                    let immhi = (instr >> 5) & 524287;
                    let Rd = instr & 31;
                    match op {
                        x0 if x0 == 0 => Some(Instr::AdrOnlyPcreladdr {
                            immlo: immlo as _,
                            immhi: immhi as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::AdrpOnlyPcreladdr {
                            immlo: immlo as _,
                            immhi: immhi as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 2 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let sh = (instr >> 22) & 1;
                    let imm12 = (instr >> 10) & 4095;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Add32AddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adds32SAddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sub32AddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Subs32SAddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Add64AddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adds64SAddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sub64AddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Subs64SAddsubImm {
                                sh: sh as _,
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 3 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let o2 = (instr >> 22) & 1;
                    let uimm6 = (instr >> 16) & 63;
                    let op3 = (instr >> 14) & 3;
                    let uimm4 = (instr >> 10) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S, o2) {
                        (_, _, _, x3) if x3 == 1 => None,
                        (x0, _, _, x3) if x0 == 0 && x3 == 0 => None,
                        (x0, _, x2, x3) if x0 == 1 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Addg64AddsubImmtags {
                                uimm6: uimm6 as _,
                                op3: op3 as _,
                                uimm4: uimm4 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Subg64AddsubImmtags {
                                uimm6: uimm6 as _,
                                op3: op3 as _,
                                uimm4: uimm4 as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 4 => {
                    let sf = (instr >> 31) & 1;
                    let opc = (instr >> 29) & 3;
                    let N = (instr >> 22) & 1;
                    let immr = (instr >> 16) & 63;
                    let imms = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, opc, N) {
                        (x0, _, x2) if x0 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => Some(Instr::And32LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => Some(Instr::Orr32LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 0 => Some(Instr::Eor32LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 0 => {
                            Some(Instr::Ands32SLogImm {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _) if x0 == 1 && x1 == 0 => Some(Instr::And64LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 1 => Some(Instr::Orr64LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 2 => Some(Instr::Eor64LogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 3 => Some(Instr::Ands64SLogImm {
                            immr: immr as _,
                            imms: imms as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 5 => {
                    let sf = (instr >> 31) & 1;
                    let opc = (instr >> 29) & 3;
                    let hw = (instr >> 21) & 3;
                    let imm16 = (instr >> 5) & 65535;
                    let Rd = instr & 31;
                    match (sf, opc, hw) {
                        (_, x1, _) if x1 == 1 => None,
                        (x0, _, x2) if x0 == 0 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 & 2 == 0 => {
                            Some(Instr::Movn32Movewide {
                                imm16: imm16 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 & 2 == 0 => {
                            Some(Instr::Movz32Movewide {
                                imm16: imm16 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 & 2 == 0 => {
                            Some(Instr::Movk32Movewide {
                                imm16: imm16 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _) if x0 == 1 && x1 == 0 => Some(Instr::Movn64Movewide {
                            imm16: imm16 as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 2 => Some(Instr::Movz64Movewide {
                            imm16: imm16 as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, _) if x0 == 1 && x1 == 3 => Some(Instr::Movk64Movewide {
                            imm16: imm16 as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 6 => {
                    let sf = (instr >> 31) & 1;
                    let opc = (instr >> 29) & 3;
                    let N = (instr >> 22) & 1;
                    let immr = (instr >> 16) & 63;
                    let imms = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, opc, N) {
                        (_, x1, _) if x1 == 3 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sbfm32MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Bfm32MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 0 => {
                            Some(Instr::Ubfm32MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Sbfm64MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Bfm64MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 1 => {
                            Some(Instr::Ubfm64MBitfield {
                                immr: immr as _,
                                imms: imms as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 7 => {
                    let sf = (instr >> 31) & 1;
                    let op21 = (instr >> 29) & 3;
                    let N = (instr >> 22) & 1;
                    let o0 = (instr >> 21) & 1;
                    let Rm = (instr >> 16) & 31;
                    let imms = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op21, N, o0, imms) {
                        (_, x1, _, _, _) if x1 & 1 == 1 => None,
                        (_, x1, _, x3, _) if x1 == 0 && x3 == 1 => None,
                        (_, x1, _, _, _) if x1 & 2 == 2 => None,
                        (x0, _, _, _, x4) if x0 == 0 && x4 & 32 == 32 => None,
                        (x0, _, x2, _, _) if x0 == 0 && x2 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 & 32 == 0 =>
                        {
                            Some(Instr::Extr32Extract {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2, _, _) if x0 == 1 && x2 == 0 => None,
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Extr64Extract {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _) if x1 & 28 == 20 => {
            match (
                (instr >> 29) & 7,
                (instr >> 26) & 7,
                (instr >> 12) & 16383,
                (instr >> 5) & 127,
                instr & 31,
            ) {
                (x0, _, x2, _, _) if x0 == 2 && x2 & 8192 == 0 => {
                    let o1 = (instr >> 24) & 1;
                    let imm19 = (instr >> 5) & 524287;
                    let o0 = (instr >> 4) & 1;
                    let cond = instr & 15;
                    match (o1, o0) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::BOnlyCondbranch {
                            imm19: imm19 as _,
                            cond: cond as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => None,
                        (x0, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 & 12288 == 0 => {
                    let opc = (instr >> 21) & 7;
                    let imm16 = (instr >> 5) & 65535;
                    let op2 = (instr >> 2) & 7;
                    let LL = instr & 3;
                    match (opc, op2, LL) {
                        (_, x1, _) if x1 == 1 => None,
                        (_, x1, _) if x1 & 6 == 2 => None,
                        (_, x1, _) if x1 & 4 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::SvcExException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::HvcExException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::SmcExException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 & 1 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::BrkExException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 & 1 == 1 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::HltExException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 & 2 == 2 => None,
                        (x0, x1, _) if x0 == 4 && x1 == 0 => None,
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Dcps1DcException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Dcps2DcException { imm16: imm16 as _ })
                        }
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Dcps3DcException { imm16: imm16 as _ })
                        }
                        (x0, x1, _) if x0 == 6 && x1 == 0 => None,
                        (x0, x1, _) if x0 == 7 && x1 == 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4) if x0 == 6 && x2 == 4146 && x4 == 31 => {
                    let CRm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    match (CRm, op2) {
                        (_, _) => Some(Instr::HintHmHints),
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::NopHiHints),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::YieldHiHints),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::WfeHiHints),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::WfiHiHints),
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::SevHiHints),
                        (x0, x1) if x0 == 0 && x1 == 5 => Some(Instr::SevlHiHints),
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::DghHiHints),
                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::XpaclriHiHints),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Pacia1716HiHints),
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Pacib1716HiHints),
                        (x0, x1) if x0 == 1 && x1 == 4 => Some(Instr::Autia1716HiHints),
                        (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::Autib1716HiHints),
                        (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::EsbHiHints),
                        (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::PsbHcHints),
                        (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::TsbHcHints),
                        (x0, x1) if x0 == 2 && x1 == 4 => Some(Instr::CsdbHiHints),
                        (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::PaciazHiHints),
                        (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::PaciaspHiHints),
                        (x0, x1) if x0 == 3 && x1 == 2 => Some(Instr::PacibzHiHints),
                        (x0, x1) if x0 == 3 && x1 == 3 => Some(Instr::PacibspHiHints),
                        (x0, x1) if x0 == 3 && x1 == 4 => Some(Instr::AutiazHiHints),
                        (x0, x1) if x0 == 3 && x1 == 5 => Some(Instr::AutiaspHiHints),
                        (x0, x1) if x0 == 3 && x1 == 6 => Some(Instr::AutibzHiHints),
                        (x0, x1) if x0 == 3 && x1 == 7 => Some(Instr::AutibspHiHints),
                        (x0, x1) if x0 == 4 && x1 & 1 == 0 => Some(Instr::BtiHbHints),
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 == 4147 => {
                    let CRm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    let Rt = instr & 31;
                    match (CRm, op2, Rt) {
                        (_, x1, _) if x1 == 0 => None,
                        (_, x1, _) if x1 == 1 => None,
                        (_, x1, x2) if x1 == 2 && x2 == 31 => Some(Instr::ClrexBnBarriers),
                        (_, x1, x2) if x1 == 5 && x2 == 31 => Some(Instr::DmbBoBarriers),
                        (_, x1, x2) if x1 == 6 && x2 == 31 => Some(Instr::IsbBiBarriers),
                        (_, x1, x2) if x1 == 7 && x2 != 31 => None,
                        (_, x1, x2) if x1 == 7 && x2 == 31 => Some(Instr::SbOnlyBarriers),
                        (x0, x1, x2) if x0 & 11 != 0 && x1 == 4 && x2 == 31 => {
                            Some(Instr::DsbBoBarriers)
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 4 && x2 == 31 => {
                            Some(Instr::SsbbOnlyBarriers)
                        }
                        (x0, x1, _) if x0 == 1 && x1 == 3 => None,
                        (x0, x1, _) if x0 & 14 == 2 && x1 == 3 => None,
                        (x0, x1, _) if x0 & 12 == 4 && x1 == 3 => None,
                        (x0, x1, x2) if x0 == 4 && x1 == 4 && x2 == 31 => {
                            Some(Instr::PssbbOnlyBarriers)
                        }
                        (x0, x1, _) if x0 & 8 == 8 && x1 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 & 16271 == 4100 => {
                    let op1 = (instr >> 16) & 7;
                    let CRm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    let Rt = instr & 31;
                    match (op1, op2, Rt) {
                        (_, _, x2) if x2 != 31 => None,
                        (_, _, x2) if x2 == 31 => Some(Instr::MsrSiPstate { CRm: CRm as _ }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 31 => {
                            Some(Instr::CfinvMPstate { CRm: CRm as _ })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 31 => {
                            Some(Instr::XaflagMPstate { CRm: CRm as _ })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 31 => {
                            Some(Instr::AxflagMPstate { CRm: CRm as _ })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 & 15744 == 4224 => {
                    let L = (instr >> 21) & 1;
                    let op1 = (instr >> 16) & 7;
                    let CRn = (instr >> 12) & 15;
                    let CRm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    let Rt = instr & 31;
                    match L {
                        x0 if x0 == 0 => Some(Instr::SysCrSysteminstrs {
                            op1: op1 as _,
                            CRn: CRn as _,
                            CRm: CRm as _,
                            op2: op2 as _,
                            Rt: Rt as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::SyslRcSysteminstrs {
                            op1: op1 as _,
                            CRn: CRn as _,
                            CRm: CRm as _,
                            op2: op2 as _,
                            Rt: Rt as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 & 15616 == 4352 => {
                    let L = (instr >> 21) & 1;
                    let o0 = (instr >> 19) & 1;
                    let op1 = (instr >> 16) & 7;
                    let CRn = (instr >> 12) & 15;
                    let CRm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    let Rt = instr & 31;
                    match L {
                        x0 if x0 == 0 => Some(Instr::MsrSrSystemmove {
                            o0: o0 as _,
                            op1: op1 as _,
                            CRn: CRn as _,
                            CRm: CRm as _,
                            op2: op2 as _,
                            Rt: Rt as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::MrsRsSystemmove {
                            o0: o0 as _,
                            op1: op1 as _,
                            CRn: CRn as _,
                            CRm: CRm as _,
                            op2: op2 as _,
                            Rt: Rt as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 == 6 && x2 & 8192 == 8192 => {
                    let opc = (instr >> 21) & 15;
                    let op2 = (instr >> 16) & 31;
                    let op3 = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let op4 = instr & 31;
                    match (opc, op2, op3, Rn, op4) {
                        (_, x1, _, _, _) if x1 != 31 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 0 && x4 != 0 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 0 && x4 == 0 => {
                            Some(Instr::Br64BranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 31 && x2 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 2 && x4 != 31 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 2 && x4 == 31 => {
                            Some(Instr::Braaz64BranchReg)
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 3 && x4 != 31 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 31 && x2 == 3 && x4 == 31 => {
                            Some(Instr::Brabz64BranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 0 && x4 != 0 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 0 && x4 == 0 => {
                            Some(Instr::Blr64BranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 31 && x2 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 2 && x4 != 31 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 2 && x4 == 31 => {
                            Some(Instr::Blraaz64BranchReg)
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 3 && x4 != 31 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 31 && x2 == 3 && x4 == 31 => {
                            Some(Instr::Blrabz64BranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, x2, _, x4) if x0 == 2 && x1 == 31 && x2 == 0 && x4 != 0 => None,
                        (x0, x1, x2, _, x4) if x0 == 2 && x1 == 31 && x2 == 0 && x4 == 0 => {
                            Some(Instr::Ret64RBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 2 && x1 == 31 && x2 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 2 && x1 == 31 && x2 == 2 && x3 != 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 2 && x1 == 31 && x2 == 2 && x3 == 31 && x4 == 31 =>
                        {
                            Some(Instr::Retaa64EBranchReg)
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 2 && x1 == 31 && x2 == 3 && x3 != 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 2 && x1 == 31 && x2 == 3 && x3 == 31 && x4 == 31 =>
                        {
                            Some(Instr::Retab64EBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 2 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 2 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 2 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 2 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, _, _, _) if x0 == 3 && x1 == 31 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 0 && x3 != 31 && x4 != 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 0 && x3 != 31 && x4 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 0 && x3 == 31 && x4 != 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 0 && x3 == 31 && x4 == 0 =>
                        {
                            Some(Instr::Eret64EBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 4 && x1 == 31 && x2 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 2 && x3 != 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 2 && x3 != 31 && x4 == 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 2 && x3 == 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 2 && x3 == 31 && x4 == 31 =>
                        {
                            Some(Instr::Eretaa64EBranchReg)
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 3 && x3 != 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 3 && x3 != 31 && x4 == 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 3 && x3 == 31 && x4 != 31 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 4 && x1 == 31 && x2 == 3 && x3 == 31 && x4 == 31 =>
                        {
                            Some(Instr::Eretab64EBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 4 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 4 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 4 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 4 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, x2, _, _) if x0 == 5 && x1 == 31 && x2 != 0 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 5 && x1 == 31 && x2 == 0 && x3 != 31 && x4 != 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 5 && x1 == 31 && x2 == 0 && x3 != 31 && x4 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 5 && x1 == 31 && x2 == 0 && x3 == 31 && x4 != 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 5 && x1 == 31 && x2 == 0 && x3 == 31 && x4 == 0 =>
                        {
                            Some(Instr::Drps64EBranchReg)
                        }
                        (x0, x1, _, _, _) if x0 & 14 == 6 && x1 == 31 => None,
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 & 62 == 0 => None,
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 == 2 => {
                            Some(Instr::Braa64PBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 == 3 => {
                            Some(Instr::Brab64PBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 8 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 & 62 == 0 => None,
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 == 2 => {
                            Some(Instr::Blraa64PBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 == 3 => {
                            Some(Instr::Blrab64PBranchReg)
                        }
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 & 60 == 4 => None,
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 & 56 == 8 => None,
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 & 48 == 16 => None,
                        (x0, x1, x2, _, _) if x0 == 9 && x1 == 31 && x2 & 32 == 32 => None,
                        (x0, x1, _, _, _) if x0 & 14 == 10 && x1 == 31 => None,
                        (x0, x1, _, _, _) if x0 & 12 == 12 && x1 == 31 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, _) if x0 & 3 == 0 => {
                    let op = (instr >> 31) & 1;
                    let imm26 = instr & 67108863;
                    match op {
                        x0 if x0 == 0 => Some(Instr::BOnlyBranchImm { imm26: imm26 as _ }),
                        x0 if x0 == 1 => Some(Instr::BlOnlyBranchImm { imm26: imm26 as _ }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 & 3 == 1 && x2 & 8192 == 0 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 24) & 1;
                    let imm19 = (instr >> 5) & 524287;
                    let Rt = instr & 31;
                    match (sf, op) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Cbz32Compbranch {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Cbnz32Compbranch {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Cbz64Compbranch {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Cbnz64Compbranch {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, _) if x0 & 3 == 1 && x2 & 8192 == 8192 => {
                    let b5 = (instr >> 31) & 1;
                    let op = (instr >> 24) & 1;
                    let b40 = (instr >> 19) & 31;
                    let imm14 = (instr >> 5) & 16383;
                    let Rt = instr & 31;
                    match op {
                        x0 if x0 == 0 => Some(Instr::TbzOnlyTestbranch {
                            b5: b5 as _,
                            b40: b40 as _,
                            imm14: imm14 as _,
                            Rt: Rt as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::TbnzOnlyTestbranch {
                            b5: b5 as _,
                            b40: b40 as _,
                            imm14: imm14 as _,
                            Rt: Rt as _,
                        }),
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _) if x1 & 10 == 8 => {
            match (
                (instr >> 28) & 15,
                (instr >> 27) & 1,
                (instr >> 26) & 1,
                (instr >> 25) & 1,
                (instr >> 23) & 3,
                (instr >> 22) & 1,
                (instr >> 16) & 63,
                (instr >> 12) & 15,
                (instr >> 10) & 3,
                instr & 1023,
            ) {
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 == 0 && x6 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let L = (instr >> 22) & 1;
                    let opcode = (instr >> 12) & 15;
                    let size = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (L, opcode) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::St4AsisdlseR4 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => None,
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::St1AsisdlseR44V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => None,
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::St3AsisdlseR3 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 5 => None,
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::St1AsisdlseR33V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::St1AsisdlseR11V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 8 => Some(Instr::St2AsisdlseR2 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 9 => None,
                        (x0, x1) if x0 == 0 && x1 == 10 => Some(Instr::St1AsisdlseR22V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 11 => None,
                        (x0, x1) if x0 == 0 && x1 & 12 == 12 => None,
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ld4AsisdlseR4 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => None,
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Ld1AsisdlseR44V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 3 => None,
                        (x0, x1) if x0 == 1 && x1 == 4 => Some(Instr::Ld3AsisdlseR3 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 5 => None,
                        (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::Ld1AsisdlseR33V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 7 => Some(Instr::Ld1AsisdlseR11V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 8 => Some(Instr::Ld2AsisdlseR2 {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 9 => None,
                        (x0, x1) if x0 == 1 && x1 == 10 => Some(Instr::Ld1AsisdlseR22V {
                            Q: Q as _,
                            size: size as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 11 => None,
                        (x0, x1) if x0 == 1 && x1 & 12 == 12 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 == 1 && x6 & 32 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let L = (instr >> 22) & 1;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 15;
                    let size = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (L, Rm, opcode) {
                        (x0, _, x2) if x0 == 0 && x2 == 1 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 3 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 5 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 9 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 11 => None,
                        (x0, _, x2) if x0 == 0 && x2 & 12 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 0 => {
                            Some(Instr::St4AsisdlsepR4R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 2 => {
                            Some(Instr::St1AsisdlsepR4R4 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 4 => {
                            Some(Instr::St3AsisdlsepR3R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 6 => {
                            Some(Instr::St1AsisdlsepR3R3 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 7 => {
                            Some(Instr::St1AsisdlsepR1R1 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 8 => {
                            Some(Instr::St2AsisdlsepR2R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 31 && x2 == 10 => {
                            Some(Instr::St1AsisdlsepR2R2 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 0 => {
                            Some(Instr::St4AsisdlsepI4I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 2 => {
                            Some(Instr::St1AsisdlsepI4I4 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 4 => {
                            Some(Instr::St3AsisdlsepI3I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 6 => {
                            Some(Instr::St1AsisdlsepI3I3 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 7 => {
                            Some(Instr::St1AsisdlsepI1I1 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 8 => {
                            Some(Instr::St2AsisdlsepI2I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 31 && x2 == 10 => {
                            Some(Instr::St1AsisdlsepI2I2 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 1 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 3 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 5 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 9 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 11 => None,
                        (x0, _, x2) if x0 == 1 && x2 & 12 == 12 => None,
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 0 => {
                            Some(Instr::Ld4AsisdlsepR4R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 2 => {
                            Some(Instr::Ld1AsisdlsepR4R4 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 4 => {
                            Some(Instr::Ld3AsisdlsepR3R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 6 => {
                            Some(Instr::Ld1AsisdlsepR3R3 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 7 => {
                            Some(Instr::Ld1AsisdlsepR1R1 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 8 => {
                            Some(Instr::Ld2AsisdlsepR2R {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 31 && x2 == 10 => {
                            Some(Instr::Ld1AsisdlsepR2R2 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 0 => {
                            Some(Instr::Ld4AsisdlsepI4I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 2 => {
                            Some(Instr::Ld1AsisdlsepI4I4 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 4 => {
                            Some(Instr::Ld3AsisdlsepI3I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 6 => {
                            Some(Instr::Ld1AsisdlsepI3I3 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 7 => {
                            Some(Instr::Ld1AsisdlsepI1I1 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 8 => {
                            Some(Instr::Ld2AsisdlsepI2I {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 31 && x2 == 10 => {
                            Some(Instr::Ld1AsisdlsepI2I2 {
                                Q: Q as _,
                                size: size as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 2 == 0 && x6 & 32 == 32 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 == 2 && x6 & 31 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let L = (instr >> 22) & 1;
                    let R = (instr >> 21) & 1;
                    let opcode = (instr >> 13) & 7;
                    let S = (instr >> 12) & 1;
                    let size = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (L, R, opcode, S, size) {
                        (x0, _, x2, _, _) if x0 == 0 && x2 & 6 == 6 => None,
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::St1AsisdlsoB11B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::St3AsisdlsoB33B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 2 && x4 & 1 == 0 => {
                            Some(Instr::St1AsisdlsoH11H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 2 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 3 && x4 & 1 == 0 => {
                            Some(Instr::St3AsisdlsoH33H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 3 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 4 && x4 == 0 => {
                            Some(Instr::St1AsisdlsoS11S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 4 && x4 & 2 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 4 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::St1AsisdlsoD11D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 4 && x3 == 1 && x4 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 5 && x4 == 0 => {
                            Some(Instr::St3AsisdlsoS33S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 5 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 5 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::St3AsisdlsoD33D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 5 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 5 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::St2AsisdlsoB22B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::St4AsisdlsoB44B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 2 && x4 & 1 == 0 => {
                            Some(Instr::St2AsisdlsoH22H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 2 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 3 && x4 & 1 == 0 => {
                            Some(Instr::St4AsisdlsoH44H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 3 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 4 && x4 == 0 => {
                            Some(Instr::St2AsisdlsoS22S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 4 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 4 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::St2AsisdlsoD22D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 4 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 4 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 5 && x4 == 0 => {
                            Some(Instr::St4AsisdlsoS44S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 5 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 5 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::St4AsisdlsoD44D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 5 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 5 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Ld1AsisdlsoB11B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ld3AsisdlsoB33B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 2 && x4 & 1 == 0 => {
                            Some(Instr::Ld1AsisdlsoH11H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 2 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 3 && x4 & 1 == 0 => {
                            Some(Instr::Ld3AsisdlsoH33H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 3 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 4 && x4 == 0 => {
                            Some(Instr::Ld1AsisdlsoS11S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 4 && x4 & 2 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 4 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Ld1AsisdlsoD11D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 4 && x3 == 1 && x4 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 5 && x4 == 0 => {
                            Some(Instr::Ld3AsisdlsoS33S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 5 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 5 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Ld3AsisdlsoD33D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 5 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 5 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 6 && x3 == 0 => {
                            Some(Instr::Ld1RAsisdlsoR1 {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 6 && x3 == 1 => None,
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 7 && x3 == 0 => {
                            Some(Instr::Ld3RAsisdlsoR3 {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 7 && x3 == 1 => None,
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Ld2AsisdlsoB22B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Ld4AsisdlsoB44B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 2 && x4 & 1 == 0 => {
                            Some(Instr::Ld2AsisdlsoH22H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 2 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 3 && x4 & 1 == 0 => {
                            Some(Instr::Ld4AsisdlsoH44H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 3 && x4 & 1 == 1 => None,
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 4 && x4 == 0 => {
                            Some(Instr::Ld2AsisdlsoS22S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 4 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 4 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Ld2AsisdlsoD22D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 4 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 4 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 5 && x4 == 0 => {
                            Some(Instr::Ld4AsisdlsoS44S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 5 && x4 == 2 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 5 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Ld4AsisdlsoD44D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 5 && x3 == 0 && x4 == 3 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 5 && x3 == 1 && x4 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 6 && x3 == 0 => {
                            Some(Instr::Ld2RAsisdlsoR2 {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 6 && x3 == 1 => None,
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 7 && x3 == 0 => {
                            Some(Instr::Ld4RAsisdlsoR4 {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 7 && x3 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _, _, _) if x0 & 11 == 0 && x2 == 1 && x4 == 3 => {
                    let Q = (instr >> 30) & 1;
                    let L = (instr >> 22) & 1;
                    let R = (instr >> 21) & 1;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 13) & 7;
                    let S = (instr >> 12) & 1;
                    let size = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (L, R, Rm, opcode, S, size) {
                        (x0, _, _, x3, _, _) if x0 == 0 && x3 & 6 == 6 => None,
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 0 && x3 == 2 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 0 && x3 == 3 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 0 && x3 == 4 && x5 & 2 == 2 => {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x3 == 4 && x4 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 0 && x3 == 5 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x3 == 5 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x3 == 5 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 0 => {
                            Some(Instr::St1AsisdlsopBx1R1B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 1 => {
                            Some(Instr::St3AsisdlsopBx3R3B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St1AsisdlsopHx1R1H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St3AsisdlsopHx3R3H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::St1AsisdlsopSx1R1S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St1AsisdlsopDx1R1D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::St3AsisdlsopSx3R3S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 != 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St3AsisdlsopDx3R3D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 0 => {
                            Some(Instr::St1AsisdlsopB1I1B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 1 => {
                            Some(Instr::St3AsisdlsopB3I3B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St1AsisdlsopH1I1H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St3AsisdlsopH3I3H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::St1AsisdlsopS1I1S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St1AsisdlsopD1I1D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::St3AsisdlsopS3I3S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St3AsisdlsopD3I3D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 1 && x3 == 2 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 1 && x3 == 3 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 1 && x3 == 4 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x3 == 4 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x3 == 4 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 0 && x1 == 1 && x3 == 5 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x3 == 5 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x3 == 5 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 0 => {
                            Some(Instr::St2AsisdlsopBx2R2B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 1 => {
                            Some(Instr::St4AsisdlsopBx4R4B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St2AsisdlsopHx2R2H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St4AsisdlsopHx4R4H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::St2AsisdlsopSx2R2S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St2AsisdlsopDx2R2D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::St4AsisdlsopSx4R4S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 != 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St4AsisdlsopDx4R4D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 0 => {
                            Some(Instr::St2AsisdlsopB2I2B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 1 => {
                            Some(Instr::St4AsisdlsopB4I4B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St2AsisdlsopH2I2H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::St4AsisdlsopH4I4H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::St2AsisdlsopS2I2S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St2AsisdlsopD2I2D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::St4AsisdlsopS4I4S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::St4AsisdlsopD4I4D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 0 && x3 == 2 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 0 && x3 == 3 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 0 && x3 == 4 && x5 & 2 == 2 => {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x3 == 4 && x4 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 0 && x3 == 5 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x3 == 5 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x3 == 5 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, _) if x0 == 1 && x1 == 0 && x3 == 6 && x4 == 1 => None,
                        (x0, x1, _, x3, x4, _) if x0 == 1 && x1 == 0 && x3 == 7 && x4 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 0 => {
                            Some(Instr::Ld1AsisdlsopBx1R1B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 1 => {
                            Some(Instr::Ld3AsisdlsopBx3R3B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld1AsisdlsopHx1R1H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld3AsisdlsopHx3R3H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::Ld1AsisdlsopSx1R1S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld1AsisdlsopDx1R1D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::Ld3AsisdlsopSx3R3S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld3AsisdlsopDx3R3D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 6 && x4 == 0 =>
                        {
                            Some(Instr::Ld1RAsisdlsopRx1R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 != 31 && x3 == 7 && x4 == 0 =>
                        {
                            Some(Instr::Ld3RAsisdlsopRx3R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 0 => {
                            Some(Instr::Ld1AsisdlsopB1I1B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 1 => {
                            Some(Instr::Ld3AsisdlsopB3I3B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld1AsisdlsopH1I1H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld3AsisdlsopH3I3H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::Ld1AsisdlsopS1I1S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld1AsisdlsopD1I1D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::Ld3AsisdlsopS3I3S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld3AsisdlsopD3I3D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 6 && x4 == 0 =>
                        {
                            Some(Instr::Ld1RAsisdlsopR1I {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 31 && x3 == 7 && x4 == 0 =>
                        {
                            Some(Instr::Ld3RAsisdlsopR3I {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 1 && x3 == 2 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 1 && x3 == 3 && x5 & 1 == 1 => {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 1 && x3 == 4 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x3 == 4 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x3 == 4 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, _, x5) if x0 == 1 && x1 == 1 && x3 == 5 && x5 == 2 => None,
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x3 == 5 && x4 == 0 && x5 == 3 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x3 == 5 && x4 == 1 && x5 & 1 == 1 =>
                        {
                            None
                        }
                        (x0, x1, _, x3, x4, _) if x0 == 1 && x1 == 1 && x3 == 6 && x4 == 1 => None,
                        (x0, x1, _, x3, x4, _) if x0 == 1 && x1 == 1 && x3 == 7 && x4 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 0 => {
                            Some(Instr::Ld2AsisdlsopBx2R2B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 1 => {
                            Some(Instr::Ld4AsisdlsopBx4R4B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld2AsisdlsopHx2R2H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld4AsisdlsopHx4R4H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::Ld2AsisdlsopSx2R2S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld2AsisdlsopDx2R2D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::Ld4AsisdlsopSx4R4S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld4AsisdlsopDx4R4D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 6 && x4 == 0 =>
                        {
                            Some(Instr::Ld2RAsisdlsopRx2R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 != 31 && x3 == 7 && x4 == 0 =>
                        {
                            Some(Instr::Ld4RAsisdlsopRx4R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 0 => {
                            Some(Instr::Ld2AsisdlsopB2I2B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 1 => {
                            Some(Instr::Ld4AsisdlsopB4I4B {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 2 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld2AsisdlsopH2I2H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 3 && x5 & 1 == 0 =>
                        {
                            Some(Instr::Ld4AsisdlsopH4I4H {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 4 && x5 == 0 =>
                        {
                            Some(Instr::Ld2AsisdlsopS2I2S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 4 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld2AsisdlsopD2I2D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 5 && x5 == 0 =>
                        {
                            Some(Instr::Ld4AsisdlsopS4I4S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 5 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ld4AsisdlsopD4I4D {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 6 && x4 == 0 =>
                        {
                            Some(Instr::Ld2RAsisdlsopR2I {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 31 && x3 == 7 && x4 == 0 =>
                        {
                            Some(Instr::Ld4RAsisdlsopR4I {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 1 == 0 && x6 & 16 == 16 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 1 == 0 && x6 & 8 == 8 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 1 == 0 && x6 & 4 == 4 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 1 == 0 && x6 & 2 == 2 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 & 11 == 0 && x2 == 1 && x4 & 1 == 0 && x6 & 1 == 1 =>
                {
                    None
                }
                (x0, _, x2, _, x4, _, x6, _, _, _)
                    if x0 == 13 && x2 == 0 && x4 & 2 == 2 && x6 & 32 == 32 =>
                {
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let op2 = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (opc, imm9, op2) {
                        (x0, _, x2) if x0 == 0 && x2 == 1 => Some(Instr::Stg64SpostLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 2 => Some(Instr::Stg64SoffsetLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::Stg64SpreLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stzgm64BulkLdsttags {
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::Ldg64LoffsetLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 1 => Some(Instr::Stzg64SpostLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 2 => Some(Instr::Stzg64SoffsetLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 3 => Some(Instr::Stzg64SpreLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 2 && x2 == 1 => Some(Instr::St2G64SpostLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 2 && x2 == 2 => Some(Instr::St2G64SoffsetLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 2 && x2 == 3 => Some(Instr::St2G64SpreLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 != 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stgm64BulkLdsttags {
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, x2) if x0 == 3 && x2 == 1 => Some(Instr::Stz2G64SpostLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 3 && x2 == 2 => Some(Instr::Stz2G64SoffsetLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, _, x2) if x0 == 3 && x2 == 3 => Some(Instr::Stz2G64SpreLdsttags {
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 != 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Ldgm64BulkLdsttags {
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, _, _, _, _, _, _) if x0 & 11 == 8 && x2 == 1 => None,
                (x0, _, x2, _, x4, _, _, _, _, _) if x0 & 3 == 0 && x2 == 0 && x4 & 2 == 0 => {
                    let size = (instr >> 30) & 3;
                    let o2 = (instr >> 23) & 1;
                    let L = (instr >> 22) & 1;
                    let o1 = (instr >> 21) & 1;
                    let Rs = (instr >> 16) & 31;
                    let o0 = (instr >> 15) & 1;
                    let Rt2 = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, o2, L, o1, o0, Rt2) {
                        (_, x1, _, x3, _, x5) if x1 == 1 && x3 == 1 && x5 != 31 => None,
                        (x0, x1, _, x3, _, x5) if x0 & 2 == 0 && x1 == 0 && x3 == 1 && x5 != 31 => {
                            None
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StxrbSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlxrbSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CaspCp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasplCp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdxrbLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdaxrbLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CaspaCp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaspalCp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StllrbSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlrbSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasbC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaslbC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdlarbLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdarbLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasabC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasalbC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StxrhSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlxrhSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CaspCp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasplCp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdxrhLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdaxrhLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CaspaCp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaspalCp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StllrhSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlrhSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CashC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaslhC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdlarhLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdarhLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasahC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasalhC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StxrSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlxrSr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::StxpSp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::StlxpSp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdxrLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdaxrLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::LdxpLp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::LdaxpLp32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StllrSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlrSl32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaslC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdlarLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdarLr32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasaC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasalC32Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StxrSr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlxrSr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::StxpSp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::StlxpSp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdxrLr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdaxrLr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::LdxpLp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::LdaxpLp64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::StllrSl64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::StlrSl64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasC64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CaslC64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::LdlarLr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::LdarLr64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 31 =>
                        {
                            Some(Instr::CasaC64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 31 =>
                        {
                            Some(Instr::CasalC64Ldstexcl {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 1 && x2 == 0 && x4 & 2 == 2 && x6 & 32 == 0 && x8 == 0 =>
                {
                    let size = (instr >> 30) & 3;
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, opc) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Stlurb32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Ldapurb32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Ldapursb64LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Ldapursb32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Stlurh32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Ldapurh32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Ldapursh64LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::Ldapursh32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Stlur32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Ldapur32LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 2 => Some(Instr::Ldapursw64LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 3 => None,
                        (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::Stlur64LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 1 => Some(Instr::Ldapur64LdapstlUnscaled {
                            imm9: imm9 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 2 => None,
                        (x0, x1) if x0 == 3 && x1 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 1 && x4 & 2 == 0 => {
                    let opc = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let imm19 = (instr >> 5) & 524287;
                    let Rt = instr & 31;
                    match (opc, V) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Ldr32Loadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::LdrSLoadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Ldr64Loadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::LdrDLoadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Ldrsw64Loadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::LdrQLoadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::PrfmPLoadlit {
                            imm19: imm19 as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 2 && x4 == 0 => {
                    let opc = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let L = (instr >> 22) & 1;
                    let imm7 = (instr >> 15) & 127;
                    let Rt2 = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (opc, V, L) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stnp32LdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldnp32LdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StnpSLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdnpSLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, _) if x0 == 1 && x1 == 0 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StnpDLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdnpDLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stnp64LdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldnp64LdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StnpQLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdnpQLdstnapairOffs {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, _) if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 2 && x4 == 1 => {
                    let opc = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let L = (instr >> 22) & 1;
                    let imm7 = (instr >> 15) & 127;
                    let Rt2 = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (opc, V, L) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp32LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp32LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpSLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpSLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stgp64LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldpsw64LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpDLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpDLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp64LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp64LdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpQLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpQLdstpairPost {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, _) if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 2 && x4 == 2 => {
                    let opc = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let L = (instr >> 22) & 1;
                    let imm7 = (instr >> 15) & 127;
                    let Rt2 = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (opc, V, L) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp32LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp32LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpSLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpSLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stgp64LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldpsw64LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpDLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpDLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp64LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp64LdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpQLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpQLdstpairOff {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, _) if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 2 && x4 == 3 => {
                    let opc = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let L = (instr >> 22) & 1;
                    let imm7 = (instr >> 15) & 127;
                    let Rt2 = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (opc, V, L) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp32LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp32LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpSLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpSLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stgp64LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldpsw64LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpDLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpDLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stp64LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldp64LdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StpQLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdpQLdstpairPre {
                                imm7: imm7 as _,
                                Rt2: Rt2 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, _, _) if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 0 && x8 == 0 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc) {
                        (x0, x1, x2) if x0 & 1 == 1 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sturb32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldurb32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldursb64LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldursb32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::SturBLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdurBLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 2 => {
                            Some(Instr::SturQLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => {
                            Some(Instr::LdurQLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sturh32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldurh32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldursh64LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldursh32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::SturHLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdurHLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stur32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldur32LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldursw64LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::SturSLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdurSLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Stur64LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldur64LdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => {
                            Some(Instr::PrfumPLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                            Some(Instr::SturDLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdurDLdstUnscaled {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 0 && x8 == 1 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc) {
                        (x0, x1, x2) if x0 & 1 == 1 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strb32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrb32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsb64LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsb32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrBLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrBLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 2 => {
                            Some(Instr::StrQLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => {
                            Some(Instr::LdrQLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strh32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrh32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsh64LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsh32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrHLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrHLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr32LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsw64LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrSLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrSLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str64LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr64LdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrDLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrDLdstImmpost {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 0 && x8 == 2 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc) {
                        (_, x1, _) if x1 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sttrb32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldtrb32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldtrsb64LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldtrsb32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sttrh32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldtrh32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldtrsh64LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldtrsh32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sttr32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldtr32LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldtrsw64LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Sttr64LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldtr64LdstUnpriv {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 0 && x8 == 3 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let imm9 = (instr >> 12) & 511;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc) {
                        (x0, x1, x2) if x0 & 1 == 1 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strb32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrb32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsb64LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsb32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrBLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrBLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 2 => {
                            Some(Instr::StrQLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => {
                            Some(Instr::LdrQLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strh32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrh32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsh64LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsh32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrHLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrHLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr32LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsw64LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrSLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrSLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str64LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr64LdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrDLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrDLdstImmpre {
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 32 && x8 == 0 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let A = (instr >> 23) & 1;
                    let R = (instr >> 22) & 1;
                    let Rs = (instr >> 16) & 31;
                    let o3 = (instr >> 15) & 1;
                    let opc = (instr >> 12) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, A, R, o3, opc) {
                        (_, x1, _, _, x4, x5) if x1 == 0 && x4 == 1 && x5 == 1 => None,
                        (_, x1, _, _, x4, x5) if x1 == 0 && x4 == 1 && x5 & 6 == 2 => None,
                        (_, x1, _, _, x4, x5) if x1 == 0 && x4 == 1 && x5 == 5 => None,
                        (_, x1, _, _, x4, x5) if x1 == 0 && x4 == 1 && x5 & 6 == 6 => None,
                        (_, x1, x2, _, x4, x5) if x1 == 0 && x2 == 0 && x4 == 1 && x5 == 4 => None,
                        (_, x1, x2, x3, x4, x5)
                            if x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 4 =>
                        {
                            None
                        }
                        (_, x1, _, _, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminlb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swplb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpab32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 4 =>
                        {
                            Some(Instr::Ldaprb32LMemop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclralb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeoralb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpalb32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldseth32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swph32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminlh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swplh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpah32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 4 =>
                        {
                            Some(Instr::Ldaprh32LMemop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclralh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeoralh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpalh32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldadd32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclr32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeor32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldset32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmax32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsmin32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumax32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Ldumin32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swp32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpl32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldadda32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclra32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeora32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldseta32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxa32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsmina32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxa32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Ldumina32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpa32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 4 =>
                        {
                            Some(Instr::Ldapr32LMemop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclral32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeoral32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpal32Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldadd64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclr64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeor64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldset64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmax64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsmin64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumax64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Ldumin64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swp64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclrl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeorl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpl64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldadda64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclra64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeora64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldseta64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxa64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsmina64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxa64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Ldumina64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpa64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 4 =>
                        {
                            Some(Instr::Ldapr64LMemop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::Ldaddal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::Ldclral64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 2 =>
                        {
                            Some(Instr::Ldeoral64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 3 =>
                        {
                            Some(Instr::Ldsetal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 4 =>
                        {
                            Some(Instr::Ldsmaxal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 5 =>
                        {
                            Some(Instr::Ldsminal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 6 =>
                        {
                            Some(Instr::Ldumaxal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 7 =>
                        {
                            Some(Instr::Lduminal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::Swpal64Memop {
                                Rs: Rs as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 32 && x8 == 2 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let option = (instr >> 13) & 7;
                    let S = (instr >> 12) & 1;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc, option) {
                        (_, _, _, x3) if x3 & 2 == 0 => None,
                        (x0, x1, x2, _) if x0 & 1 == 1 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 != 3 => {
                            Some(Instr::Strb32BLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 => {
                            Some(Instr::Strb32BlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 != 3 => {
                            Some(Instr::Ldrb32BLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 => {
                            Some(Instr::Ldrb32BlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 2 && x3 != 3 => {
                            Some(Instr::Ldrsb64BLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 2 && x3 == 3 => {
                            Some(Instr::Ldrsb64BlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 != 3 => {
                            Some(Instr::Ldrsb32BLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 => {
                            Some(Instr::Ldrsb32BlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 != 3 => {
                            Some(Instr::StrBLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 3 => {
                            Some(Instr::StrBlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 != 3 => {
                            Some(Instr::LdrBLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 3 => {
                            Some(Instr::LdrBlLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 2 => {
                            Some(Instr::StrQLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 3 => {
                            Some(Instr::LdrQLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strh32LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrh32LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsh64LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsh32LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrHLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrHLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2, _) if x0 & 2 == 2 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2, _) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str32LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr32LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsw64LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 2 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrSLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 2 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrSLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str64LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr64LdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 3 && x1 == 0 && x2 == 2 => {
                            Some(Instr::PrfmPLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 3 && x1 == 1 && x2 == 0 => {
                            Some(Instr::StrDLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 3 && x1 == 1 && x2 == 1 => {
                            Some(Instr::LdrDLdstRegoff {
                                Rm: Rm as _,
                                S: S as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, x6, _, x8, _)
                    if x0 & 3 == 3 && x4 & 2 == 0 && x6 & 32 == 32 && x8 & 1 == 1 =>
                {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let M = (instr >> 23) & 1;
                    let S = (instr >> 22) & 1;
                    let imm9 = (instr >> 12) & 511;
                    let W = (instr >> 11) & 1;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, M, W) {
                        (x0, _, _, _) if x0 != 3 => None,
                        (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Ldraa64LdstPac {
                                S: S as _,
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Ldraa64WLdstPac {
                                S: S as _,
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Ldrab64LdstPac {
                                S: S as _,
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::Ldrab64WLdstPac {
                                S: S as _,
                                imm9: imm9 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, _, _) if x0 == 3 && x1 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, _, _, x4, _, _, _, _, _) if x0 & 3 == 3 && x4 & 2 == 2 => {
                    let size = (instr >> 30) & 3;
                    let V = (instr >> 26) & 1;
                    let opc = (instr >> 22) & 3;
                    let imm12 = (instr >> 10) & 4095;
                    let Rn = (instr >> 5) & 31;
                    let Rt = instr & 31;
                    match (size, V, opc) {
                        (x0, x1, x2) if x0 & 1 == 1 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strb32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrb32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsb64LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsb32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => Some(Instr::StrBLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => Some(Instr::LdrBLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 2 => Some(Instr::StrQLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => Some(Instr::LdrQLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Strh32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldrh32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsh64LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Ldrsh32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => Some(Instr::StrHLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => Some(Instr::LdrHLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 & 2 == 2 && x1 == 1 && x2 & 2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr32LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Ldrsw64LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => Some(Instr::StrSLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => Some(Instr::LdrSLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Str64LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Ldr64LdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => {
                            Some(Instr::PrfmPLdstPos {
                                imm12: imm12 as _,
                                Rn: Rn as _,
                                Rt: Rt as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => Some(Instr::StrDLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => Some(Instr::LdrDLdstPos {
                            imm12: imm12 as _,
                            Rn: Rn as _,
                            Rt: Rt as _,
                        }),
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _) if x1 & 14 == 10 => {
            match (
                (instr >> 31) & 1,
                (instr >> 30) & 1,
                (instr >> 29) & 1,
                (instr >> 28) & 1,
                (instr >> 25) & 7,
                (instr >> 21) & 15,
                (instr >> 16) & 31,
                (instr >> 10) & 63,
                instr & 1023,
            ) {
                (_, x1, _, x3, _, x5, _, _, _) if x1 == 0 && x3 == 1 && x5 == 6 => {
                    let sf = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, S, opcode) {
                        (_, _, x2) if x2 == 1 => None,
                        (_, _, x2) if x2 & 56 == 24 => None,
                        (_, _, x2) if x2 & 32 == 32 => None,
                        (_, x1, x2) if x1 == 0 && x2 & 62 == 6 => None,
                        (_, x1, x2) if x1 == 0 && x2 == 13 => None,
                        (_, x1, x2) if x1 == 0 && x2 & 62 == 14 => None,
                        (_, x1, x2) if x1 == 1 && x2 & 62 == 2 => None,
                        (_, x1, x2) if x1 == 1 && x2 & 60 == 4 => None,
                        (_, x1, x2) if x1 == 1 && x2 & 56 == 8 => None,
                        (_, x1, x2) if x1 == 1 && x2 & 48 == 16 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Udiv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Sdiv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 & 62 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 8 => {
                            Some(Instr::Lslv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 9 => {
                            Some(Instr::Lsrv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 10 => {
                            Some(Instr::Asrv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 11 => {
                            Some(Instr::Rorv32Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 & 59 == 19 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 16 => {
                            Some(Instr::Crc32B32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 17 => {
                            Some(Instr::Crc32H32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 18 => {
                            Some(Instr::Crc32W32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 20 => {
                            Some(Instr::Crc32Cb32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 21 => {
                            Some(Instr::Crc32Ch32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 22 => {
                            Some(Instr::Crc32Cw32CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Subp64SDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::Udiv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::Sdiv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 4 => {
                            Some(Instr::Irg64IDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => {
                            Some(Instr::Gmi64GDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 8 => {
                            Some(Instr::Lslv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 9 => {
                            Some(Instr::Lsrv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 10 => {
                            Some(Instr::Asrv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 11 => {
                            Some(Instr::Rorv64Dp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 12 => {
                            Some(Instr::Pacga64PDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 & 57 == 16 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 & 58 == 16 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 19 => {
                            Some(Instr::Crc32X64CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 23 => {
                            Some(Instr::Crc32Cx64CDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Subps64SDp2Src {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, x1, _, x3, _, x5, _, _, _) if x1 == 1 && x3 == 1 && x5 == 6 => {
                    let sf = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let opcode2 = (instr >> 16) & 31;
                    let opcode = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, S, opcode2, opcode, Rn) {
                        (_, _, _, x3, _) if x3 & 32 == 32 => None,
                        (_, _, x2, _, _) if x2 & 2 == 2 => None,
                        (_, _, x2, _, _) if x2 & 4 == 4 => None,
                        (_, _, x2, _, _) if x2 & 8 == 8 => None,
                        (_, _, x2, _, _) if x2 & 16 == 16 => None,
                        (_, x1, x2, x3, _) if x1 == 0 && x2 == 0 && x3 & 62 == 6 => None,
                        (_, x1, x2, x3, _) if x1 == 0 && x2 == 0 && x3 & 56 == 8 => None,
                        (_, x1, x2, x3, _) if x1 == 0 && x2 == 0 && x3 & 48 == 16 => None,
                        (_, x1, _, _, _) if x1 == 1 => None,
                        (x0, _, x2, _, _) if x0 == 0 && x2 == 1 => None,
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Rbit32Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Rev1632Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 => {
                            Some(Instr::Rev32Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 => None,
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 4 => {
                            Some(Instr::Clz32Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 5 => {
                            Some(Instr::Cls32Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Rbit64Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Rev1664Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 2 => {
                            Some(Instr::Rev3264Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 3 => {
                            Some(Instr::Rev64Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 4 => {
                            Some(Instr::Clz64Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 5 => {
                            Some(Instr::Cls64Dp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Pacia64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::Pacib64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 2 => {
                            Some(Instr::Pacda64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 3 => {
                            Some(Instr::Pacdb64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 4 => {
                            Some(Instr::Autia64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 5 => {
                            Some(Instr::Autib64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 6 => {
                            Some(Instr::Autda64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 7 => {
                            Some(Instr::Autdb64PDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 8 && x4 == 31 =>
                        {
                            Some(Instr::Paciza64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 9 && x4 == 31 =>
                        {
                            Some(Instr::Pacizb64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 10 && x4 == 31 =>
                        {
                            Some(Instr::Pacdza64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 11 && x4 == 31 =>
                        {
                            Some(Instr::Pacdzb64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 12 && x4 == 31 =>
                        {
                            Some(Instr::Autiza64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 13 && x4 == 31 =>
                        {
                            Some(Instr::Autizb64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 14 && x4 == 31 =>
                        {
                            Some(Instr::Autdza64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 15 && x4 == 31 =>
                        {
                            Some(Instr::Autdzb64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 16 && x4 == 31 =>
                        {
                            Some(Instr::Xpaci64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 17 && x4 == 31 =>
                        {
                            Some(Instr::Xpacd64ZDp1Src { Rd: Rd as _ })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 & 62 == 18 => {
                            None
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 & 60 == 20 => {
                            None
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 & 56 == 24 => {
                            None
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, _, _) if x3 == 0 && x5 & 8 == 0 => {
                    let sf = (instr >> 31) & 1;
                    let opc = (instr >> 29) & 3;
                    let shift = (instr >> 22) & 3;
                    let N = (instr >> 21) & 1;
                    let Rm = (instr >> 16) & 31;
                    let imm6 = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, opc, N, imm6) {
                        (x0, _, _, x3) if x0 == 0 && x3 & 32 == 32 => None,
                        (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::And32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Bic32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Orr32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Orn32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 0 => {
                            Some(Instr::Eor32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 1 => {
                            Some(Instr::Eon32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 3 && x2 == 0 => {
                            Some(Instr::Ands32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 0 && x1 == 3 && x2 == 1 => {
                            Some(Instr::Bics32LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::And64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Bic64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Orr64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Orn64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 0 => {
                            Some(Instr::Eor64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 1 => {
                            Some(Instr::Eon64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 3 && x2 == 0 => {
                            Some(Instr::Ands64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _) if x0 == 1 && x1 == 3 && x2 == 1 => {
                            Some(Instr::Bics64LogShift {
                                shift: shift as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, _, _) if x3 == 0 && x5 & 9 == 8 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let shift = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let imm6 = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S, shift, imm6) {
                        (_, _, _, x3, _) if x3 == 3 => None,
                        (x0, _, _, _, x4) if x0 == 0 && x4 & 32 == 32 => None,
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Add32AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adds32AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sub32AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Subs32AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Add64AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adds64AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sub64AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, _) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Subs64AddsubShift {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, _, _) if x3 == 0 && x5 & 9 == 9 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let opt = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let option = (instr >> 13) & 7;
                    let imm3 = (instr >> 10) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S, opt, imm3) {
                        (_, _, _, _, x4) if x4 & 5 == 5 => None,
                        (_, _, _, _, x4) if x4 & 6 == 6 => None,
                        (_, _, _, x3, _) if x3 & 1 == 1 => None,
                        (_, _, _, x3, _) if x3 & 2 == 2 => None,
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Add32AddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Adds32SAddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Sub32AddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Subs32SAddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Add64AddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Adds64SAddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Sub64AddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Subs64SAddsubExt {
                                Rm: Rm as _,
                                option: option as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, x7, _) if x3 == 1 && x5 == 0 && x7 == 0 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let Rm = (instr >> 16) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Adc32AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adcs32AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sbc32AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Sbcs32AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::Adc64AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => {
                            Some(Instr::Adcs64AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::Sbc64AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => {
                            Some(Instr::Sbcs64AddsubCarry {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, x7, _) if x3 == 1 && x5 == 0 && x7 & 31 == 1 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let imm6 = (instr >> 15) & 63;
                    let Rn = (instr >> 5) & 31;
                    let o2 = (instr >> 4) & 1;
                    let mask = instr & 15;
                    match (sf, op, S, o2) {
                        (x0, _, _, _) if x0 == 0 => None,
                        (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::RmifOnlyRmif {
                                imm6: imm6 as _,
                                Rn: Rn as _,
                                mask: mask as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, _, _) if x0 == 1 && x1 == 1 => None,
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, x7, _) if x3 == 1 && x5 == 0 && x7 & 15 == 2 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let opcode2 = (instr >> 15) & 63;
                    let sz = (instr >> 14) & 1;
                    let Rn = (instr >> 5) & 31;
                    let o3 = (instr >> 4) & 1;
                    let mask = instr & 15;
                    match (sf, op, S, opcode2, sz, o3, mask) {
                        (x0, x1, x2, _, _, _, _) if x0 == 0 && x1 == 0 && x2 == 0 => None,
                        (x0, x1, x2, x3, _, _, _) if x0 == 0 && x1 == 0 && x2 == 1 && x3 != 0 => {
                            None
                        }
                        (x0, x1, x2, x3, _, x5, x6)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x5 == 0 && x6 != 13 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, x5, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5, x6)
                            if x0 == 0
                                && x1 == 0
                                && x2 == 1
                                && x3 == 0
                                && x4 == 0
                                && x5 == 0
                                && x6 == 13 =>
                        {
                            Some(Instr::Setf8OnlySetf { Rn: Rn as _ })
                        }
                        (x0, x1, x2, x3, x4, x5, x6)
                            if x0 == 0
                                && x1 == 0
                                && x2 == 1
                                && x3 == 0
                                && x4 == 1
                                && x5 == 0
                                && x6 == 13 =>
                        {
                            Some(Instr::Setf16OnlySetf { Rn: Rn as _ })
                        }
                        (x0, x1, _, _, _, _, _) if x0 == 0 && x1 == 1 => None,
                        (x0, _, _, _, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, x7, _) if x3 == 1 && x5 == 2 && x7 & 2 == 0 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let Rm = (instr >> 16) & 31;
                    let cond = (instr >> 12) & 15;
                    let o2 = (instr >> 10) & 1;
                    let Rn = (instr >> 5) & 31;
                    let o3 = (instr >> 4) & 1;
                    let nzcv = instr & 15;
                    match (sf, op, S, o2, o3) {
                        (_, _, _, _, x4) if x4 == 1 => None,
                        (_, _, _, x3, _) if x3 == 1 => None,
                        (_, _, x2, _, _) if x2 == 0 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmn32CondcmpReg {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmp32CondcmpReg {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmn64CondcmpReg {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmp64CondcmpReg {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, x7, _) if x3 == 1 && x5 == 2 && x7 & 2 == 2 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let imm5 = (instr >> 16) & 31;
                    let cond = (instr >> 12) & 15;
                    let o2 = (instr >> 10) & 1;
                    let Rn = (instr >> 5) & 31;
                    let o3 = (instr >> 4) & 1;
                    let nzcv = instr & 15;
                    match (sf, op, S, o2, o3) {
                        (_, _, _, _, x4) if x4 == 1 => None,
                        (_, _, _, x3, _) if x3 == 1 => None,
                        (_, _, x2, _, _) if x2 == 0 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmn32CondcmpImm {
                                imm5: imm5 as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmp32CondcmpImm {
                                imm5: imm5 as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmn64CondcmpImm {
                                imm5: imm5 as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Ccmp64CondcmpImm {
                                imm5: imm5 as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, _, _) if x3 == 1 && x5 == 4 => {
                    let sf = (instr >> 31) & 1;
                    let op = (instr >> 30) & 1;
                    let S = (instr >> 29) & 1;
                    let Rm = (instr >> 16) & 31;
                    let cond = (instr >> 12) & 15;
                    let op2 = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op, S, op2) {
                        (_, _, _, x3) if x3 & 2 == 2 => None,
                        (_, _, x2, _) if x2 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Csel32Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Csinc32Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Csinv32Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Csneg32Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Csel64Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Csinc64Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Csinv64Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Csneg64Condsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, _, x3, _, x5, _, _, _) if x3 == 1 && x5 & 8 == 8 => {
                    let sf = (instr >> 31) & 1;
                    let op54 = (instr >> 29) & 3;
                    let op31 = (instr >> 21) & 7;
                    let Rm = (instr >> 16) & 31;
                    let o0 = (instr >> 15) & 1;
                    let Ra = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, op54, op31, o0) {
                        (_, x1, x2, x3) if x1 == 0 && x2 == 2 && x3 == 1 => None,
                        (_, x1, x2, _) if x1 == 0 && x2 == 3 => None,
                        (_, x1, x2, _) if x1 == 0 && x2 == 4 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 == 6 && x3 == 1 => None,
                        (_, x1, x2, _) if x1 == 0 && x2 == 7 => None,
                        (_, x1, _, _) if x1 == 1 => None,
                        (_, x1, _, _) if x1 & 2 == 2 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Madd32ADp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Msub32ADp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 2 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 5 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 5 && x3 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 6 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::Madd64ADp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::Msub64ADp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::Smaddl64WaDp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::Smsubl64WaDp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 0 => {
                            Some(Instr::Smulh64Dp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 5 && x3 == 0 => {
                            Some(Instr::Umaddl64WaDp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 5 && x3 == 1 => {
                            Some(Instr::Umsubl64WaDp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 6 && x3 == 0 => {
                            Some(Instr::Umulh64Dp3Src {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _) if x1 & 14 == 14 => {
            match (
                (instr >> 28) & 15,
                (instr >> 25) & 7,
                (instr >> 23) & 3,
                (instr >> 19) & 15,
                (instr >> 10) & 511,
                instr & 1023,
            ) {
                (x0, _, x2, x3, x4, _)
                    if x0 == 0 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 == 2 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 == 4 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (size, opcode) {
                        (_, x1) if x1 & 8 == 8 => None,
                        (_, x1) if x1 & 28 == 0 => None,
                        (_, x1) if x1 & 16 == 16 => None,
                        (x0, _) if x0 & 1 == 1 => None,
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::AeseBCryptoaes {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 5 => Some(Instr::AesdBCryptoaes {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::AesmcBCryptoaes {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::AesimcBCryptoaes {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _) if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 == 5 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 35 == 0 => {
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (size, opcode) {
                        (_, x1) if x1 == 7 => None,
                        (x0, _) if x0 & 1 == 1 => None,
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Sha1CQsvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Sha1PQsvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Sha1MQsvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Sha1Su0VvvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::Sha256HQqvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 5 => Some(Instr::Sha256H2QqvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::Sha256Su1VvvCryptosha3 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _) if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 == 5 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 35 == 2 => {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 == 5 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (size, opcode) {
                        (_, x1) if x1 & 4 == 4 => None,
                        (_, x1) if x1 & 8 == 8 => None,
                        (_, x1) if x1 & 16 == 16 => None,
                        (x0, _) if x0 & 1 == 1 => None,
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Sha1HSsCryptosha2 {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Sha1Su1VvCryptosha2 {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Sha256Su0VvCryptosha2 {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => None,
                        (x0, _) if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 == 6 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _) if x0 == 7 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 0 => {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 == 7 && x2 & 2 == 0 && x3 & 7 == 5 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 == 0 && x3 & 12 == 0 && x4 & 33 == 1 =>
                {
                    let op = (instr >> 29) & 1;
                    let imm5 = (instr >> 16) & 31;
                    let imm4 = (instr >> 11) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (op, imm5, imm4) {
                        (x0, _, x2) if x0 == 0 && x2 & 1 == 1 => None,
                        (x0, _, x2) if x0 == 0 && x2 & 2 == 2 => None,
                        (x0, _, x2) if x0 == 0 && x2 & 4 == 4 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 0 => Some(Instr::DupAsisdoneOnly {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 & 8 == 8 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 15 == 0 && x2 == 0 => None,
                        (x0, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 == 1 && x3 & 12 == 0 && x4 & 33 == 1 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 == 7 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 12 == 8 && x4 & 49 == 1 =>
                {
                    let U = (instr >> 29) & 1;
                    let a = (instr >> 23) & 1;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, a, opcode) {
                        (_, _, x2) if x2 == 6 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::FmulxAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 4 => {
                            Some(Instr::FcmeqAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 7 => {
                            Some(Instr::FrecpsAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 7 => {
                            Some(Instr::FrsqrtsAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 4 => {
                            Some(Instr::FcmgeAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => {
                            Some(Instr::FacgeAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 7 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 2 => {
                            Some(Instr::FabdAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 4 => {
                            Some(Instr::FcmgtAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 5 => {
                            Some(Instr::FacgtAsisdsamefp16Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 7 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 12 == 8 && x4 & 49 == 17 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 == 15 && x4 & 387 == 2 =>
                {
                    let U = (instr >> 29) & 1;
                    let a = (instr >> 23) & 1;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, a, opcode) {
                        (_, _, x2) if x2 & 24 == 0 => None,
                        (_, _, x2) if x2 & 28 == 8 => None,
                        (_, _, x2) if x2 & 24 == 16 => None,
                        (_, _, x2) if x2 & 30 == 24 => None,
                        (_, _, x2) if x2 == 30 => None,
                        (_, x1, x2) if x1 == 0 && x2 & 28 == 12 => None,
                        (_, x1, x2) if x1 == 0 && x2 == 31 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 15 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 28 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnsAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmsAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 28 => {
                            Some(Instr::FcvtasAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 29 => {
                            Some(Instr::ScvtfAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 12 => {
                            Some(Instr::FcmgtAsisdmiscfp16Fz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 13 => {
                            Some(Instr::FcmeqAsisdmiscfp16Fz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 14 => {
                            Some(Instr::FcmltAsisdmiscfp16Fz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 26 => {
                            Some(Instr::FcvtpsAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 27 => {
                            Some(Instr::FcvtzsAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 29 => {
                            Some(Instr::FrecpeAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 31 => {
                            Some(Instr::FrecpxAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnuAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmuAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 28 => {
                            Some(Instr::FcvtauAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 29 => {
                            Some(Instr::UcvtfAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 12 => {
                            Some(Instr::FcmgeAsisdmiscfp16Fz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 13 => {
                            Some(Instr::FcmleAsisdmiscfp16Fz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 14 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 26 => {
                            Some(Instr::FcvtpuAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 27 => {
                            Some(Instr::FcvtzuAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 29 => {
                            Some(Instr::FrsqrteAsisdmiscfp16R {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 31 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 32 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 33 =>
                {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, opcode) {
                        (_, x1) if x1 & 14 == 2 => None,
                        (_, x1) if x1 & 12 == 4 => None,
                        (_, x1) if x1 & 8 == 8 => None,
                        (x0, x1) if x0 == 0 && x1 == 0 => None,
                        (x0, x1) if x0 == 0 && x1 == 1 => None,
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::SqrdmlahAsisdsame2Only {
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::SqrdmlshAsisdsame2Only {
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 7 == 4 && x4 & 387 == 2 =>
                {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 & 30 == 0 => None,
                        (_, _, x2) if x2 == 2 => None,
                        (_, _, x2) if x2 & 30 == 4 => None,
                        (_, _, x2) if x2 == 6 => None,
                        (_, _, x2) if x2 == 15 => None,
                        (_, _, x2) if x2 & 30 == 16 => None,
                        (_, _, x2) if x2 == 19 => None,
                        (_, _, x2) if x2 == 21 => None,
                        (_, _, x2) if x2 == 23 => None,
                        (_, _, x2) if x2 & 30 == 24 => None,
                        (_, _, x2) if x2 == 30 => None,
                        (_, x1, x2) if x1 & 2 == 0 && x2 & 28 == 12 => None,
                        (_, x1, x2) if x1 & 2 == 0 && x2 == 31 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 22 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 28 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::SuqaddAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::SqabsAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 8 => Some(Instr::CmgtAsisdmiscZ {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 9 => Some(Instr::CmeqAsisdmiscZ {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::CmltAsisdmiscZ {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::AbsAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 18 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 20 => Some(Instr::SqxtnAsisdmiscN {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 22 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnsAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmsAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcvtasAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::ScvtfAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FcmgtAsisdmiscFz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 13 => {
                            Some(Instr::FcmeqAsisdmiscFz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 14 => {
                            Some(Instr::FcmltAsisdmiscFz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FcvtpsAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 27 => {
                            Some(Instr::FcvtzsAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FrecpeAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 31 => {
                            Some(Instr::FrecpxAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 3 => Some(Instr::UsqaddAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 7 => Some(Instr::SqnegAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 8 => Some(Instr::CmgeAsisdmiscZ {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 9 => Some(Instr::CmleAsisdmiscZ {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 11 => Some(Instr::NegAsisdmiscR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 18 => Some(Instr::SqxtunAsisdmiscN {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 20 => Some(Instr::UqxtnAsisdmiscN {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 22 => {
                            Some(Instr::FcvtxnAsisdmiscN {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnuAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmuAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcvtauAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::UcvtfAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FcmgeAsisdmiscFz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 13 => {
                            Some(Instr::FcmleAsisdmiscFz {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 14 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FcvtpuAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 27 => {
                            Some(Instr::FcvtzuAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FrsqrteAsisdmiscR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 31 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 7 == 6 && x4 & 387 == 2 =>
                {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 & 24 == 0 => None,
                        (_, _, x2) if x2 & 28 == 8 => None,
                        (_, _, x2) if x2 == 14 => None,
                        (_, _, x2) if x2 & 24 == 16 => None,
                        (_, _, x2) if x2 & 30 == 24 => None,
                        (_, _, x2) if x2 == 26 => None,
                        (_, _, x2) if x2 & 28 == 28 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 13 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 27 => Some(Instr::AddpAsisdpairOnly {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 12 => {
                            Some(Instr::FmaxnmpAsisdpairOnlyH {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 13 => {
                            Some(Instr::FaddpAsisdpairOnlyH {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 15 => {
                            Some(Instr::FmaxpAsisdpairOnlyH {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 13 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 15 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 12 => {
                            Some(Instr::FminnmpAsisdpairOnlyH {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 15 => {
                            Some(Instr::FminpAsisdpairOnlyH {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 15 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 27 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 12 => {
                            Some(Instr::FmaxnmpAsisdpairOnlySd {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 13 => {
                            Some(Instr::FaddpAsisdpairOnlySd {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 15 => {
                            Some(Instr::FmaxpAsisdpairOnlySd {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FminnmpAsisdpairOnlySd {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 15 => {
                            Some(Instr::FminpAsisdpairOnlySd {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 259 == 258 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 131 == 130 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 3 == 0 =>
                {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, opcode) {
                        (_, x1) if x1 & 12 == 0 => None,
                        (_, x1) if x1 & 12 == 4 => None,
                        (_, x1) if x1 == 8 => None,
                        (_, x1) if x1 == 10 => None,
                        (_, x1) if x1 == 12 => None,
                        (_, x1) if x1 & 14 == 14 => None,
                        (x0, x1) if x0 == 0 && x1 == 9 => Some(Instr::SqdmlalAsisddiffOnly {
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 11 => Some(Instr::SqdmlslAsisddiffOnly {
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 13 => Some(Instr::SqdmullAsisddiffOnly {
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 9 => None,
                        (x0, x1) if x0 == 1 && x1 == 11 => None,
                        (x0, x1) if x0 == 1 && x1 == 13 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 13 == 5 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 1 == 1 =>
                {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 == 0 => None,
                        (_, _, x2) if x2 & 30 == 2 => None,
                        (_, _, x2) if x2 == 4 => None,
                        (_, _, x2) if x2 & 28 == 12 => None,
                        (_, _, x2) if x2 & 30 == 18 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 27 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 1 => Some(Instr::SqaddAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 5 => Some(Instr::SqsubAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 6 => Some(Instr::CmgtAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::CmgeAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 8 => Some(Instr::SshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 9 => Some(Instr::SqshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::SrshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::SqrshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 16 => Some(Instr::AddAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 17 => Some(Instr::CmtstAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 20 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 21 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 22 => Some(Instr::SqdmulhAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 23 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 25 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 26 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FmulxAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcmeqAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 29 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 30 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 31 => {
                            Some(Instr::FrecpsAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 25 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 26 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 28 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 29 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 30 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 31 => {
                            Some(Instr::FrsqrtsAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 1 => Some(Instr::UqaddAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 5 => Some(Instr::UqsubAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 6 => Some(Instr::CmhiAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 7 => Some(Instr::CmhsAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 8 => Some(Instr::UshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 9 => Some(Instr::UqshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => Some(Instr::UrshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 11 => Some(Instr::UqrshlAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 16 => Some(Instr::SubAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 17 => Some(Instr::CmeqAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 20 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 21 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 22 => Some(Instr::SqrdmulhAsisdsameOnly {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 23 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 25 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 26 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 27 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcmgeAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::FacgeAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 30 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 31 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 25 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FabdAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 28 => {
                            Some(Instr::FcmgtAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FacgtAsisdsameOnly {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 30 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 31 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _) if x0 & 13 == 5 && x2 == 2 && x4 & 1 == 1 => {
                    let U = (instr >> 29) & 1;
                    let immh = (instr >> 19) & 15;
                    let immb = (instr >> 16) & 7;
                    let opcode = (instr >> 11) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, immh, opcode) {
                        (_, x1, x2) if x1 != 0 && x2 == 1 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 3 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 5 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 7 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 9 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 11 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 13 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 15 => None,
                        (_, x1, x2) if x1 != 0 && x2 & 28 == 20 => None,
                        (_, x1, x2) if x1 != 0 && x2 & 28 == 24 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 29 => None,
                        (_, x1, x2) if x1 != 0 && x2 == 30 => None,
                        (_, x1, _) if x1 == 0 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 0 => {
                            Some(Instr::SshrAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 2 => {
                            Some(Instr::SsraAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 4 => {
                            Some(Instr::SrshrAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 6 => {
                            Some(Instr::SrsraAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 8 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 10 => {
                            Some(Instr::ShlAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 14 => {
                            Some(Instr::SqshlAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 16 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 17 => None,
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 18 => {
                            Some(Instr::SqshrnAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 19 => {
                            Some(Instr::SqrshrnAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 28 => {
                            Some(Instr::ScvtfAsisdshfC {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 != 0 && x2 == 31 => {
                            Some(Instr::FcvtzsAsisdshfC {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 0 => {
                            Some(Instr::UshrAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 2 => {
                            Some(Instr::UsraAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 4 => {
                            Some(Instr::UrshrAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 6 => {
                            Some(Instr::UrsraAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 8 => {
                            Some(Instr::SriAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 10 => {
                            Some(Instr::SliAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 12 => {
                            Some(Instr::SqshluAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 14 => {
                            Some(Instr::UqshlAsisdshfR {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 16 => {
                            Some(Instr::SqshrunAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 17 => {
                            Some(Instr::SqrshrunAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 18 => {
                            Some(Instr::UqshrnAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 19 => {
                            Some(Instr::UqrshrnAsisdshfN {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 28 => {
                            Some(Instr::UcvtfAsisdshfC {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 != 0 && x2 == 31 => {
                            Some(Instr::FcvtzuAsisdshfC {
                                immb: immb as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _) if x0 & 13 == 5 && x2 == 3 && x4 & 1 == 1 => None,
                (x0, _, x2, _, x4, _) if x0 & 13 == 5 && x2 & 2 == 2 && x4 & 1 == 0 => {
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let L = (instr >> 21) & 1;
                    let M = (instr >> 20) & 1;
                    let Rm = (instr >> 16) & 15;
                    let opcode = (instr >> 12) & 15;
                    let H = (instr >> 11) & 1;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 == 0 => None,
                        (_, _, x2) if x2 == 2 => None,
                        (_, _, x2) if x2 == 4 => None,
                        (_, _, x2) if x2 == 6 => None,
                        (_, _, x2) if x2 == 8 => None,
                        (_, _, x2) if x2 == 10 => None,
                        (_, _, x2) if x2 == 14 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 1 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 5 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 9 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::SqdmlalAsisdelemL {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::SqdmlslAsisdelemL {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::SqdmullAsisdelemL {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 12 => Some(Instr::SqdmulhAsisdelemR {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 13 => Some(Instr::SqrdmulhAsisdelemR {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 15 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::FmlaAsisdelemRhH {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 5 => {
                            Some(Instr::FmlsAsisdelemRhH {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 9 => {
                            Some(Instr::FmulAsisdelemRhH {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 1 => {
                            Some(Instr::FmlaAsisdelemRSd {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 5 => {
                            Some(Instr::FmlsAsisdelemRSd {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 9 => {
                            Some(Instr::FmulAsisdelemRSd {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 3 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 7 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 11 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 12 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 13 => Some(Instr::SqrdmlahAsisdelemR {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 15 => Some(Instr::SqrdmlshAsisdelemR {
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 9 => {
                            Some(Instr::FmulxAsisdelemRhH {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 9 => {
                            Some(Instr::FmulxAsisdelemRSd {
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 11 == 0 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 35 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let op2 = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let len = (instr >> 13) & 3;
                    let op = (instr >> 12) & 1;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (op2, len, op) {
                        (x0, _, _) if x0 & 1 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::TblAsimdtblL11 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::TbxAsimdtblL11 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::TblAsimdtblL22 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::TbxAsimdtblL22 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 0 => {
                            Some(Instr::TblAsimdtblL33 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 1 => {
                            Some(Instr::TbxAsimdtblL33 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 0 => {
                            Some(Instr::TblAsimdtblL44 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 1 => {
                            Some(Instr::TbxAsimdtblL44 {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _) if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 11 == 0 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 35 == 2 =>
                {
                    let Q = (instr >> 30) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match opcode {
                        x0 if x0 == 0 => None,
                        x0 if x0 == 1 => Some(Instr::Uzp1AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::Trn1AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::Zip1AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 4 => None,
                        x0 if x0 == 5 => Some(Instr::Uzp2AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 6 => Some(Instr::Trn2AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 7 => Some(Instr::Zip2AsimdpermOnly {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 11 == 2 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let op2 = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let imm4 = (instr >> 11) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match op2 {
                        x0 if x0 & 1 == 1 => None,
                        x0 if x0 == 0 => Some(Instr::ExtAsimdextOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            imm4: imm4 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 == 0 && x3 & 12 == 0 && x4 & 33 == 1 =>
                {
                    let Q = (instr >> 30) & 1;
                    let op = (instr >> 29) & 1;
                    let imm5 = (instr >> 16) & 31;
                    let imm4 = (instr >> 11) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (Q, op, imm5, imm4) {
                        (_, _, x2, _) if x2 & 15 == 0 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 0 => Some(Instr::DupAsimdinsDvV {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (_, x1, _, x3) if x1 == 0 && x3 == 1 => Some(Instr::DupAsimdinsDrR {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (_, x1, _, x3) if x1 == 0 && x3 == 2 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 4 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 6 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 & 8 == 8 => None,
                        (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 3 => None,
                        (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 5 => {
                            Some(Instr::SmovAsimdinsWW {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 7 => {
                            Some(Instr::UmovAsimdinsWW {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _, _) if x0 == 0 && x1 == 1 => None,
                        (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 3 => {
                            Some(Instr::InsAsimdinsIrR {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 5 => {
                            Some(Instr::SmovAsimdinsXX {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 & 15 == 8 && x3 == 7 => {
                            Some(Instr::UmovAsimdinsXX {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, _, _) if x0 == 1 && x1 == 1 => Some(Instr::InsAsimdinsIvV {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 == 1 && x3 & 12 == 0 && x4 & 33 == 1 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 == 7 && x4 & 387 == 2 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 12 == 8 && x4 & 49 == 1 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let a = (instr >> 23) & 1;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, a, opcode) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::FmaxnmAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::FmlaAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 2 => {
                            Some(Instr::FaddAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::FmulxAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 4 => {
                            Some(Instr::FcmeqAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 6 => {
                            Some(Instr::FmaxAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 7 => {
                            Some(Instr::FrecpsAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 0 => {
                            Some(Instr::FminnmAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => {
                            Some(Instr::FmlsAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 2 => {
                            Some(Instr::FsubAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 6 => {
                            Some(Instr::FminAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 7 => {
                            Some(Instr::FrsqrtsAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => {
                            Some(Instr::FmaxnmpAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => {
                            Some(Instr::FaddpAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::FmulAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 4 => {
                            Some(Instr::FcmgeAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => {
                            Some(Instr::FacgeAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 6 => {
                            Some(Instr::FmaxpAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 7 => {
                            Some(Instr::FdivAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => {
                            Some(Instr::FminnmpAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 2 => {
                            Some(Instr::FabdAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 4 => {
                            Some(Instr::FcmgtAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 5 => {
                            Some(Instr::FacgtAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 6 => {
                            Some(Instr::FminpAsimdsamefp16Only {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 7 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 12 == 8 && x4 & 49 == 17 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 == 15 && x4 & 387 == 2 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let a = (instr >> 23) & 1;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, a, opcode) {
                        (_, _, x2) if x2 & 24 == 0 => None,
                        (_, _, x2) if x2 & 28 == 8 => None,
                        (_, _, x2) if x2 & 24 == 16 => None,
                        (_, _, x2) if x2 == 30 => None,
                        (_, x1, x2) if x1 == 0 && x2 & 28 == 12 => None,
                        (_, x1, x2) if x1 == 0 && x2 == 31 => None,
                        (_, x1, x2) if x1 == 1 && x2 == 28 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 24 => {
                            Some(Instr::FrintnAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 25 => {
                            Some(Instr::FrintmAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnsAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmsAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 28 => {
                            Some(Instr::FcvtasAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 29 => {
                            Some(Instr::ScvtfAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 12 => {
                            Some(Instr::FcmgtAsimdmiscfp16Fz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 13 => {
                            Some(Instr::FcmeqAsimdmiscfp16Fz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 14 => {
                            Some(Instr::FcmltAsimdmiscfp16Fz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 15 => {
                            Some(Instr::FabsAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 24 => {
                            Some(Instr::FrintpAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 25 => {
                            Some(Instr::FrintzAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 26 => {
                            Some(Instr::FcvtpsAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 27 => {
                            Some(Instr::FcvtzsAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 29 => {
                            Some(Instr::FrecpeAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 31 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 24 => {
                            Some(Instr::FrintaAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 25 => {
                            Some(Instr::FrintxAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnuAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmuAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 28 => {
                            Some(Instr::FcvtauAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 29 => {
                            Some(Instr::UcvtfAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 12 => {
                            Some(Instr::FcmgeAsimdmiscfp16Fz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 13 => {
                            Some(Instr::FcmleAsimdmiscfp16Fz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 14 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 15 => {
                            Some(Instr::FnegAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 25 => {
                            Some(Instr::FrintiAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 26 => {
                            Some(Instr::FcvtpuAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 27 => {
                            Some(Instr::FcvtzuAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 29 => {
                            Some(Instr::FrsqrteAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 31 => {
                            Some(Instr::FsqrtAsimdmiscfp16R {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 32 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 0 && x4 & 33 == 33 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (Q, U, size, opcode) {
                        (_, _, x2, x3) if x2 & 2 == 0 && x3 == 3 => None,
                        (_, _, x2, x3) if x2 == 3 && x3 == 3 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 0 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 1 => None,
                        (_, x1, _, x3) if x1 == 0 && x3 == 2 => Some(Instr::SdotAsimdsame2D {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (_, x1, _, x3) if x1 == 0 && x3 & 8 == 8 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 == 2 && x3 == 3 => {
                            Some(Instr::UsdotAsimdsame2D {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, _, x3) if x1 == 1 && x3 == 0 => {
                            Some(Instr::SqrdmlahAsimdsame2Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, _, x3) if x1 == 1 && x3 == 1 => {
                            Some(Instr::SqrdmlshAsimdsame2Only {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, _, x3) if x1 == 1 && x3 == 2 => Some(Instr::UdotAsimdsame2D {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (_, x1, _, x3) if x1 == 1 && x3 & 12 == 8 => {
                            Some(Instr::FcmlaAsimdsame2C {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, _, x3) if x1 == 1 && x3 & 13 == 12 => {
                            Some(Instr::FcaddAsimdsame2C {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 == 0 && x3 == 13 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 == 0 && x3 == 15 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 == 1 && x3 == 15 => {
                            Some(Instr::BfdotAsimdsame2D {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 & 2 == 2 && x3 == 13 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 == 2 && x3 == 3 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 == 2 && x3 == 15 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 == 3 && x3 == 15 => {
                            Some(Instr::BfmlalAsimdsame2F {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _, x3) if x0 == 0 && x3 & 12 == 4 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 13 => None,
                        (x0, _, x2, x3) if x0 == 1 && x2 & 2 == 0 && x3 & 12 == 4 => None,
                        (x0, _, x2, x3) if x0 == 1 && x2 & 2 == 2 && x3 & 14 == 6 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 4 => {
                            Some(Instr::SmmlaAsimdsame2G {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 5 => {
                            Some(Instr::UsmmlaAsimdsame2G {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 13 => {
                            Some(Instr::BfmmlaAsimdsame2E {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 2 && x3 == 4 => {
                            Some(Instr::UmmlaAsimdsame2G {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 2 && x3 == 5 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 7 == 4 && x4 & 387 == 2 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 & 30 == 16 => None,
                        (_, _, x2) if x2 == 21 => None,
                        (_, x1, x2) if x1 & 2 == 0 && x2 & 28 == 12 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 23 => None,
                        (_, x1, x2) if x1 & 2 == 2 && x2 == 30 => None,
                        (_, x1, x2) if x1 == 3 && x2 == 22 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 0 => Some(Instr::Rev64AsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 1 => Some(Instr::Rev16AsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 2 => Some(Instr::SaddlpAsimdmiscP {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::SuqaddAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 4 => Some(Instr::ClsAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 5 => Some(Instr::CntAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 6 => Some(Instr::SadalpAsimdmiscP {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::SqabsAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 8 => Some(Instr::CmgtAsimdmiscZ {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 9 => Some(Instr::CmeqAsimdmiscZ {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::CmltAsimdmiscZ {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::AbsAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 18 => Some(Instr::XtnAsimdmiscN {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 19 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 20 => Some(Instr::SqxtnAsimdmiscN {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 22 => {
                            Some(Instr::FcvtnAsimdmiscN {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 23 => {
                            Some(Instr::FcvtlAsimdmiscL {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 24 => {
                            Some(Instr::FrintnAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 25 => {
                            Some(Instr::FrintmAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnsAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmsAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcvtasAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::ScvtfAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 30 => {
                            Some(Instr::Frint32ZAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 31 => {
                            Some(Instr::Frint64ZAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FcmgtAsimdmiscFz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 13 => {
                            Some(Instr::FcmeqAsimdmiscFz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 14 => {
                            Some(Instr::FcmltAsimdmiscFz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 15 => {
                            Some(Instr::FabsAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 24 => {
                            Some(Instr::FrintpAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 25 => {
                            Some(Instr::FrintzAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FcvtpsAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 27 => {
                            Some(Instr::FcvtzsAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 28 => {
                            Some(Instr::UrecpeAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FrecpeAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 31 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 22 => {
                            Some(Instr::BfcvtnAsimdmisc4S {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::Rev32AsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 1 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 2 => Some(Instr::UaddlpAsimdmiscP {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 3 => Some(Instr::UsqaddAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 4 => Some(Instr::ClzAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 6 => Some(Instr::UadalpAsimdmiscP {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 7 => Some(Instr::SqnegAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 8 => Some(Instr::CmgeAsimdmiscZ {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 9 => Some(Instr::CmleAsimdmiscZ {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 11 => Some(Instr::NegAsimdmiscR {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 18 => Some(Instr::SqxtunAsimdmiscN {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 19 => Some(Instr::ShllAsimdmiscS {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 20 => Some(Instr::UqxtnAsimdmiscN {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 22 => {
                            Some(Instr::FcvtxnAsimdmiscN {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 23 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 24 => {
                            Some(Instr::FrintaAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 25 => {
                            Some(Instr::FrintxAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FcvtnuAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FcvtmuAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcvtauAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::UcvtfAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 30 => {
                            Some(Instr::Frint32XAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 31 => {
                            Some(Instr::Frint64XAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => {
                            Some(Instr::NotAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 5 => {
                            Some(Instr::RbitAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FcmgeAsimdmiscFz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 13 => {
                            Some(Instr::FcmleAsimdmiscFz {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 14 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 15 => {
                            Some(Instr::FnegAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 24 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 25 => {
                            Some(Instr::FrintiAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FcvtpuAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 27 => {
                            Some(Instr::FcvtzuAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 28 => {
                            Some(Instr::UrsqrteAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FrsqrteAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 31 => {
                            Some(Instr::FsqrtAsimdmiscR {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 22 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 7 == 6 && x4 & 387 == 2 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let opcode = (instr >> 12) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, _, x2) if x2 & 30 == 0 => None,
                        (_, _, x2) if x2 == 2 => None,
                        (_, _, x2) if x2 & 28 == 4 => None,
                        (_, _, x2) if x2 & 30 == 8 => None,
                        (_, _, x2) if x2 == 11 => None,
                        (_, _, x2) if x2 == 13 => None,
                        (_, _, x2) if x2 == 14 => None,
                        (_, _, x2) if x2 & 24 == 16 => None,
                        (_, _, x2) if x2 & 30 == 24 => None,
                        (_, _, x2) if x2 & 28 == 28 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::SaddlvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::SmaxvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 26 => Some(Instr::SminvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 27 => Some(Instr::AddvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 12 => {
                            Some(Instr::FmaxnmvAsimdallOnlyH {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 15 => {
                            Some(Instr::FmaxvAsimdallOnlyH {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 15 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 12 => {
                            Some(Instr::FminnmvAsimdallOnlyH {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 15 => {
                            Some(Instr::FminvAsimdallOnlyH {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 15 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 3 => Some(Instr::UaddlvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => Some(Instr::UmaxvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 26 => Some(Instr::UminvAsimdallOnly {
                            Q: Q as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 27 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 12 => {
                            Some(Instr::FmaxnmvAsimdallOnlySd {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 15 => {
                            Some(Instr::FmaxvAsimdallOnlySd {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 12 => {
                            Some(Instr::FminnmvAsimdallOnlySd {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 15 => {
                            Some(Instr::FminvAsimdallOnlySd {
                                Q: Q as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 259 == 258 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 131 == 130 =>
                {
                    None
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 3 == 0 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, opcode) {
                        (_, x1) if x1 == 15 => None,
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SaddlAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::SaddwAsimddiffW {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::SsublAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::SsubwAsimddiffW {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::AddhnAsimddiffN {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 5 => Some(Instr::SabalAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::SubhnAsimddiffN {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::SabdlAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 8 => Some(Instr::SmlalAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 9 => Some(Instr::SqdmlalAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 10 => Some(Instr::SmlslAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 11 => Some(Instr::SqdmlslAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 12 => Some(Instr::SmullAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 13 => Some(Instr::SqdmullAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 14 => Some(Instr::PmullAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::UaddlAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::UaddwAsimddiffW {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::UsublAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::UsubwAsimddiffW {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 4 => Some(Instr::RaddhnAsimddiffN {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 5 => Some(Instr::UabalAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::RsubhnAsimddiffN {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 7 => Some(Instr::UabdlAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 8 => Some(Instr::UmlalAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 9 => None,
                        (x0, x1) if x0 == 1 && x1 == 10 => Some(Instr::UmlslAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 11 => None,
                        (x0, x1) if x0 == 1 && x1 == 12 => Some(Instr::UmullAsimddiffL {
                            Q: Q as _,
                            size: size as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 13 => None,
                        (x0, x1) if x0 == 1 && x1 == 14 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 9 == 0 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 1 == 1 =>
                {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 11) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (x0, _, x2) if x0 == 0 && x2 == 0 => Some(Instr::ShaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 1 => Some(Instr::SqaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 2 => Some(Instr::SrhaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 4 => Some(Instr::ShsubAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 5 => Some(Instr::SqsubAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 6 => Some(Instr::CmgtAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::CmgeAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 8 => Some(Instr::SshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 9 => Some(Instr::SqshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::SrshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::SqrshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 12 => Some(Instr::SmaxAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 13 => Some(Instr::SminAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 14 => Some(Instr::SabdAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 15 => Some(Instr::SabaAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 16 => Some(Instr::AddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 17 => Some(Instr::CmtstAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 18 => Some(Instr::MlaAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 19 => Some(Instr::MulAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 20 => Some(Instr::SmaxpAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 21 => Some(Instr::SminpAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 22 => Some(Instr::SqdmulhAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 23 => Some(Instr::AddpAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 24 => {
                            Some(Instr::FmaxnmAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 25 => {
                            Some(Instr::FmlaAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FaddAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FmulxAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcmeqAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 30 => {
                            Some(Instr::FmaxAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 31 => {
                            Some(Instr::FrecpsAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::AndAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 29 => {
                            Some(Instr::FmlalAsimdsameF {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 3 => {
                            Some(Instr::BicAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 29 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 24 => {
                            Some(Instr::FminnmAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 25 => {
                            Some(Instr::FmlsAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FsubAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 27 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 28 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 30 => {
                            Some(Instr::FminAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 31 => {
                            Some(Instr::FrsqrtsAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 3 => {
                            Some(Instr::OrrAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 29 => {
                            Some(Instr::FmlslAsimdsameF {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 3 => {
                            Some(Instr::OrnAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 29 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::UhaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 1 => Some(Instr::UqaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 2 => Some(Instr::UrhaddAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 4 => Some(Instr::UhsubAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 5 => Some(Instr::UqsubAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 6 => Some(Instr::CmhiAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 7 => Some(Instr::CmhsAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 8 => Some(Instr::UshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 9 => Some(Instr::UqshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => Some(Instr::UrshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 11 => Some(Instr::UqrshlAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 12 => Some(Instr::UmaxAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 13 => Some(Instr::UminAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 14 => Some(Instr::UabdAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 15 => Some(Instr::UabaAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 16 => Some(Instr::SubAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 17 => Some(Instr::CmeqAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 18 => Some(Instr::MlsAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 19 => Some(Instr::PmulAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 20 => Some(Instr::UmaxpAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 21 => Some(Instr::UminpAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 22 => Some(Instr::SqrdmulhAsimdsameOnly {
                            Q: Q as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 23 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 24 => {
                            Some(Instr::FmaxnmpAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 26 => {
                            Some(Instr::FaddpAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 27 => {
                            Some(Instr::FmulAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 28 => {
                            Some(Instr::FcmgeAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 29 => {
                            Some(Instr::FacgeAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 30 => {
                            Some(Instr::FmaxpAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 31 => {
                            Some(Instr::FdivAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => {
                            Some(Instr::EorAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 25 => {
                            Some(Instr::Fmlal2AsimdsameF {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 3 => {
                            Some(Instr::BslAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 25 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 24 => {
                            Some(Instr::FminnmpAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 26 => {
                            Some(Instr::FabdAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 27 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 28 => {
                            Some(Instr::FcmgtAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 29 => {
                            Some(Instr::FacgtAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 30 => {
                            Some(Instr::FminpAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 31 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 3 => {
                            Some(Instr::BitAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 25 => {
                            Some(Instr::Fmlsl2AsimdsameF {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 3 => {
                            Some(Instr::BifAsimdsameOnly {
                                Q: Q as _,
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 25 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 & 9 == 0 && x2 == 2 && x3 == 0 && x4 & 1 == 1 => {
                    let Q = (instr >> 30) & 1;
                    let op = (instr >> 29) & 1;
                    let a = (instr >> 18) & 1;
                    let b = (instr >> 17) & 1;
                    let c = (instr >> 16) & 1;
                    let cmode = (instr >> 12) & 15;
                    let o2 = (instr >> 11) & 1;
                    let d = (instr >> 9) & 1;
                    let e = (instr >> 8) & 1;
                    let f = (instr >> 7) & 1;
                    let g = (instr >> 6) & 1;
                    let h = (instr >> 5) & 1;
                    let Rd = instr & 31;
                    match (Q, op, cmode, o2) {
                        (_, x1, x2, x3) if x1 == 0 && x2 & 8 == 0 && x3 == 1 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 & 9 == 0 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmLSl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 & 9 == 1 && x3 == 0 => {
                            Some(Instr::OrrAsimdimmLSl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 & 12 == 8 && x3 == 1 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 & 13 == 8 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmLHl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 & 13 == 9 && x3 == 0 => {
                            Some(Instr::OrrAsimdimmLHl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 & 14 == 12 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmMSm {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 & 14 == 12 && x3 == 1 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 == 14 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmNB {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 == 14 && x3 == 1 => None,
                        (_, x1, x2, x3) if x1 == 0 && x2 == 15 && x3 == 0 => {
                            Some(Instr::FmovAsimdimmSS {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 0 && x2 == 15 && x3 == 1 => {
                            Some(Instr::FmovAsimdimmHH {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, _, x3) if x1 == 1 && x3 == 1 => None,
                        (_, x1, x2, x3) if x1 == 1 && x2 & 9 == 0 && x3 == 0 => {
                            Some(Instr::MvniAsimdimmLSl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 & 9 == 1 && x3 == 0 => {
                            Some(Instr::BicAsimdimmLSl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 & 13 == 8 && x3 == 0 => {
                            Some(Instr::MvniAsimdimmLHl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 & 13 == 9 && x3 == 0 => {
                            Some(Instr::BicAsimdimmLHl {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (_, x1, x2, x3) if x1 == 1 && x2 & 14 == 12 && x3 == 0 => {
                            Some(Instr::MvniAsimdimmMSm {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 14 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmDDs {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 15 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 14 && x3 == 0 => {
                            Some(Instr::MoviAsimdimmD2D {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 15 && x3 == 0 => {
                            Some(Instr::FmovAsimdimmD2D {
                                a: a as _,
                                b: b as _,
                                c: c as _,
                                d: d as _,
                                e: e as _,
                                f: f as _,
                                g: g as _,
                                h: h as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 & 9 == 0 && x2 == 2 && x3 != 0 && x4 & 1 == 1 => {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let immh = (instr >> 19) & 15;
                    let immb = (instr >> 16) & 7;
                    let opcode = (instr >> 11) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, opcode) {
                        (_, x1) if x1 == 1 => None,
                        (_, x1) if x1 == 3 => None,
                        (_, x1) if x1 == 5 => None,
                        (_, x1) if x1 == 7 => None,
                        (_, x1) if x1 == 9 => None,
                        (_, x1) if x1 == 11 => None,
                        (_, x1) if x1 == 13 => None,
                        (_, x1) if x1 == 15 => None,
                        (_, x1) if x1 == 21 => None,
                        (_, x1) if x1 & 30 == 22 => None,
                        (_, x1) if x1 & 28 == 24 => None,
                        (_, x1) if x1 == 29 => None,
                        (_, x1) if x1 == 30 => None,
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::SshrAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::SsraAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::SrshrAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::SrsraAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 8 => None,
                        (x0, x1) if x0 == 0 && x1 == 10 => Some(Instr::ShlAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 12 => None,
                        (x0, x1) if x0 == 0 && x1 == 14 => Some(Instr::SqshlAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 16 => Some(Instr::ShrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 17 => Some(Instr::RshrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 18 => Some(Instr::SqshrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 19 => Some(Instr::SqrshrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 20 => Some(Instr::SshllAsimdshfL {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 28 => Some(Instr::ScvtfAsimdshfC {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 31 => Some(Instr::FcvtzsAsimdshfC {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::UshrAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::UsraAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 4 => Some(Instr::UrshrAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::UrsraAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 8 => Some(Instr::SriAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 10 => Some(Instr::SliAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 12 => Some(Instr::SqshluAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 14 => Some(Instr::UqshlAsimdshfR {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 16 => Some(Instr::SqshrunAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 17 => Some(Instr::SqrshrunAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 18 => Some(Instr::UqshrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 19 => Some(Instr::UqrshrnAsimdshfN {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 20 => Some(Instr::UshllAsimdshfL {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 28 => Some(Instr::UcvtfAsimdshfC {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 31 => Some(Instr::FcvtzuAsimdshfC {
                            Q: Q as _,
                            immh: immh as _,
                            immb: immb as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _) if x0 & 9 == 0 && x2 == 3 && x4 & 1 == 1 => None,
                (x0, _, x2, _, x4, _) if x0 & 9 == 0 && x2 & 2 == 2 && x4 & 1 == 0 => {
                    let Q = (instr >> 30) & 1;
                    let U = (instr >> 29) & 1;
                    let size = (instr >> 22) & 3;
                    let L = (instr >> 21) & 1;
                    let M = (instr >> 20) & 1;
                    let Rm = (instr >> 16) & 15;
                    let opcode = (instr >> 12) & 15;
                    let H = (instr >> 11) & 1;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (U, size, opcode) {
                        (_, x1, x2) if x1 == 1 && x2 == 9 => None,
                        (x0, _, x2) if x0 == 0 && x2 == 2 => Some(Instr::SmlalAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 3 => Some(Instr::SqdmlalAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 6 => Some(Instr::SmlslAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 7 => Some(Instr::SqdmlslAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 8 => Some(Instr::MulAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 10 => Some(Instr::SmullAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 11 => Some(Instr::SqdmullAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 12 => Some(Instr::SqdmulhAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 13 => Some(Instr::SqrdmulhAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 == 14 => Some(Instr::SdotAsimdelemD {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 0 && x2 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::FmlaAsimdelemRhH {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 5 => {
                            Some(Instr::FmlsAsimdelemRhH {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 9 => {
                            Some(Instr::FmulAsimdelemRhH {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 15 => {
                            Some(Instr::SudotAsimdelemD {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 1 && x2 == 15 => {
                            Some(Instr::BfdotAsimdelemE {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 1 => {
                            Some(Instr::FmlaAsimdelemRSd {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 5 => {
                            Some(Instr::FmlsAsimdelemRSd {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 & 2 == 2 && x2 == 9 => {
                            Some(Instr::FmulAsimdelemRSd {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 0 => {
                            Some(Instr::FmlalAsimdelemLh {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 4 => {
                            Some(Instr::FmlslAsimdelemLh {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 15 => {
                            Some(Instr::UsdotAsimdelemD {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 0 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 15 => {
                            Some(Instr::BfmlalAsimdelemF {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::MlaAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 2 => Some(Instr::UmlalAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 4 => Some(Instr::MlsAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 6 => Some(Instr::UmlslAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 10 => Some(Instr::UmullAsimdelemL {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 11 => None,
                        (x0, _, x2) if x0 == 1 && x2 == 13 => Some(Instr::SqrdmlahAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 14 => Some(Instr::UdotAsimdelemD {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 15 => Some(Instr::SqrdmlshAsimdelemR {
                            Q: Q as _,
                            L: L as _,
                            M: M as _,
                            Rm: Rm as _,
                            H: H as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 8 => None,
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 0 && x2 == 12 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 7 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 9 => {
                            Some(Instr::FmulxAsimdelemRhH {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 & 9 == 1 => {
                            Some(Instr::FcmlaAsimdelemCH {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 & 2 == 2 && x2 == 9 => {
                            Some(Instr::FmulxAsimdelemRSd {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 & 9 == 1 => {
                            Some(Instr::FcmlaAsimdelemCS {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 8 => {
                            Some(Instr::Fmlal2AsimdelemLh {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 12 => {
                            Some(Instr::Fmlsl2AsimdelemLh {
                                Q: Q as _,
                                L: L as _,
                                M: M as _,
                                Rm: Rm as _,
                                H: H as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 3 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 5 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 7 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 8 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 12 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 == 12 && x2 == 0 && x3 & 12 == 8 && x4 & 48 == 32 => {
                    let Rm = (instr >> 16) & 31;
                    let imm2 = (instr >> 12) & 3;
                    let opcode = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match opcode {
                        x0 if x0 == 0 => Some(Instr::Sm3Tt1AVvv4Crypto3Imm2 {
                            Rm: Rm as _,
                            imm2: imm2 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::Sm3Tt1BVvv4Crypto3Imm2 {
                            Rm: Rm as _,
                            imm2: imm2 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::Sm3Tt2AVvv4Crypto3Imm2 {
                            Rm: Rm as _,
                            imm2: imm2 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 3 => Some(Instr::Sm3Tt2BVvvCrypto3Imm2 {
                            Rm: Rm as _,
                            imm2: imm2 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 == 12 && x2 == 0 && x3 & 12 == 12 && x4 & 44 == 32 => {
                    let Rm = (instr >> 16) & 31;
                    let O = (instr >> 14) & 1;
                    let opcode = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (O, opcode) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Sha512HQqvCryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Sha512H2QqvCryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Sha512Su1Vvv2Cryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Rax1Vvv2Cryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Sm3Partw1Vvv4Cryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Sm3Partw2Vvv4Cryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Sm4EkeyVvv4Cryptosha5123 {
                            Rm: Rm as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _) if x0 == 12 && x2 == 0 && x4 & 32 == 0 => {
                    let Op0 = (instr >> 21) & 3;
                    let Rm = (instr >> 16) & 31;
                    let Ra = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match Op0 {
                        x0 if x0 == 0 => Some(Instr::Eor3Vvv16Crypto4 {
                            Rm: Rm as _,
                            Ra: Ra as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::BcaxVvv16Crypto4 {
                            Rm: Rm as _,
                            Ra: Ra as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 2 => Some(Instr::Sm3Ss1Vvv4Crypto4 {
                            Rm: Rm as _,
                            Ra: Ra as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, _, _) if x0 == 12 && x2 == 1 && x3 & 12 == 0 => {
                    let Rm = (instr >> 16) & 31;
                    let imm6 = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match () {
                        () => Some(Instr::XarVvv2Crypto3Imm6 {
                            Rm: Rm as _,
                            imm6: imm6 as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                    }
                }
                (x0, _, x2, x3, x4, _) if x0 == 12 && x2 == 1 && x3 == 8 && x4 & 508 == 32 => {
                    let opcode = (instr >> 10) & 3;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match opcode {
                        x0 if x0 == 0 => Some(Instr::Sha512Su0Vv2Cryptosha5122 {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::Sm4EVv4Cryptosha5122 {
                            Rn: Rn as _,
                            Rd: Rd as _,
                        }),
                        x0 if x0 & 2 == 2 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, _, _) if x0 & 9 == 8 && x2 & 2 == 2 => None,
                (x0, _, x2, x3, _, _) if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 0 => {
                    let sf = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let rmode = (instr >> 19) & 3;
                    let opcode = (instr >> 16) & 7;
                    let scale = (instr >> 10) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, S, ptype, rmode, opcode, scale) {
                        (_, _, _, _, x4, _) if x4 & 4 == 4 => None,
                        (_, _, _, x3, x4, _) if x3 & 1 == 0 && x4 & 6 == 0 => None,
                        (_, _, _, x3, x4, _) if x3 & 1 == 1 && x4 & 6 == 2 => None,
                        (_, _, _, x3, x4, _) if x3 & 2 == 0 && x4 & 6 == 0 => None,
                        (_, _, _, x3, x4, _) if x3 & 2 == 2 && x4 & 6 == 2 => None,
                        (_, _, x2, _, _, _) if x2 == 2 => None,
                        (_, x1, _, _, _, _) if x1 == 1 => None,
                        (x0, _, _, _, _, x5) if x0 == 0 && x5 & 32 == 0 => None,
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfS32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfS32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32SFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32SFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfD32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfD32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32DFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32DFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfH32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfH32Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32HFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32HFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfS64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfS64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64SFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64SFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfD64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfD64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64DFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64DFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfH64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfH64Float2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64HFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64HFloat2Fix {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 63 == 0 =>
                {
                    let sf = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let rmode = (instr >> 19) & 3;
                    let opcode = (instr >> 16) & 7;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (sf, S, ptype, rmode, opcode) {
                        (_, _, _, x3, x4) if x3 & 1 == 1 && x4 & 6 == 2 => None,
                        (_, _, _, x3, x4) if x3 & 1 == 1 && x4 & 6 == 4 => None,
                        (_, _, _, x3, x4) if x3 & 2 == 2 && x4 & 6 == 2 => None,
                        (_, _, _, x3, x4) if x3 & 2 == 2 && x4 & 6 == 4 => None,
                        (_, x1, x2, _, x4) if x1 == 0 && x2 == 2 && x4 & 4 == 0 => None,
                        (_, x1, x2, _, x4) if x1 == 0 && x2 == 2 && x4 & 6 == 4 => None,
                        (_, x1, _, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 & 1 == 1 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfS32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfS32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 6 =>
                        {
                            Some(Instr::Fmov32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 7 =>
                        {
                            Some(Instr::FmovS32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 & 2 == 2 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 & 2 == 0 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfD32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfD32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 6 =>
                        {
                            Some(Instr::Fjcvtzs32DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 7 =>
                        {
                            None
                        }
                        (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 2 && x4 & 6 == 6 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfH32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfH32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 6 =>
                        {
                            Some(Instr::Fmov32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 7 =>
                        {
                            Some(Instr::FmovH32Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu32HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 0 && x4 & 6 == 6 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfS64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfS64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64SFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 & 1 == 1 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfD64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfD64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 6 =>
                        {
                            Some(Instr::Fmov64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 7 =>
                        {
                            Some(Instr::FmovD64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 & 2 == 2 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64DFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 2 && x3 & 1 == 0 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 1 && x4 == 6 =>
                        {
                            Some(Instr::Fmov64VxFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 1 && x4 == 7 =>
                        {
                            Some(Instr::FmovV64IFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 2 && x3 & 2 == 2 && x4 & 6 == 6 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtns64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtnu64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 2 =>
                        {
                            Some(Instr::ScvtfH64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 3 =>
                        {
                            Some(Instr::UcvtfH64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 4 =>
                        {
                            Some(Instr::Fcvtas64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 5 =>
                        {
                            Some(Instr::Fcvtau64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 6 =>
                        {
                            Some(Instr::Fmov64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 7 =>
                        {
                            Some(Instr::FmovH64Float2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtps64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtpu64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 2 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtms64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 2 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtmu64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 0 =>
                        {
                            Some(Instr::Fcvtzs64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 3 && x4 == 1 =>
                        {
                            Some(Instr::Fcvtzu64HFloat2Int {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 31 == 16 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let opcode = (instr >> 15) & 63;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (M, S, ptype, opcode) {
                        (_, _, _, x3) if x3 & 32 == 32 => None,
                        (_, x1, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::FmovSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::FabsSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 => {
                            Some(Instr::FnegSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 => {
                            Some(Instr::FsqrtSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 4 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 5 => {
                            Some(Instr::FcvtDsFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 6 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 7 => {
                            Some(Instr::FcvtHsFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 8 => {
                            Some(Instr::FrintnSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 9 => {
                            Some(Instr::FrintpSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 10 => {
                            Some(Instr::FrintmSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 11 => {
                            Some(Instr::FrintzSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 12 => {
                            Some(Instr::FrintaSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 13 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 14 => {
                            Some(Instr::FrintxSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 15 => {
                            Some(Instr::FrintiSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 16 => {
                            Some(Instr::Frint32ZSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 17 => {
                            Some(Instr::Frint32XSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 18 => {
                            Some(Instr::Frint64ZSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 19 => {
                            Some(Instr::Frint64XSFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 & 60 == 20 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 & 56 == 24 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::FmovDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::FabsDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 => {
                            Some(Instr::FnegDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 => {
                            Some(Instr::FsqrtDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 4 => {
                            Some(Instr::FcvtSdFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 5 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 6 => {
                            Some(Instr::BfcvtBsFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 7 => {
                            Some(Instr::FcvtHdFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 8 => {
                            Some(Instr::FrintnDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 9 => {
                            Some(Instr::FrintpDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 10 => {
                            Some(Instr::FrintmDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 11 => {
                            Some(Instr::FrintzDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 12 => {
                            Some(Instr::FrintaDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 13 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 14 => {
                            Some(Instr::FrintxDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 15 => {
                            Some(Instr::FrintiDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 16 => {
                            Some(Instr::Frint32ZDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 17 => {
                            Some(Instr::Frint32XDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 18 => {
                            Some(Instr::Frint64ZDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 19 => {
                            Some(Instr::Frint64XDFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 & 60 == 20 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 & 56 == 24 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 2 && x3 & 32 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 => {
                            Some(Instr::FmovHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 => {
                            Some(Instr::FabsHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 2 => {
                            Some(Instr::FnegHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 => {
                            Some(Instr::FsqrtHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 4 => {
                            Some(Instr::FcvtShFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 5 => {
                            Some(Instr::FcvtDhFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 & 62 == 6 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 8 => {
                            Some(Instr::FrintnHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 9 => {
                            Some(Instr::FrintpHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 10 => {
                            Some(Instr::FrintmHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 11 => {
                            Some(Instr::FrintzHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 12 => {
                            Some(Instr::FrintaHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 13 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 14 => {
                            Some(Instr::FrintxHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 15 => {
                            Some(Instr::FrintiHFloatdp1 {
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 & 48 == 16 => None,
                        (x0, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 15 == 8 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let op = (instr >> 14) & 3;
                    let Rn = (instr >> 5) & 31;
                    let opcode2 = instr & 31;
                    match (M, S, ptype, op, opcode2) {
                        (_, _, _, _, x4) if x4 & 1 == 1 => None,
                        (_, _, _, _, x4) if x4 & 2 == 2 => None,
                        (_, _, _, _, x4) if x4 & 4 == 4 => None,
                        (_, _, _, x3, _) if x3 & 1 == 1 => None,
                        (_, _, _, x3, _) if x3 & 2 == 2 => None,
                        (_, _, x2, _, _) if x2 == 2 => None,
                        (_, x1, _, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FcmpSFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 8 =>
                        {
                            Some(Instr::FcmpSzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 16 =>
                        {
                            Some(Instr::FcmpeSFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 24 =>
                        {
                            Some(Instr::FcmpeSzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FcmpDFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 8 =>
                        {
                            Some(Instr::FcmpDzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 16 =>
                        {
                            Some(Instr::FcmpeDFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 24 =>
                        {
                            Some(Instr::FcmpeDzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FcmpHFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 8 =>
                        {
                            Some(Instr::FcmpHzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 16 =>
                        {
                            Some(Instr::FcmpeHFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 24 =>
                        {
                            Some(Instr::FcmpeHzFloatcmp {
                                Rm: Rm as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, _, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 7 == 4 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let imm8 = (instr >> 13) & 255;
                    let imm5 = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (M, S, ptype, imm5) {
                        (_, _, _, x3) if x3 & 1 == 1 => None,
                        (_, _, _, x3) if x3 & 2 == 2 => None,
                        (_, _, _, x3) if x3 & 4 == 4 => None,
                        (_, _, _, x3) if x3 & 8 == 8 => None,
                        (_, _, _, x3) if x3 & 16 == 16 => None,
                        (_, _, x2, _) if x2 == 2 => None,
                        (_, x1, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::FmovSFloatimm {
                                imm8: imm8 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::FmovDFloatimm {
                                imm8: imm8 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 => {
                            Some(Instr::FmovHFloatimm {
                                imm8: imm8 as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 3 == 1 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let cond = (instr >> 12) & 15;
                    let Rn = (instr >> 5) & 31;
                    let op = (instr >> 4) & 1;
                    let nzcv = instr & 15;
                    match (M, S, ptype, op) {
                        (_, _, x2, _) if x2 == 2 => None,
                        (_, x1, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::FccmpSFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::FccmpeSFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::FccmpDFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::FccmpeDFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 => {
                            Some(Instr::FccmpHFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 => {
                            Some(Instr::FccmpeHFloatccmp {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                nzcv: nzcv as _,
                            })
                        }
                        (x0, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 3 == 2 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let opcode = (instr >> 12) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (M, S, ptype, opcode) {
                        (_, _, _, x3) if x3 & 9 == 9 => None,
                        (_, _, _, x3) if x3 & 10 == 10 => None,
                        (_, _, _, x3) if x3 & 12 == 12 => None,
                        (_, _, x2, _) if x2 == 2 => None,
                        (_, x1, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::FmulSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::FdivSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 => {
                            Some(Instr::FaddSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 => {
                            Some(Instr::FsubSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 4 => {
                            Some(Instr::FmaxSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 5 => {
                            Some(Instr::FminSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 6 => {
                            Some(Instr::FmaxnmSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 7 => {
                            Some(Instr::FminnmSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 8 => {
                            Some(Instr::FnmulSFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::FmulDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                            Some(Instr::FdivDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 => {
                            Some(Instr::FaddDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 => {
                            Some(Instr::FsubDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 4 => {
                            Some(Instr::FmaxDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 5 => {
                            Some(Instr::FminDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 6 => {
                            Some(Instr::FmaxnmDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 7 => {
                            Some(Instr::FminnmDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 8 => {
                            Some(Instr::FnmulDFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 => {
                            Some(Instr::FmulHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 => {
                            Some(Instr::FdivHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 2 => {
                            Some(Instr::FaddHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 3 => {
                            Some(Instr::FsubHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 4 => {
                            Some(Instr::FmaxHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 5 => {
                            Some(Instr::FminHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 6 => {
                            Some(Instr::FmaxnmHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 7 => {
                            Some(Instr::FminnmHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 8 => {
                            Some(Instr::FnmulHFloatdp2 {
                                Rm: Rm as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, x3, x4, _)
                    if x0 & 5 == 1 && x2 & 2 == 0 && x3 & 4 == 4 && x4 & 3 == 3 =>
                {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let Rm = (instr >> 16) & 31;
                    let cond = (instr >> 12) & 15;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (M, S, ptype) {
                        (_, _, x2) if x2 == 2 => None,
                        (_, x1, _) if x1 == 1 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 0 => {
                            Some(Instr::FcselSFloatsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 1 => {
                            Some(Instr::FcselDFloatsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 3 => {
                            Some(Instr::FcselHFloatsel {
                                Rm: Rm as _,
                                cond: cond as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, _, _) if x0 & 5 == 1 && x2 & 2 == 2 => {
                    let M = (instr >> 31) & 1;
                    let S = (instr >> 29) & 1;
                    let ptype = (instr >> 22) & 3;
                    let o1 = (instr >> 21) & 1;
                    let Rm = (instr >> 16) & 31;
                    let o0 = (instr >> 15) & 1;
                    let Ra = (instr >> 10) & 31;
                    let Rn = (instr >> 5) & 31;
                    let Rd = instr & 31;
                    match (M, S, ptype, o1, o0) {
                        (_, _, x2, _, _) if x2 == 2 => None,
                        (_, x1, _, _, _) if x1 == 1 => None,
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FmaddSFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::FmsubSFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::FnmaddSFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::FnmsubSFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FmaddDFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::FmsubDFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::FnmaddDFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::FnmsubDFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 0 =>
                        {
                            Some(Instr::FmaddHFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 1 =>
                        {
                            Some(Instr::FmsubHFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 0 =>
                        {
                            Some(Instr::FnmaddHFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, x1, x2, x3, x4)
                            if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 1 && x4 == 1 =>
                        {
                            Some(Instr::FnmsubHFloatdp3 {
                                Rm: Rm as _,
                                Ra: Ra as _,
                                Rn: Rn as _,
                                Rd: Rd as _,
                            })
                        }
                        (x0, _, _, _, _) if x0 == 1 => None,
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        _ => None,
    }
} // end of decoding A64
#[allow(unused_variables)]
#[allow(non_snake_case)]
#[allow(unreachable_patterns)]
pub fn decode_a32(instr: u32) -> Option<Instr> {
    match (
        (instr >> 28) & 15,
        (instr >> 25) & 7,
        (instr >> 5) & 1048575,
        (instr >> 4) & 1,
        instr & 15,
    ) {
        (x0, x1, _, _, _) if x0 != 15 && x1 & 6 == 0 => {
            match (
                (instr >> 28) & 15,
                (instr >> 26) & 3,
                (instr >> 25) & 1,
                (instr >> 20) & 31,
                (instr >> 8) & 4095,
                (instr >> 7) & 1,
                (instr >> 5) & 3,
                (instr >> 4) & 1,
                instr & 15,
            ) {
                (_, _, x2, _, _, x5, x6, x7, _) if x2 == 0 && x5 == 1 && x6 != 0 && x7 == 1 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 23) & 3,
                        (instr >> 22) & 1,
                        (instr >> 8) & 16383,
                        (instr >> 7) & 1,
                        (instr >> 5) & 3,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, _, _, x3, _, _, _, _, _) if x3 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let P = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let W = (instr >> 21) & 1;
                            let o1 = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let op2 = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match (P, W, o1, op2) {
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::StrhRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 2 => {
                                    Some(Instr::LdrdRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 3 => {
                                    Some(Instr::StrdRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrhRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 2 => {
                                    Some(Instr::LdrsbRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 3 => {
                                    Some(Instr::LdrshRA1Post {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::StrhtA2 {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 2 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 3 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrhtA2 {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 2 => {
                                    Some(Instr::LdrsbtA2 {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 3 => {
                                    Some(Instr::LdrshtA2 {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 0 && x3 == 1 => {
                                    Some(Instr::StrhRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 0 && x3 == 2 => {
                                    Some(Instr::LdrdRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 0 && x3 == 3 => {
                                    Some(Instr::StrdRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrhRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 1 && x3 == 2 => {
                                    Some(Instr::LdrsbRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, x2, x3) if x0 == 1 && x2 == 1 && x3 == 3 => {
                                    Some(Instr::LdrshRA1Pre {
                                        cond: cond as _,
                                        U: U as _,
                                        Rn: Rn as _,
                                        Rt: Rt as _,
                                        Rm: Rm as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, _, x3, _, _, _, _, _) if x3 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let P = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let W = (instr >> 21) & 1;
                            let o1 = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let imm4H = (instr >> 8) & 15;
                            let op2 = (instr >> 5) & 3;
                            let imm4L = instr & 15;
                            match ((P << 1) | W, o1, Rn, op2) {
                                (_, x1, x2, x3) if x1 == 0 && x2 == 15 && x3 == 2 => {
                                    Some(Instr::LdrdLA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 != 1 && x1 == 1 && x2 == 15 && x3 == 1 => {
                                    Some(Instr::LdrhLA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 != 1 && x1 == 1 && x2 == 15 && x3 == 2 => {
                                    Some(Instr::LdrsbLA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 != 1 && x1 == 1 && x2 == 15 && x3 == 3 => {
                                    Some(Instr::LdrshLA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrdIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 1 => {
                                    Some(Instr::StrhIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 3 => {
                                    Some(Instr::StrdIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 != 15 && x3 == 1 => {
                                    Some(Instr::LdrhIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrsbIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 != 15 && x3 == 3 => {
                                    Some(Instr::LdrshIA1Post {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 != 15 && x3 == 2 => {
                                    None
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 1 => {
                                    Some(Instr::StrhtA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 3 => None,
                                (x0, x1, _, x3) if x0 == 1 && x1 == 1 && x3 == 1 => {
                                    Some(Instr::LdrhtA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 1 && x3 == 2 => {
                                    Some(Instr::LdrsbtA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 1 && x3 == 3 => {
                                    Some(Instr::LdrshtA1 {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrdIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 2 && x1 == 0 && x3 == 1 => {
                                    Some(Instr::StrhIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 2 && x1 == 0 && x3 == 3 => {
                                    Some(Instr::StrdIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 != 15 && x3 == 1 => {
                                    Some(Instr::LdrhIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrsbIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 != 15 && x3 == 3 => {
                                    Some(Instr::LdrshIA1Off {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrdIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 3 && x1 == 0 && x3 == 1 => {
                                    Some(Instr::StrhIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 3 && x1 == 0 && x3 == 3 => {
                                    Some(Instr::StrdIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 != 15 && x3 == 1 => {
                                    Some(Instr::LdrhIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 != 15 && x3 == 2 => {
                                    Some(Instr::LdrsbIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 != 15 && x3 == 3 => {
                                    Some(Instr::LdrshIA1Pre {
                                        cond: cond as _,
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        Rt: Rt as _,
                                        imm4H: imm4H as _,
                                        imm4L: imm4L as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, x5, x6, x7, _)
                    if x2 == 0 && x3 & 16 == 0 && x5 == 1 && x6 == 0 && x7 == 1 =>
                {
                    let cond = (instr >> 28) & 15;
                    let opc = (instr >> 21) & 7;
                    let S = (instr >> 20) & 1;
                    let RdHi = (instr >> 16) & 15;
                    let RdLo = (instr >> 12) & 15;
                    let Rm = (instr >> 8) & 15;
                    let Rn = instr & 15;
                    match (opc, S) {
                        (x0, _) if x0 == 0 => Some(Instr::MulsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _) if x0 == 1 => Some(Instr::MlasA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::UmaalA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1) if x0 == 2 && x1 == 1 => None,
                        (x0, x1) if x0 == 3 && x1 == 0 => Some(Instr::MlsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1) if x0 == 3 && x1 == 1 => None,
                        (x0, _) if x0 == 4 => Some(Instr::UmullsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _) if x0 == 5 => Some(Instr::UmlalsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _) if x0 == 6 => Some(Instr::SmullsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _) if x0 == 7 => Some(Instr::SmlalsA1 {
                            cond: cond as _,
                            RdHi: RdHi as _,
                            RdLo: RdLo as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, x5, x6, x7, _)
                    if x2 == 0 && x3 & 16 == 16 && x5 == 1 && x6 == 0 && x7 == 1 =>
                {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 24) & 15,
                        (instr >> 23) & 1,
                        (instr >> 12) & 2047,
                        (instr >> 10) & 3,
                        (instr >> 8) & 3,
                        (instr >> 4) & 15,
                        instr & 15,
                    ) {
                        (_, _, x2, _, _, _, _, _) if x2 == 0 => None,
                        (_, _, x2, _, _, _, _, _) if x2 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let size = (instr >> 21) & 3;
                            let L = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let xRd = (instr >> 12) & 15;
                            let ex = (instr >> 9) & 1;
                            let ord = (instr >> 8) & 1;
                            let xRt = instr & 15;
                            match (size, L, ex, ord) {
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::StlA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::StlexA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::StrexA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::LdaA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::LdaexA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrexA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => None,
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::StlexdA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::StrexdA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 0 => None,
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::LdaexdA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrexdA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::StlbA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::StlexbA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::StrexbA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::LdabA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::LdaexbA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrexbA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::StlhA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::StlexhA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::StrexhA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::LdahA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 0 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::LdaexhA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::LdrexhA1 {
                                        cond: cond as _,
                                        Rn: Rn as _,
                                        xRd: xRd as _,
                                        xRt: xRt as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, x5, _, _, _) if x2 == 0 && x3 & 25 == 16 && x5 == 0 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 23) & 31,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 8) & 4095,
                        (instr >> 7) & 1,
                        (instr >> 4) & 7,
                        instr & 15,
                    ) {
                        (_, _, x2, _, _, _, x6, _) if x2 == 0 && x6 == 1 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 0 && x6 == 2 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 0 && x6 == 3 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 0 && x6 == 6 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 1 && x6 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let Rm = instr & 15;
                            match () {
                                () => Some(Instr::BxA1 {
                                    cond: cond as _,
                                    Rm: Rm as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, _, x6, _) if x2 == 1 && x6 == 2 => {
                            let cond = (instr >> 28) & 15;
                            let Rm = instr & 15;
                            match () {
                                () => Some(Instr::BxjA1 {
                                    cond: cond as _,
                                    Rm: Rm as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, _, x6, _) if x2 == 1 && x6 == 3 => {
                            let cond = (instr >> 28) & 15;
                            let Rm = instr & 15;
                            match () {
                                () => Some(Instr::BlxRA1 {
                                    cond: cond as _,
                                    Rm: Rm as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, _, x6, _) if x2 == 1 && x6 == 6 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 2 && x6 == 1 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 2 && x6 == 2 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 2 && x6 == 3 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 2 && x6 == 6 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 3 && x6 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let Rd = (instr >> 12) & 15;
                            let Rm = instr & 15;
                            match () {
                                () => Some(Instr::ClzA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, _, x6, _) if x2 == 3 && x6 == 2 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 3 && x6 == 3 => None,
                        (_, _, x2, _, _, _, x6, _) if x2 == 3 && x6 == 6 => {
                            let cond = (instr >> 28) & 15;
                            match () {
                                () => Some(Instr::EretA1 { cond: cond as _ }),
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 7 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let imm12 = (instr >> 8) & 4095;
                            let imm4 = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::HltA1 {
                                    cond: cond as _,
                                    imm12: imm12 as _,
                                    imm4: imm4 as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::BkptA1 {
                                    cond: cond as _,
                                    imm12: imm12 as _,
                                    imm4: imm4 as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::HvcA1 {
                                    cond: cond as _,
                                    imm12: imm12 as _,
                                    imm4: imm4 as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::SmcA1As {
                                    cond: cond as _,
                                    imm12: imm12 as _,
                                    imm4: imm4 as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let mask = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let B = (instr >> 9) & 1;
                            let m = (instr >> 8) & 1;
                            let Rn = instr & 15;
                            match (opc, B) {
                                (x0, x1) if x0 & 1 == 0 && x1 == 0 => Some(Instr::MrsA1As {
                                    cond: cond as _,
                                    mask: mask as _,
                                    Rd: Rd as _,
                                    m: m as _,
                                    Rn: Rn as _,
                                }),
                                (x0, x1) if x0 & 1 == 0 && x1 == 1 => Some(Instr::MrsBrA1As {
                                    cond: cond as _,
                                    mask: mask as _,
                                    Rd: Rd as _,
                                    m: m as _,
                                    Rn: Rn as _,
                                }),
                                (x0, x1) if x0 & 1 == 1 && x1 == 0 => Some(Instr::MsrRA1As {
                                    cond: cond as _,
                                    mask: mask as _,
                                    Rd: Rd as _,
                                    m: m as _,
                                    Rn: Rn as _,
                                }),
                                (x0, x1) if x0 & 1 == 1 && x1 == 1 => Some(Instr::MsrBrA1As {
                                    cond: cond as _,
                                    mask: mask as _,
                                    Rd: Rd as _,
                                    m: m as _,
                                    Rn: Rn as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 4 => {
                            let cond = (instr >> 28) & 15;
                            let sz = (instr >> 21) & 3;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let C = (instr >> 9) & 1;
                            let Rm = instr & 15;
                            match (sz, C) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Crc32BA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Crc32CbA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::Crc32HA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::Crc32ChA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::Crc32WA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::Crc32CwA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                (x0, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, _, x6, _) if x6 == 5 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::QaddA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::QsubA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::QdaddA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::QdsubA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, x5, _, x7, _)
                    if x2 == 0 && x3 & 25 == 16 && x5 == 1 && x7 == 0 =>
                {
                    let cond = (instr >> 28) & 15;
                    let opc = (instr >> 21) & 3;
                    let Rd = (instr >> 16) & 15;
                    let Ra = (instr >> 12) & 15;
                    let Rm = (instr >> 8) & 15;
                    let M = (instr >> 6) & 1;
                    let N = (instr >> 5) & 1;
                    let Rn = instr & 15;
                    match (opc, M, N) {
                        (x0, _, _) if x0 == 0 => Some(Instr::SmlattA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => Some(Instr::SmlawbA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => Some(Instr::SmulwbA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => Some(Instr::SmlawtA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => Some(Instr::SmulwtA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, _) if x0 == 2 => Some(Instr::SmlalttA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, _) if x0 == 3 => Some(Instr::SmulttA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Ra: Ra as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, _, _, x7, _) if x2 == 0 && x3 & 25 != 16 && x7 == 0 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 5) & 32767,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, _, x2, _, _, _, _, _) if x2 & 2 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 7;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let imm5 = (instr >> 7) & 31;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match (opc, S, Rn) {
                                (x0, _, _) if x0 == 0 => Some(Instr::AndsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, _, _) if x0 == 1 => Some(Instr::EorsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 != 13 => {
                                    Some(Instr::SubRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 13 => {
                                    Some(Instr::SubSpRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 != 13 => {
                                    Some(Instr::SubsRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 13 => {
                                    Some(Instr::SubsSpRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, _) if x0 == 3 => Some(Instr::RsbsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1, x2) if x0 == 4 && x1 == 0 && x2 != 13 => {
                                    Some(Instr::AddRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 0 && x2 == 13 => {
                                    Some(Instr::AddSpRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 1 && x2 != 13 => {
                                    Some(Instr::AddsRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 1 && x2 == 13 => {
                                    Some(Instr::AddsSpRA1Rrx {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm5: imm5 as _,
                                        stype: stype as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, _, _) if x0 == 5 => Some(Instr::AdcsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, _, _) if x0 == 6 => Some(Instr::SbcsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, _, _) if x0 == 7 => Some(Instr::RscsRA1Rrx {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _) if x2 == 2 && x4 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let Rn = (instr >> 16) & 15;
                            let imm5 = (instr >> 7) & 31;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::TstRA1Rrx {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::TeqRA1Rrx {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::CmpRA1Rrx {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::CmnRA1Rrx {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _, _, _) if x2 == 3 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let imm5 = (instr >> 7) & 31;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrrsRA1Rrx {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MovsRA1Rrx {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::BicsRA1Rrx {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::MvnsRA1Rrx {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, x3, _, x5, _, x7, _)
                    if x2 == 0 && x3 & 25 != 16 && x5 == 0 && x7 == 1 =>
                {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 23) & 3,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 8) & 4095,
                        (instr >> 7) & 1,
                        (instr >> 5) & 3,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, _, x2, _, _, _, _, _, _, _) if x2 & 2 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 7;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let Rs = (instr >> 8) & 15;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::AndsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::EorsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::SubsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::RsbsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 4 => Some(Instr::AddsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 5 => Some(Instr::AdcsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 6 => Some(Instr::SbcsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 7 => Some(Instr::RscsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _, _, _, _, _) if x2 == 2 && x4 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let Rn = (instr >> 16) & 15;
                            let Rs = (instr >> 8) & 15;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::TstRrA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::TeqRrA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::CmpRrA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::CmnRrA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _, _, _, _, _) if x2 == 3 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let Rs = (instr >> 8) & 15;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrrsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MovsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::BicsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::MvnsRrA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    Rs: Rs as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _, _, _, _, _, _) if x2 == 1 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 23) & 3,
                        (instr >> 22) & 1,
                        (instr >> 20) & 3,
                        instr & 1048575,
                    ) {
                        (_, _, x2, _, _, _) if x2 & 2 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 7;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let imm12 = instr & 4095;
                            match (opc, S, Rn) {
                                (x0, _, _) if x0 == 0 => Some(Instr::AndsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, _, _) if x0 == 1 => Some(Instr::EorsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 & 13 != 13 => {
                                    Some(Instr::SubIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 13 => {
                                    Some(Instr::SubSpIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 15 => {
                                    Some(Instr::AdrA1A {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 != 13 => {
                                    Some(Instr::SubsIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 13 => {
                                    Some(Instr::SubsSpIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, _, _) if x0 == 3 => Some(Instr::RsbsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, x1, x2) if x0 == 4 && x1 == 0 && x2 & 13 != 13 => {
                                    Some(Instr::AddIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 0 && x2 == 13 => {
                                    Some(Instr::AddSpIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 0 && x2 == 15 => {
                                    Some(Instr::AdrA1A {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 1 && x2 != 13 => {
                                    Some(Instr::AddsIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 4 && x1 == 1 && x2 == 13 => {
                                    Some(Instr::AddsSpIA1 {
                                        cond: cond as _,
                                        Rd: Rd as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, _, _) if x0 == 5 => Some(Instr::AdcsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, _, _) if x0 == 6 => Some(Instr::SbcsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, _, _) if x0 == 7 => Some(Instr::RscsIA1 {
                                    cond: cond as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _) if x2 == 2 && x4 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let H = (instr >> 22) & 1;
                            let imm4 = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let imm12 = instr & 4095;
                            match H {
                                x0 if x0 == 0 => Some(Instr::MovIA2 {
                                    cond: cond as _,
                                    imm4: imm4 as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MovtA1 {
                                    cond: cond as _,
                                    imm4: imm4 as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _) if x2 == 2 && x4 == 2 => {
                            let cond = (instr >> 28) & 15;
                            let R = (instr >> 22) & 1;
                            let imm4 = (instr >> 16) & 15;
                            let imm12 = instr & 4095;
                            match ((R << 4) | imm4, imm12) {
                                (x0, _) if x0 != 0 => Some(Instr::MsrIA1As {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 0 => Some(Instr::NopA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 1 => Some(Instr::YieldA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 2 => Some(Instr::WfeA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 3 => Some(Instr::WfiA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 4 => Some(Instr::SevA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 5 => Some(Instr::SevlA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 254 == 6 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 248 == 8 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 255 == 16 => Some(Instr::EsbA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 17 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 255 == 18 => Some(Instr::TsbA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 19 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 255 == 20 => Some(Instr::CsdbA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 255 == 21 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 248 == 24 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 254 == 30 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 224 == 32 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 192 == 64 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 192 == 128 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 224 == 192 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 240 == 224 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 & 240 == 240 => Some(Instr::DbgA1 {
                                    cond: cond as _,
                                    R: R as _,
                                    imm4: imm4 as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _) if x2 == 2 && x4 & 1 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let Rn = (instr >> 16) & 15;
                            let imm12 = instr & 4095;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::TstIA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::TeqIA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::CmpIA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::CmnIA1 {
                                    cond: cond as _,
                                    Rn: Rn as _,
                                    imm12: imm12 as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 == 3 => {
                            let cond = (instr >> 28) & 15;
                            let opc = (instr >> 21) & 3;
                            let S = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Rd = (instr >> 12) & 15;
                            let imm12 = instr & 4095;
                            match opc {
                                x0 if x0 == 0 => Some(Instr::OrrsIA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::MovsIA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::BicsIA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::MvnsIA1 {
                                    cond: cond as _,
                                    S: S as _,
                                    Rn: Rn as _,
                                    Rd: Rd as _,
                                    imm12: imm12 as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (x0, x1, _, _, _) if x0 != 15 && x1 == 2 => {
            let cond = (instr >> 28) & 15;
            let P = (instr >> 24) & 1;
            let U = (instr >> 23) & 1;
            let o2 = (instr >> 22) & 1;
            let W = (instr >> 21) & 1;
            let o1 = (instr >> 20) & 1;
            let Rn = (instr >> 16) & 15;
            let Rt = (instr >> 12) & 15;
            let imm12 = instr & 4095;
            match ((P << 1) | W, o2, o1, Rn) {
                (x0, x1, x2, x3) if x0 != 1 && x1 == 0 && x2 == 1 && x3 == 15 => {
                    Some(Instr::LdrLA1 {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, x3) if x0 != 1 && x1 == 1 && x2 == 1 && x3 == 15 => {
                    Some(Instr::LdrbLA1 {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 0 => Some(Instr::StrIA1Post {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrIA1Post {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 0 => Some(Instr::StrbIA1Post {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrbIA1Post {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => Some(Instr::StrtA1 {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 1 => Some(Instr::LdrtA1 {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 0 => Some(Instr::StrbtA1 {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 1 => Some(Instr::LdrbtA1 {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, _) if x0 == 2 && x1 == 0 && x2 == 0 => Some(Instr::StrIA1Off {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 2 && x1 == 0 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrIA1Off {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 2 && x1 == 1 && x2 == 0 => Some(Instr::StrbIA1Off {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 2 && x1 == 1 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrbIA1Off {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 3 && x1 == 0 && x2 == 0 => Some(Instr::StrIA1Pre {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 3 && x1 == 0 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrIA1Pre {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                (x0, x1, x2, _) if x0 == 3 && x1 == 1 && x2 == 0 => Some(Instr::StrbIA1Pre {
                    cond: cond as _,
                    P: P as _,
                    U: U as _,
                    W: W as _,
                    Rt: Rt as _,
                    imm12: imm12 as _,
                }),
                (x0, x1, x2, x3) if x0 == 3 && x1 == 1 && x2 == 1 && x3 != 15 => {
                    Some(Instr::LdrbIA1Pre {
                        cond: cond as _,
                        P: P as _,
                        U: U as _,
                        W: W as _,
                        Rt: Rt as _,
                        imm12: imm12 as _,
                    })
                }
                _ => None,
            }
        }
        (x0, x1, _, x3, _) if x0 != 15 && x1 == 3 && x3 == 0 => {
            let cond = (instr >> 28) & 15;
            let P = (instr >> 24) & 1;
            let U = (instr >> 23) & 1;
            let o2 = (instr >> 22) & 1;
            let W = (instr >> 21) & 1;
            let o1 = (instr >> 20) & 1;
            let Rn = (instr >> 16) & 15;
            let Rt = (instr >> 12) & 15;
            let imm5 = (instr >> 7) & 31;
            let stype = (instr >> 5) & 3;
            let Rm = instr & 15;
            match (P, o2, W, o1) {
                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                    Some(Instr::StrRA1Post {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                    Some(Instr::LdrRA1Post {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                    Some(Instr::StrtA2 {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 => {
                    Some(Instr::LdrtA2 {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                    Some(Instr::StrbRA1Post {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                    Some(Instr::LdrbRA1Post {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                    Some(Instr::StrbtA2 {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => {
                    Some(Instr::LdrbtA2 {
                        cond: cond as _,
                        U: U as _,
                        Rn: Rn as _,
                        Rt: Rt as _,
                        imm5: imm5 as _,
                        stype: stype as _,
                        Rm: Rm as _,
                    })
                }
                (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 0 => Some(Instr::StrRA1Pre {
                    cond: cond as _,
                    U: U as _,
                    Rn: Rn as _,
                    Rt: Rt as _,
                    imm5: imm5 as _,
                    stype: stype as _,
                    Rm: Rm as _,
                }),
                (x0, x1, _, x3) if x0 == 1 && x1 == 0 && x3 == 1 => Some(Instr::LdrRA1Pre {
                    cond: cond as _,
                    U: U as _,
                    Rn: Rn as _,
                    Rt: Rt as _,
                    imm5: imm5 as _,
                    stype: stype as _,
                    Rm: Rm as _,
                }),
                (x0, x1, _, x3) if x0 == 1 && x1 == 1 && x3 == 0 => Some(Instr::StrbRA1Pre {
                    cond: cond as _,
                    U: U as _,
                    Rn: Rn as _,
                    Rt: Rt as _,
                    imm5: imm5 as _,
                    stype: stype as _,
                    Rm: Rm as _,
                }),
                (x0, x1, _, x3) if x0 == 1 && x1 == 1 && x3 == 1 => Some(Instr::LdrbRA1Pre {
                    cond: cond as _,
                    U: U as _,
                    Rn: Rn as _,
                    Rt: Rt as _,
                    imm5: imm5 as _,
                    stype: stype as _,
                    Rm: Rm as _,
                }),
                _ => None,
            }
        }
        (x0, x1, _, x3, _) if x0 != 15 && x1 == 3 && x3 == 1 => {
            match (
                (instr >> 28) & 15,
                (instr >> 25) & 7,
                (instr >> 20) & 31,
                (instr >> 8) & 4095,
                (instr >> 5) & 7,
                (instr >> 4) & 1,
                instr & 15,
            ) {
                (_, _, x2, _, _, _, _) if x2 & 24 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let op1 = (instr >> 20) & 7;
                    let Rn = (instr >> 16) & 15;
                    let Rd = (instr >> 12) & 15;
                    let B = (instr >> 7) & 1;
                    let op2 = (instr >> 5) & 3;
                    let Rm = instr & 15;
                    match (op1, B, op2) {
                        (x0, _, _) if x0 == 0 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 0 => Some(Instr::Sadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 1 => Some(Instr::SasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 2 => Some(Instr::SsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 3 => Some(Instr::Ssub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 0 => Some(Instr::Sadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 == 3 => Some(Instr::Ssub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 0 => Some(Instr::Qadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 1 => Some(Instr::QasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 2 => Some(Instr::QsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 0 && x2 == 3 => Some(Instr::Qsub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 0 => Some(Instr::Qadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 2 && x1 == 1 && x2 == 3 => Some(Instr::Qsub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 0 => Some(Instr::Shadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 1 => Some(Instr::ShasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 2 => Some(Instr::ShsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 0 && x2 == 3 => Some(Instr::Shsub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 0 => Some(Instr::Shadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 3 && x1 == 1 && x2 == 3 => Some(Instr::Shsub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, _, _) if x0 == 4 => None,
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 0 => Some(Instr::Uadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 1 => Some(Instr::UasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 2 => Some(Instr::UsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 0 && x2 == 3 => Some(Instr::Usub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 1 && x2 == 0 => Some(Instr::Uadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 5 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 5 && x1 == 1 && x2 == 3 => Some(Instr::Usub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 0 && x2 == 0 => Some(Instr::Uqadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 0 && x2 == 1 => Some(Instr::UqasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 0 && x2 == 2 => Some(Instr::UqsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 0 && x2 == 3 => Some(Instr::Uqsub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 1 && x2 == 0 => Some(Instr::Uqadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 6 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 6 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 6 && x1 == 1 && x2 == 3 => Some(Instr::Uqsub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 0 && x2 == 0 => Some(Instr::Uhadd16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 0 && x2 == 1 => Some(Instr::UhasxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 0 && x2 == 2 => Some(Instr::UhsaxA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 0 && x2 == 3 => Some(Instr::Uhsub16A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 1 && x2 == 0 => Some(Instr::Uhadd8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 7 && x1 == 1 && x2 == 1 => None,
                        (x0, x1, x2) if x0 == 7 && x1 == 1 && x2 == 2 => None,
                        (x0, x1, x2) if x0 == 7 && x1 == 1 && x2 == 3 => Some(Instr::Uhsub8A1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 8 && x4 == 5 => {
                    let cond = (instr >> 28) & 15;
                    let Rn = (instr >> 16) & 15;
                    let Rd = (instr >> 12) & 15;
                    let Rm = instr & 15;
                    match () {
                        () => Some(Instr::SelA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 8 && x4 == 1 => None,
                (_, _, x2, _, x4, _, _) if x2 == 8 && x4 & 1 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let Rn = (instr >> 16) & 15;
                    let Rd = (instr >> 12) & 15;
                    let imm5 = (instr >> 7) & 31;
                    let tb = (instr >> 6) & 1;
                    let Rm = instr & 15;
                    match () {
                        () => Some(Instr::PkhtbA1 {
                            cond: cond as _,
                            Rn: Rn as _,
                            Rd: Rd as _,
                            imm5: imm5 as _,
                            tb: tb as _,
                            Rm: Rm as _,
                        }),
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 9 && x4 & 3 == 1 => None,
                (_, _, x2, _, x4, _, _) if x2 == 9 && x4 & 1 == 0 => None,
                (_, _, x2, _, x4, _, _) if x2 & 30 == 12 && x4 & 3 == 1 => None,
                (_, _, x2, _, x4, _, _) if x2 & 30 == 12 && x4 & 1 == 0 => None,
                (_, _, x2, _, x4, _, _) if x2 & 27 == 10 && x4 == 1 => {
                    let cond = (instr >> 28) & 15;
                    let U = (instr >> 22) & 1;
                    let sat_imm = (instr >> 16) & 15;
                    let Rd = (instr >> 12) & 15;
                    let Rn = instr & 15;
                    match U {
                        x0 if x0 == 0 => Some(Instr::Ssat16A1 {
                            cond: cond as _,
                            sat_imm: sat_imm as _,
                            Rd: Rd as _,
                            Rn: Rn as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::Usat16A1 {
                            cond: cond as _,
                            sat_imm: sat_imm as _,
                            Rd: Rd as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 & 27 == 10 && x4 == 5 => None,
                (_, _, x2, _, x4, _, _) if x2 & 27 == 11 && x4 & 3 == 1 => {
                    let cond = (instr >> 28) & 15;
                    let o1 = (instr >> 22) & 1;
                    let Rd = (instr >> 12) & 15;
                    let o2 = (instr >> 7) & 1;
                    let Rm = instr & 15;
                    match (o1, o2) {
                        (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::RevA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::Rev16A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::RbitA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::RevshA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 & 26 == 10 && x4 & 1 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let U = (instr >> 22) & 1;
                    let sat_imm = (instr >> 16) & 31;
                    let Rd = (instr >> 12) & 15;
                    let imm5 = (instr >> 7) & 31;
                    let sh = (instr >> 6) & 1;
                    let Rn = instr & 15;
                    match U {
                        x0 if x0 == 0 => Some(Instr::SsatA1Asr {
                            cond: cond as _,
                            sat_imm: sat_imm as _,
                            Rd: Rd as _,
                            imm5: imm5 as _,
                            sh: sh as _,
                            Rn: Rn as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::UsatA1Asr {
                            cond: cond as _,
                            sat_imm: sat_imm as _,
                            Rd: Rd as _,
                            imm5: imm5 as _,
                            sh: sh as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 & 24 == 8 && x4 == 7 => None,
                (_, _, x2, _, x4, _, _) if x2 & 24 == 8 && x4 == 3 => {
                    let cond = (instr >> 28) & 15;
                    let U = (instr >> 22) & 1;
                    let op = (instr >> 20) & 3;
                    let Rn = (instr >> 16) & 15;
                    let Rd = (instr >> 12) & 15;
                    let rotate = (instr >> 10) & 3;
                    let Rm = instr & 15;
                    match (U, op, Rn) {
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 != 15 => Some(Instr::Sxtab16A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 0 && x2 == 15 => Some(Instr::Sxtb16A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 != 15 => Some(Instr::SxtabA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 2 && x2 == 15 => Some(Instr::SxtbA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 != 15 => Some(Instr::SxtahA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 3 && x2 == 15 => Some(Instr::SxthA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 != 15 => Some(Instr::Uxtab16A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 == 15 => Some(Instr::Uxtb16A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 != 15 => Some(Instr::UxtabA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 15 => Some(Instr::UxtbA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 != 15 => Some(Instr::UxtahA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        (x0, x1, x2) if x0 == 1 && x1 == 3 && x2 == 15 => Some(Instr::UxthA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            rotate: rotate as _,
                            Rm: Rm as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, _, _, _) if x2 & 24 == 16 => {
                    let cond = (instr >> 28) & 15;
                    let op1 = (instr >> 20) & 7;
                    let Rd = (instr >> 16) & 15;
                    let Ra = (instr >> 12) & 15;
                    let Rm = (instr >> 8) & 15;
                    let op2 = (instr >> 5) & 7;
                    let Rn = instr & 15;
                    match (op1, Ra, op2) {
                        (x0, x1, x2) if x0 == 0 && x1 != 15 && x2 == 0 => Some(Instr::SmladA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 != 15 && x2 == 1 => Some(Instr::SmladxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 != 15 && x2 == 2 => Some(Instr::SmlsdA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 != 15 && x2 == 3 => Some(Instr::SmlsdxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 0 && x2 & 4 == 4 => None,
                        (x0, x1, x2) if x0 == 0 && x1 == 15 && x2 == 0 => Some(Instr::SmuadA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 15 && x2 == 1 => Some(Instr::SmuadxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 15 && x2 == 2 => Some(Instr::SmusdA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 0 && x1 == 15 && x2 == 3 => Some(Instr::SmusdxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::SdivA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 1 && x2 != 0 => None,
                        (x0, _, _) if x0 == 2 => None,
                        (x0, _, x2) if x0 == 3 && x2 == 0 => Some(Instr::UdivA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 3 && x2 != 0 => None,
                        (x0, _, x2) if x0 == 4 && x2 == 0 => Some(Instr::SmlaldA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 4 && x2 == 1 => Some(Instr::SmlaldxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 4 && x2 == 2 => Some(Instr::SmlsldA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 4 && x2 == 3 => Some(Instr::SmlsldxA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 4 && x2 & 4 == 4 => None,
                        (x0, x1, x2) if x0 == 5 && x1 != 15 && x2 == 0 => Some(Instr::SmmlaA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 != 15 && x2 == 1 => Some(Instr::SmmlarA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 5 && x2 & 6 == 2 => None,
                        (x0, _, x2) if x0 == 5 && x2 & 6 == 4 => None,
                        (x0, _, x2) if x0 == 5 && x2 == 6 => Some(Instr::SmmlsA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, x2) if x0 == 5 && x2 == 7 => Some(Instr::SmmlsrA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 15 && x2 == 0 => Some(Instr::SmmulA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2) if x0 == 5 && x1 == 15 && x2 == 1 => Some(Instr::SmmulrA1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        (x0, _, _) if x0 & 6 == 6 => None,
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 24 && x4 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let Rd = (instr >> 16) & 15;
                    let Ra = (instr >> 12) & 15;
                    let Rm = (instr >> 8) & 15;
                    let Rn = instr & 15;
                    match Ra {
                        x0 if x0 != 15 => Some(Instr::Usada8A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        x0 if x0 == 15 => Some(Instr::Usad8A1 {
                            cond: cond as _,
                            Rd: Rd as _,
                            Rm: Rm as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 24 && x4 == 4 => None,
                (_, _, x2, _, x4, _, _) if x2 == 25 && x4 & 3 == 0 => None,
                (_, _, x2, _, x4, _, _) if x2 & 30 == 26 && x4 & 3 == 0 => None,
                (_, _, x2, _, x4, _, _) if x2 & 28 == 24 && x4 == 7 => None,
                (_, _, x2, _, x4, _, _) if x2 & 30 == 28 && x4 == 7 => None,
                (_, _, x2, _, x4, _, _) if x2 & 30 == 28 && x4 & 3 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let msb = (instr >> 16) & 31;
                    let Rd = (instr >> 12) & 15;
                    let lsb = (instr >> 7) & 31;
                    let Rn = instr & 15;
                    match Rn {
                        x0 if x0 != 15 => Some(Instr::BfiA1 {
                            cond: cond as _,
                            msb: msb as _,
                            Rd: Rd as _,
                            lsb: lsb as _,
                        }),
                        x0 if x0 == 15 => Some(Instr::BfcA1 {
                            cond: cond as _,
                            msb: msb as _,
                            Rd: Rd as _,
                            lsb: lsb as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 == 30 && x4 == 7 => None,
                (_, _, x2, _, x4, _, _) if x2 == 31 && x4 == 7 => {
                    let cond = (instr >> 28) & 15;
                    let imm12 = (instr >> 8) & 4095;
                    let imm4 = instr & 15;
                    match cond {
                        x0 if x0 & 8 == 0 => None,
                        x0 if x0 & 12 == 8 => None,
                        x0 if x0 & 14 == 12 => None,
                        x0 if x0 == 14 => Some(Instr::UdfA1 {
                            imm12: imm12 as _,
                            imm4: imm4 as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 & 30 == 30 && x4 & 3 == 0 => None,
                (_, _, x2, _, x4, _, _) if x2 & 26 == 24 && x4 & 3 == 2 => None,
                (_, _, x2, _, x4, _, _) if x2 & 26 == 26 && x4 & 3 == 2 => {
                    let cond = (instr >> 28) & 15;
                    let U = (instr >> 22) & 1;
                    let widthm1 = (instr >> 16) & 31;
                    let Rd = (instr >> 12) & 15;
                    let lsb = (instr >> 7) & 31;
                    let Rn = instr & 15;
                    match U {
                        x0 if x0 == 0 => Some(Instr::SbfxA1 {
                            cond: cond as _,
                            widthm1: widthm1 as _,
                            Rd: Rd as _,
                            lsb: lsb as _,
                            Rn: Rn as _,
                        }),
                        x0 if x0 == 1 => Some(Instr::UbfxA1 {
                            cond: cond as _,
                            widthm1: widthm1 as _,
                            Rd: Rd as _,
                            lsb: lsb as _,
                            Rn: Rn as _,
                        }),
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, _) if x2 & 24 == 24 && x4 == 3 => None,
                (_, _, x2, _, x4, _, _) if x2 & 24 == 24 && x4 & 3 == 1 => None,
                _ => None,
            }
        }
        (_, x1, _, _, _) if x1 & 6 == 4 => {
            match (
                (instr >> 28) & 15,
                (instr >> 26) & 3,
                (instr >> 25) & 1,
                instr & 33554431,
            ) {
                (x0, _, x2, _) if x0 == 15 && x2 == 0 => {
                    let P = (instr >> 24) & 1;
                    let U = (instr >> 23) & 1;
                    let S = (instr >> 22) & 1;
                    let W = (instr >> 21) & 1;
                    let L = (instr >> 20) & 1;
                    let Rn = (instr >> 16) & 15;
                    let op = (instr >> 5) & 2047;
                    let mode = instr & 31;
                    match (P, U, S, L) {
                        (_, _, x2, x3) if x2 == 0 && x3 == 0 => None,
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::RfedaA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::SrsdaA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::RfeiaA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::SrsiaA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::RfedbA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 => {
                            Some(Instr::SrsdbA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (_, _, x2, x3) if x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::RfeibA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 0 => {
                            Some(Instr::SrsibA1As {
                                W: W as _,
                                Rn: Rn as _,
                                op: op as _,
                                mode: mode as _,
                            })
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _) if x0 != 15 && x2 == 0 => {
                    let cond = (instr >> 28) & 15;
                    let P = (instr >> 24) & 1;
                    let U = (instr >> 23) & 1;
                    let op = (instr >> 22) & 1;
                    let W = (instr >> 21) & 1;
                    let L = (instr >> 20) & 1;
                    let Rn = (instr >> 16) & 15;
                    let register_list = instr & 65535;
                    match (P, U, op, L, register_list) {
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::StmdaA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::LdmdaA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::StmA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::LdmA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (_, _, x2, x3, _) if x2 == 1 && x3 == 0 => Some(Instr::StmUA1As {
                            cond: cond as _,
                            W: W as _,
                            Rn: Rn as _,
                        }),
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 0 => {
                            Some(Instr::StmdbA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 0 && x2 == 0 && x3 == 1 => {
                            Some(Instr::LdmdbA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (_, _, x2, x3, x4) if x2 == 1 && x3 == 1 && x4 & 32768 == 0 => {
                            Some(Instr::LdmUA1As {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 0 => {
                            Some(Instr::StmibA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (x0, x1, x2, x3, _) if x0 == 1 && x1 == 1 && x2 == 0 && x3 == 1 => {
                            Some(Instr::LdmibA1 {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        (_, _, x2, x3, x4) if x2 == 1 && x3 == 1 && x4 & 32768 == 32768 => {
                            Some(Instr::LdmEA1As {
                                cond: cond as _,
                                W: W as _,
                                Rn: Rn as _,
                            })
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _) if x2 == 1 => {
                    let cond = (instr >> 28) & 15;
                    let H = (instr >> 24) & 1;
                    let imm24 = instr & 16777215;
                    match (cond, H) {
                        (x0, x1) if x0 != 15 && x1 == 0 => Some(Instr::BA1 { imm24: imm24 as _ }),
                        (x0, x1) if x0 != 15 && x1 == 1 => {
                            Some(Instr::BlIA1A { imm24: imm24 as _ })
                        }
                        (x0, _) if x0 == 15 => Some(Instr::BlIA1A { imm24: imm24 as _ }),
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (_, x1, _, _, _) if x1 & 6 == 6 => {
            match (
                (instr >> 28) & 15,
                (instr >> 26) & 3,
                (instr >> 24) & 3,
                (instr >> 12) & 4095,
                (instr >> 9) & 7,
                (instr >> 5) & 15,
                (instr >> 4) & 1,
                instr & 15,
            ) {
                (_, _, x2, _, x4, _, _, _) if x2 & 2 == 0 && x4 == 7 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 21) & 15,
                        (instr >> 12) & 511,
                        (instr >> 9) & 7,
                        instr & 511,
                    ) {
                        (_, _, x2, _, _, _) if x2 & 13 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let D = (instr >> 22) & 1;
                            let L = (instr >> 20) & 1;
                            let Rt2 = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let cp15 = (instr >> 8) & 1;
                            let opc1 = (instr >> 4) & 15;
                            let CRm = instr & 15;
                            match (cond, D, L) {
                                (x0, x1, x2) if x0 != 15 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::McrrA1 {
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        cp15: cp15 as _,
                                        opc1: opc1 as _,
                                        CRm: CRm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 != 15 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::MrrcA1 {
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        cp15: cp15 as _,
                                        opc1: opc1 as _,
                                        CRm: CRm as _,
                                    })
                                }
                                (_, x1, _) if x1 == 0 => None,
                                (x0, x1, _) if x0 == 15 && x1 == 1 => None,
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 & 13 != 0 => {
                            let cond = (instr >> 28) & 15;
                            let P = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let D = (instr >> 22) & 1;
                            let W = (instr >> 21) & 1;
                            let L = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let CRd = (instr >> 12) & 15;
                            let cp15 = (instr >> 8) & 1;
                            let imm8 = instr & 255;
                            match (cond, (P << 1) | U, D, L, Rn, CRd, cp15) {
                                (x0, x1, x2, _, _, x5, x6)
                                    if x0 != 15 && x1 != 0 && x2 == 0 && x5 != 5 && x6 == 0 =>
                                {
                                    None
                                }
                                (x0, x1, x2, x3, x4, x5, x6)
                                    if x0 != 15
                                        && x1 != 0
                                        && x2 == 0
                                        && x3 == 1
                                        && x4 == 15
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::LdcLA1 {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, _, _, _, _, x6) if x0 != 15 && x1 != 0 && x6 == 1 => None,
                                (x0, x1, x2, _, _, x5, x6)
                                    if x0 != 15 && x1 != 0 && x2 == 1 && x5 == 5 && x6 == 0 =>
                                {
                                    None
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 1
                                        && x2 == 0
                                        && x3 == 0
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::StcA1Post {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 1
                                        && x2 == 0
                                        && x3 == 1
                                        && x4 != 15
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::LdcIA1Post {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 != 15
                                        && x1 == 2
                                        && x2 == 0
                                        && x3 == 0
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::StcA1Unind {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4, x5, x6)
                                    if x0 != 15
                                        && x1 == 2
                                        && x2 == 0
                                        && x3 == 1
                                        && x4 != 15
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::LdcIA1Unind {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 4
                                        && x2 == 0
                                        && x3 == 0
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::StcA1Off {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 4
                                        && x2 == 0
                                        && x3 == 1
                                        && x4 != 15
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::LdcIA1Off {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 5
                                        && x2 == 0
                                        && x3 == 0
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::StcA1Pre {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4, x5, x6)
                                    if x0 != 15
                                        && x1 & 5 == 5
                                        && x2 == 0
                                        && x3 == 1
                                        && x4 != 15
                                        && x5 == 5
                                        && x6 == 0 =>
                                {
                                    Some(Instr::LdcIA1Pre {
                                        P: P as _,
                                        U: U as _,
                                        W: W as _,
                                        imm8: imm8 as _,
                                    })
                                }
                                (x0, x1, _, _, _, _, _) if x0 == 15 && x1 != 0 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, x6, _) if x2 == 2 && x4 & 6 == 4 && x6 == 0 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 24) & 15,
                        (instr >> 20) & 15,
                        (instr >> 16) & 15,
                        (instr >> 12) & 15,
                        (instr >> 10) & 3,
                        (instr >> 8) & 3,
                        (instr >> 7) & 1,
                        (instr >> 6) & 1,
                        (instr >> 5) & 1,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (x0, _, x2, _, _, _, x6, _, x8, _, _, _)
                            if x0 == 15 && x2 & 8 == 0 && x6 != 0 && x8 == 0 =>
                        {
                            let D = (instr >> 22) & 1;
                            let cc = (instr >> 20) & 3;
                            let Vn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let N = (instr >> 7) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match (cc, size) {
                                (x0, _) if x0 == 0 => Some(Instr::VseleqA1D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _) if x0 == 1 => Some(Instr::VselvsA1D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, x1) if x1 == 1 => None,
                                (x0, _) if x0 == 2 => Some(Instr::VselgeA1D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _) if x0 == 3 => Some(Instr::VselgtA1D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                _ => None,
                            }
                        }
                        (x0, _, x2, _, _, _, x6, _, _, _, _, _)
                            if x0 == 15 && x2 & 11 == 8 && x6 != 0 =>
                        {
                            let D = (instr >> 22) & 1;
                            let Vn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let N = (instr >> 7) & 1;
                            let op = (instr >> 6) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match (size, op) {
                                (_, x1) if x1 == 0 => Some(Instr::VmaxnmA2D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _) if x0 == 1 => None,
                                (_, x1) if x1 == 1 => Some(Instr::VminnmA2D {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                _ => None,
                            }
                        }
                        (x0, _, x2, x3, _, _, x6, _, x8, _, _, _)
                            if x0 == 15 && x2 & 11 == 11 && x3 == 0 && x6 != 0 && x8 == 1 =>
                        {
                            let D = (instr >> 22) & 1;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let op = (instr >> 7) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match (size, op) {
                                (x0, _) if x0 == 1 => None,
                                (x0, x1) if x0 == 2 && x1 == 0 => Some(Instr::VmovxA1 {
                                    D: D as _,
                                    Vd: Vd as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1) if x0 == 2 && x1 == 1 => Some(Instr::VinsA1 {
                                    D: D as _,
                                    Vd: Vd as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _) if x0 == 3 => None,
                                _ => None,
                            }
                        }
                        (x0, _, x2, x3, _, _, x6, _, x8, _, _, _)
                            if x0 == 15 && x2 & 11 == 11 && x3 & 8 == 8 && x6 != 0 && x8 == 1 =>
                        {
                            let D = (instr >> 22) & 1;
                            let o1 = (instr >> 18) & 1;
                            let RM = (instr >> 16) & 3;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let op = (instr >> 7) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match (o1, RM, size) {
                                (x0, x1, _) if x0 == 0 && x1 == 0 => Some(Instr::VrintaVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 0 && x1 == 1 => Some(Instr::VrintnVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2) if x2 == 1 => None,
                                (x0, x1, _) if x0 == 0 && x1 == 2 => Some(Instr::VrintpVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 0 && x1 == 3 => Some(Instr::VrintmVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 1 && x1 == 0 => Some(Instr::VcvtaVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 1 && x1 == 1 => Some(Instr::VcvtnVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 1 && x1 == 2 => Some(Instr::VcvtpVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, _) if x0 == 1 && x1 == 3 => Some(Instr::VcvtmVfpA1D {
                                    D: D as _,
                                    Vd: Vd as _,
                                    op: op as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                _ => None,
                            }
                        }
                        (x0, _, x2, _, _, _, _, _, x8, _, _, _)
                            if x0 != 15 && x2 & 11 == 11 && x8 == 1 =>
                        {
                            let cond = (instr >> 28) & 15;
                            let D = (instr >> 22) & 1;
                            let o1 = (instr >> 19) & 1;
                            let opc2 = (instr >> 16) & 7;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let o3 = (instr >> 7) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match (o1, opc2, size, o3) {
                                (_, _, x2, _) if x2 == 0 => None,
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => {
                                    None
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 0 && x3 == 1 => {
                                    Some(Instr::VabsA2D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 2 && x3 == 0 => {
                                    Some(Instr::VmovRA2S {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 0 && x2 == 3 && x3 == 0 => {
                                    Some(Instr::VmovRA2D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 1 && x3 == 0 => {
                                    Some(Instr::VnegA2D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 1 && x3 == 1 => {
                                    Some(Instr::VsqrtA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 2 && x3 == 0 => {
                                    Some(Instr::VcvtbA1Dh {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 1 => None,
                                (x0, x1, _, x3) if x0 == 0 && x1 == 2 && x3 == 1 => {
                                    Some(Instr::VcvttA1Dh {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 1 && x3 == 0 => {
                                    Some(Instr::VcvtbA1Bfs {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 1 && x3 == 1 => {
                                    Some(Instr::VcvttA1Bfs {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 2 && x3 == 0 => {
                                    Some(Instr::VcvtbA1Hs {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 2 && x3 == 1 => {
                                    Some(Instr::VcvttA1Hs {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 3 && x3 == 0 => {
                                    Some(Instr::VcvtbA1Hd {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 3 && x2 == 3 && x3 == 1 => {
                                    Some(Instr::VcvttA1Hd {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 4 && x3 == 0 => {
                                    Some(Instr::VcmpA1A {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 4 && x3 == 1 => {
                                    Some(Instr::VcmpA1A {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 5 && x3 == 0 => {
                                    Some(Instr::VcmpA1A {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 5 && x3 == 1 => {
                                    Some(Instr::VcmpA1A {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 6 && x3 == 0 => {
                                    Some(Instr::VrintrVfpA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 6 && x3 == 1 => {
                                    Some(Instr::VrintzVfpA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 0 && x1 == 7 && x3 == 0 => {
                                    Some(Instr::VrintxVfpA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 7 && x2 == 1 && x3 == 1 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 7 && x2 == 2 && x3 == 1 => {
                                    Some(Instr::VcvtDsA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 7 && x2 == 3 && x3 == 1 => {
                                    Some(Instr::VcvtSdA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, _) if x0 == 1 && x1 == 0 => Some(Instr::VcvtViA1D {
                                    cond: cond as _,
                                    D: D as _,
                                    Vd: Vd as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 1 => None,
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 2 => None,
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 3 && x3 == 0 => {
                                    None
                                }
                                (x0, x1, x2, x3) if x0 == 1 && x1 == 1 && x2 == 3 && x3 == 1 => {
                                    Some(Instr::VjcvtA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, _) if x0 == 1 && x1 & 6 == 2 => {
                                    Some(Instr::VcvtToxvA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 4 && x3 == 0 => {
                                    Some(Instr::VcvtrUivA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 4 && x3 == 1 => {
                                    Some(Instr::VcvtUivA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 5 && x3 == 0 => {
                                    Some(Instr::VcvtrSivA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, x3) if x0 == 1 && x1 == 5 && x3 == 1 => {
                                    Some(Instr::VcvtSivA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, _, _) if x0 == 1 && x1 & 6 == 6 => {
                                    Some(Instr::VcvtXvA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (x0, _, x2, _, _, _, _, _, x8, _, _, _)
                            if x0 != 15 && x2 & 11 == 11 && x8 == 0 =>
                        {
                            let cond = (instr >> 28) & 15;
                            let D = (instr >> 22) & 1;
                            let imm4H = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let imm4L = instr & 15;
                            match size {
                                x0 if x0 == 0 => None,
                                x0 if x0 == 1 => Some(Instr::VmovIA2H {
                                    cond: cond as _,
                                    D: D as _,
                                    imm4H: imm4H as _,
                                    Vd: Vd as _,
                                    imm4L: imm4L as _,
                                }),
                                x0 if x0 == 2 => Some(Instr::VmovIA2S {
                                    cond: cond as _,
                                    D: D as _,
                                    imm4H: imm4H as _,
                                    Vd: Vd as _,
                                    imm4L: imm4L as _,
                                }),
                                x0 if x0 == 3 => Some(Instr::VmovIA2D {
                                    cond: cond as _,
                                    D: D as _,
                                    imm4H: imm4H as _,
                                    Vd: Vd as _,
                                    imm4L: imm4L as _,
                                }),
                                _ => None,
                            }
                        }
                        (x0, _, x2, _, _, _, _, _, _, _, _, _) if x0 != 15 && x2 & 11 != 11 => {
                            let cond = (instr >> 28) & 15;
                            let o0 = (instr >> 23) & 1;
                            let D = (instr >> 22) & 1;
                            let o1 = (instr >> 20) & 3;
                            let Vn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let N = (instr >> 7) & 1;
                            let o2 = (instr >> 6) & 1;
                            let M = (instr >> 5) & 1;
                            let Vm = instr & 15;
                            match ((o0 << 2) | o1, size, o2) {
                                (x0, x1, _) if x0 != 7 && x1 == 0 => None,
                                (x0, _, x2) if x0 == 0 && x2 == 0 => Some(Instr::VmlaFA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 0 && x2 == 1 => Some(Instr::VmlsFA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 1 && x2 == 0 => Some(Instr::VnmlsA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 1 && x2 == 1 => Some(Instr::VnmlaA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 2 && x2 == 0 => Some(Instr::VmulFA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 2 && x2 == 1 => Some(Instr::VnmulA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 3 && x2 == 0 => Some(Instr::VaddFA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 3 && x2 == 1 => Some(Instr::VsubFA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 4 && x2 == 0 => Some(Instr::VdivA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 5 && x2 == 0 => Some(Instr::VfnmsA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 5 && x2 == 1 => Some(Instr::VfnmaA1D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 6 && x2 == 0 => Some(Instr::VfmaA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2) if x0 == 6 && x2 == 1 => Some(Instr::VfmsA2D {
                                    cond: cond as _,
                                    o0: o0 as _,
                                    D: D as _,
                                    o1: o1 as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, _, x2, _, x4, _, x6, _) if x2 == 2 && x4 == 7 && x6 == 1 => {
                    let cond = (instr >> 28) & 15;
                    let opc1 = (instr >> 21) & 7;
                    let L = (instr >> 20) & 1;
                    let CRn = (instr >> 16) & 15;
                    let Rt = (instr >> 12) & 15;
                    let cp15 = (instr >> 8) & 1;
                    let opc2 = (instr >> 5) & 7;
                    let CRm = instr & 15;
                    match (cond, L) {
                        (x0, x1) if x0 != 15 && x1 == 0 => Some(Instr::McrA1 {
                            opc1: opc1 as _,
                            CRn: CRn as _,
                            Rt: Rt as _,
                            cp15: cp15 as _,
                            opc2: opc2 as _,
                            CRm: CRm as _,
                        }),
                        (x0, x1) if x0 != 15 && x1 == 1 => Some(Instr::MrcA1 {
                            opc1: opc1 as _,
                            CRn: CRn as _,
                            Rt: Rt as _,
                            cp15: cp15 as _,
                            opc2: opc2 as _,
                            CRm: CRm as _,
                        }),
                        (x0, _) if x0 == 15 => None,
                        _ => None,
                    }
                }
                (_, _, x2, _, _, _, _, _) if x2 == 3 => {
                    match ((instr >> 28) & 15, (instr >> 24) & 15, instr & 16777215) {
                        (x0, _, _) if x0 == 15 => None,
                        (x0, _, _) if x0 != 15 => {
                            let cond = (instr >> 28) & 15;
                            let imm24 = instr & 16777215;
                            match () {
                                () => Some(Instr::SvcA1 {
                                    cond: cond as _,
                                    imm24: imm24 as _,
                                }),
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 15 && x2 & 2 == 0 && x4 & 5 == 4 => {
                    let op1 = (instr >> 23) & 3;
                    let D = (instr >> 22) & 1;
                    let op2 = (instr >> 20) & 3;
                    let Vn = (instr >> 16) & 15;
                    let Vd = (instr >> 12) & 15;
                    let op3 = (instr >> 10) & 1;
                    let op4 = (instr >> 8) & 1;
                    let N = (instr >> 7) & 1;
                    let Q = (instr >> 6) & 1;
                    let M = (instr >> 5) & 1;
                    let U = (instr >> 4) & 1;
                    let Vm = instr & 15;
                    match (op1, op2, op3, op4, Q, U) {
                        (x0, x1, x2, x3, x4, x5)
                            if x0 & 1 == 1
                                && x1 & 2 == 0
                                && x2 == 0
                                && x3 == 0
                                && x4 == 0
                                && x5 == 0 =>
                        {
                            Some(Instr::VcaddA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 & 1 == 1
                                && x1 & 2 == 0
                                && x2 == 0
                                && x3 == 0
                                && x4 == 0
                                && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 & 1 == 1
                                && x1 & 2 == 0
                                && x2 == 0
                                && x3 == 0
                                && x4 == 1
                                && x5 == 0 =>
                        {
                            Some(Instr::VcaddA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 & 1 == 1
                                && x1 & 2 == 0
                                && x2 == 0
                                && x3 == 0
                                && x4 == 1
                                && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 & 2 == 0 && x2 == 0 && x3 == 0 => {
                            None
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 & 2 == 0 && x2 == 0 && x3 == 1 => {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VmmlaA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VdotA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VdotA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 2 && x2 == 0 && x3 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmalA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 2 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VsmmlaA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 1 =>
                        {
                            Some(Instr::VummlaA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VsdotA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VudotA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VsdotA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 1 =>
                        {
                            Some(Instr::VudotA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 3 && x2 == 0 && x3 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmaBfA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 3 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 3 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 3 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 2 && x2 == 0 && x3 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmslA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 2 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, x4, _)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VusmmlaA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 0 && x4 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VusdotA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VusdotA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, _, _, _, _) if x0 == 1 && x1 == 3 => None,
                        (_, x1, x2, x3, _, x5) if x1 & 2 == 2 && x2 == 0 && x3 == 0 && x5 == 0 => {
                            Some(Instr::VcmlaA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, _, _, _, _) if x0 == 2 && x1 == 3 => None,
                        (x0, x1, _, _, _, _) if x0 == 3 && x1 == 3 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 == 15 && x2 == 2 && x4 & 5 == 4 => {
                    let op1 = (instr >> 23) & 1;
                    let D = (instr >> 22) & 1;
                    let op2 = (instr >> 20) & 3;
                    let Vn = (instr >> 16) & 15;
                    let Vd = (instr >> 12) & 15;
                    let op3 = (instr >> 10) & 1;
                    let op4 = (instr >> 8) & 1;
                    let N = (instr >> 7) & 1;
                    let Q = (instr >> 6) & 1;
                    let M = (instr >> 5) & 1;
                    let U = (instr >> 4) & 1;
                    let Vm = instr & 15;
                    match (op1, op2, op3, op4, Q, U) {
                        (x0, _, x2, x3, _, x5) if x0 == 0 && x2 == 0 && x3 == 0 && x5 == 0 => {
                            Some(Instr::VcmlaSA1Qh {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmalSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VdotSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x5 == 1 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VdotSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 && x5 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmslSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 0 && x4 == 1 && x5 == 1 =>
                        {
                            Some(Instr::VfmslSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 1 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, _, _, _) if x0 == 0 && x1 == 2 && x2 == 0 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 0 => None,
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VsdotSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VudotSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VsdotSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 0 && x1 == 2 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 1 =>
                        {
                            Some(Instr::VudotSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 3 && x2 == 0 && x3 == 0 && x5 == 0 =>
                        {
                            None
                        }
                        (x0, x1, x2, x3, _, x5)
                            if x0 == 0 && x1 == 3 && x2 == 0 && x3 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VfmaBfsA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, _, _) if x0 == 0 && x1 == 3 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, _, _, _) if x0 == 0 && x1 == 3 && x2 == 1 => None,
                        (x0, _, x2, x3, _, x5) if x0 == 1 && x2 == 0 && x3 == 0 && x5 == 0 => {
                            Some(Instr::VcmlaSA1Qs {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 0 =>
                        {
                            Some(Instr::VusdotSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 0 && x5 == 1 =>
                        {
                            Some(Instr::VsudotSA1D {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 0 =>
                        {
                            Some(Instr::VusdotSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, x1, x2, x3, x4, x5)
                            if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x4 == 1 && x5 == 1 =>
                        {
                            Some(Instr::VsudotSA1Q {
                                D: D as _,
                                Vn: Vn as _,
                                Vd: Vd as _,
                                N: N as _,
                                M: M as _,
                                Vm: Vm as _,
                            })
                        }
                        (x0, _, x2, x3, _, _) if x0 == 1 && x2 == 0 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 == 1 && x2 == 1 && x3 == 1 => None,
                        (x0, x1, x2, x3, _, _) if x0 == 1 && x1 & 2 == 2 && x2 == 1 && x3 == 1 => {
                            None
                        }
                        (x0, _, x2, x3, _, _) if x0 == 1 && x2 == 1 && x3 == 0 => None,
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, _, _) if x0 != 15 && x2 & 2 == 0 && x4 & 6 == 4 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 25) & 7,
                        (instr >> 21) & 15,
                        (instr >> 12) & 511,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, _, x2, _, _, _) if x2 & 13 == 0 => {
                            let cond = (instr >> 28) & 15;
                            let D = (instr >> 22) & 1;
                            let op = (instr >> 20) & 1;
                            let Rt2 = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let opc2 = (instr >> 6) & 3;
                            let M = (instr >> 5) & 1;
                            let o3 = (instr >> 4) & 1;
                            let Vm = instr & 15;
                            match (D, op, size, opc2, o3) {
                                (x0, _, _, _, _) if x0 == 0 => None,
                                (x0, _, _, _, x4) if x0 == 1 && x4 == 0 => None,
                                (x0, _, x2, x3, x4)
                                    if x0 == 1 && x2 & 2 == 0 && x3 == 0 && x4 == 1 =>
                                {
                                    None
                                }
                                (x0, _, _, x3, _) if x0 == 1 && x3 == 1 => None,
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 == 0 && x2 == 2 && x3 == 0 && x4 == 1 =>
                                {
                                    Some(Instr::VmovTossA1 {
                                        cond: cond as _,
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 == 0 && x2 == 3 && x3 == 0 && x4 == 1 =>
                                {
                                    Some(Instr::VmovTodA1 {
                                        cond: cond as _,
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, _, x3, _) if x0 == 1 && x3 & 2 == 2 => None,
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 == 1 && x2 == 2 && x3 == 0 && x4 == 1 =>
                                {
                                    Some(Instr::VmovSsA1 {
                                        cond: cond as _,
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 == 1 && x2 == 3 && x3 == 0 && x4 == 1 =>
                                {
                                    Some(Instr::VmovDA1 {
                                        cond: cond as _,
                                        Rt2: Rt2 as _,
                                        Rt: Rt as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, _, _) if x2 & 13 != 0 => {
                            let cond = (instr >> 28) & 15;
                            let P = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let D = (instr >> 22) & 1;
                            let W = (instr >> 21) & 1;
                            let L = (instr >> 20) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 8) & 3;
                            let imm8 = instr & 255;
                            match (P, U, W, L, Rn, size, imm8) {
                                (x0, x1, x2, _, _, _, _) if x0 == 0 && x1 == 0 && x2 == 1 => None,
                                (x0, x1, _, _, _, x5, _) if x0 == 0 && x1 == 1 && x5 & 2 == 0 => {
                                    None
                                }
                                (x0, x1, _, x3, _, x5, _)
                                    if x0 == 0 && x1 == 1 && x3 == 0 && x5 == 2 =>
                                {
                                    Some(Instr::VstmA2 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, _, x3, _, x5, x6)
                                    if x0 == 0 && x1 == 1 && x3 == 0 && x5 == 3 && x6 & 1 == 0 =>
                                {
                                    Some(Instr::VstmA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, _, x3, _, x5, x6)
                                    if x0 == 0 && x1 == 1 && x3 == 0 && x5 == 3 && x6 & 1 == 1 =>
                                {
                                    Some(Instr::FstmiaxA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, _, x3, _, x5, _)
                                    if x0 == 0 && x1 == 1 && x3 == 1 && x5 == 2 =>
                                {
                                    Some(Instr::VldmA2 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, _, x3, _, x5, x6)
                                    if x0 == 0 && x1 == 1 && x3 == 1 && x5 == 3 && x6 & 1 == 0 =>
                                {
                                    Some(Instr::VldmA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, _, x3, _, x5, x6)
                                    if x0 == 0 && x1 == 1 && x3 == 1 && x5 == 3 && x6 & 1 == 1 =>
                                {
                                    Some(Instr::FldmiaxA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, _, x2, x3, _, _, _) if x0 == 1 && x2 == 0 && x3 == 0 => {
                                    Some(Instr::VstrA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, _, x2, _, _, x5, _) if x0 == 1 && x2 == 0 && x5 == 0 => None,
                                (x0, _, x2, x3, x4, _, _)
                                    if x0 == 1 && x2 == 0 && x3 == 1 && x4 != 15 =>
                                {
                                    Some(Instr::VldrA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, _, _, x5, _)
                                    if x0 == 1 && x1 == 0 && x2 == 1 && x5 & 2 == 0 =>
                                {
                                    None
                                }
                                (x0, x1, x2, x3, _, x5, _)
                                    if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 0 && x5 == 2 =>
                                {
                                    Some(Instr::VstmdbA2 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 == 1
                                        && x1 == 0
                                        && x2 == 1
                                        && x3 == 0
                                        && x5 == 3
                                        && x6 & 1 == 0 =>
                                {
                                    Some(Instr::VstmdbA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 == 1
                                        && x1 == 0
                                        && x2 == 1
                                        && x3 == 0
                                        && x5 == 3
                                        && x6 & 1 == 1 =>
                                {
                                    Some(Instr::FstmdbxA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, _)
                                    if x0 == 1 && x1 == 0 && x2 == 1 && x3 == 1 && x5 == 2 =>
                                {
                                    Some(Instr::VldmdbA2 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 == 1
                                        && x1 == 0
                                        && x2 == 1
                                        && x3 == 1
                                        && x5 == 3
                                        && x6 & 1 == 0 =>
                                {
                                    Some(Instr::VldmdbA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, x3, _, x5, x6)
                                    if x0 == 1
                                        && x1 == 0
                                        && x2 == 1
                                        && x3 == 1
                                        && x5 == 3
                                        && x6 & 1 == 1 =>
                                {
                                    Some(Instr::FldmdbxA1 {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, _, x2, x3, x4, _, _)
                                    if x0 == 1 && x2 == 0 && x3 == 1 && x4 == 15 =>
                                {
                                    Some(Instr::VldrLA1D {
                                        cond: cond as _,
                                        D: D as _,
                                        Vd: Vd as _,
                                    })
                                }
                                (x0, x1, x2, _, _, _, _) if x0 == 1 && x1 == 1 && x2 == 1 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (x0, _, x2, _, x4, _, x6, _) if x0 != 15 && x2 == 2 && x4 & 6 == 4 && x6 == 1 => {
                    match (
                        (instr >> 28) & 15,
                        (instr >> 24) & 15,
                        (instr >> 21) & 7,
                        (instr >> 12) & 511,
                        (instr >> 10) & 3,
                        (instr >> 8) & 3,
                        (instr >> 5) & 7,
                        instr & 31,
                    ) {
                        (_, _, x2, _, _, x5, _, _) if x2 == 0 && x5 == 1 => {
                            let cond = (instr >> 28) & 15;
                            let op = (instr >> 20) & 1;
                            let Vn = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let N = (instr >> 7) & 1;
                            match () {
                                () => Some(Instr::VmovHA1 {
                                    cond: cond as _,
                                    op: op as _,
                                    Vn: Vn as _,
                                    Rt: Rt as _,
                                    N: N as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, x5, _, _) if x2 == 0 && x5 == 2 => {
                            let cond = (instr >> 28) & 15;
                            let op = (instr >> 20) & 1;
                            let Vn = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let N = (instr >> 7) & 1;
                            match () {
                                () => Some(Instr::VmovSA1 {
                                    cond: cond as _,
                                    op: op as _,
                                    Vn: Vn as _,
                                    Rt: Rt as _,
                                    N: N as _,
                                }),
                            }
                        }
                        (_, _, x2, _, _, x5, _, _) if x2 == 7 && x5 == 2 => {
                            let cond = (instr >> 28) & 15;
                            let L = (instr >> 20) & 1;
                            let reg = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            match L {
                                x0 if x0 == 0 => Some(Instr::VmsrA1As {
                                    cond: cond as _,
                                    reg: reg as _,
                                    Rt: Rt as _,
                                }),
                                x0 if x0 == 1 => Some(Instr::VmrsA1As {
                                    cond: cond as _,
                                    reg: reg as _,
                                    Rt: Rt as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, _, _, _, _, x5, _, _) if x5 == 3 => {
                            let cond = (instr >> 28) & 15;
                            let opc1 = (instr >> 21) & 7;
                            let L = (instr >> 20) & 1;
                            let Vn = (instr >> 16) & 15;
                            let Rt = (instr >> 12) & 15;
                            let N = (instr >> 7) & 1;
                            let opc2 = (instr >> 5) & 3;
                            match (opc1, L, opc2) {
                                (x0, x1, _) if x0 & 4 == 0 && x1 == 0 => Some(Instr::VmovRsA1 {
                                    cond: cond as _,
                                    Vn: Vn as _,
                                    Rt: Rt as _,
                                    N: N as _,
                                }),
                                (_, x1, _) if x1 == 1 => Some(Instr::VmovSrA1 {
                                    cond: cond as _,
                                    Vn: Vn as _,
                                    Rt: Rt as _,
                                    N: N as _,
                                }),
                                (x0, x1, x2) if x0 & 4 == 4 && x1 == 0 && x2 & 2 == 0 => {
                                    Some(Instr::VdupRA1 {
                                        cond: cond as _,
                                        Vn: Vn as _,
                                        Rt: Rt as _,
                                        N: N as _,
                                    })
                                }
                                (x0, x1, x2) if x0 & 4 == 4 && x1 == 0 && x2 & 2 == 2 => None,
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                _ => None,
            }
        }
        (x0, x1, _, _, _) if x0 == 15 && x1 & 4 == 0 => {
            match (
                (instr >> 27) & 31,
                (instr >> 25) & 3,
                (instr >> 21) & 15,
                (instr >> 20) & 1,
                instr & 1048575,
            ) {
                (_, x1, _, _, _) if x1 == 0 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 20) & 31,
                        (instr >> 8) & 4095,
                        (instr >> 4) & 15,
                        instr & 15,
                    ) {
                        (_, x1, _, _, _) if x1 & 16 == 0 => None,
                        (_, x1, _, x3, _) if x1 == 16 && x3 & 2 == 0 => {
                            let imod = (instr >> 18) & 3;
                            let M = (instr >> 17) & 1;
                            let op = (instr >> 16) & 1;
                            let E = (instr >> 9) & 1;
                            let A = (instr >> 8) & 1;
                            let I = (instr >> 7) & 1;
                            let F = (instr >> 6) & 1;
                            let mode = instr & 31;
                            match (imod, M, op, mode) {
                                (_, _, x2, x3) if x2 == 1 && x3 & 16 == 0 => {
                                    Some(Instr::SetendA1 {
                                        E: E as _,
                                        A: A as _,
                                        I: I as _,
                                        F: F as _,
                                    })
                                }
                                (_, _, x2, _) if x2 == 0 => Some(Instr::CpsidA1Asm {
                                    E: E as _,
                                    A: A as _,
                                    I: I as _,
                                    F: F as _,
                                }),
                                (_, _, x2, x3) if x2 == 1 && x3 & 16 == 16 => None,
                                _ => None,
                            }
                        }
                        (_, x1, _, x3, _) if x1 == 17 && x3 == 8 => None,
                        (_, x1, _, x3, _) if x1 == 17 && x3 & 7 == 4 => None,
                        (_, x1, _, x3, _) if x1 == 17 && x3 & 3 == 1 => None,
                        (_, x1, _, x3, _) if x1 == 17 && x3 == 0 => {
                            let imm1 = (instr >> 9) & 1;
                            match () {
                                () => Some(Instr::SetpanA1 { imm1: imm1 as _ }),
                            }
                        }
                        (_, x1, _, x3, _) if x1 & 30 == 16 && x3 == 7 => None,
                        (_, x1, _, x3, _) if x1 == 18 && x3 == 7 => None,
                        (_, x1, _, x3, _) if x1 == 19 && x3 == 7 => None,
                        (_, x1, _, x3, _) if x1 & 30 == 18 && x3 & 2 == 0 => None,
                        (_, x1, _, x3, _) if x1 & 28 == 16 && x3 == 3 => None,
                        (_, x1, _, x3, _) if x1 & 28 == 16 && x3 & 11 == 2 => None,
                        (_, x1, _, x3, _) if x1 & 28 == 16 && x3 & 10 == 10 => None,
                        (_, x1, _, _, _) if x1 & 28 == 20 => None,
                        (_, x1, _, _, _) if x1 & 24 == 24 => None,
                        _ => None,
                    }
                }
                (_, x1, _, _, _) if x1 == 1 => {
                    match (
                        (instr >> 25) & 127,
                        (instr >> 24) & 1,
                        (instr >> 23) & 1,
                        (instr >> 5) & 262143,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, _, x2, _, _, _) if x2 == 0 => {
                            let U = (instr >> 24) & 1;
                            let D = (instr >> 22) & 1;
                            let size = (instr >> 20) & 3;
                            let Vn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let opc = (instr >> 8) & 15;
                            let N = (instr >> 7) & 1;
                            let Q = (instr >> 6) & 1;
                            let M = (instr >> 5) & 1;
                            let o1 = (instr >> 4) & 1;
                            let Vm = instr & 15;
                            match (U, size, opc, Q, o1) {
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 12 && x4 == 1 =>
                                {
                                    Some(Instr::VfmaA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 13 && x4 == 0 =>
                                {
                                    Some(Instr::VaddFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 13 && x4 == 1 =>
                                {
                                    Some(Instr::VmlaFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 14 && x4 == 0 =>
                                {
                                    Some(Instr::VceqRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 15 && x4 == 0 =>
                                {
                                    Some(Instr::VmaxFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 0 && x2 == 15 && x4 == 1 =>
                                {
                                    Some(Instr::VrecpsA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 0 && x4 == 0 => Some(Instr::VhaddA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4) if x0 == 0 && x1 == 0 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VandRA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 0 && x4 == 1 => Some(Instr::VqaddA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2, _, x4) if x2 == 1 && x4 == 0 => Some(Instr::VrhaddA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 == 0 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha1CA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 2 && x4 == 0 => Some(Instr::VhsubA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4) if x0 == 0 && x1 == 1 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VbicRA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 2 && x4 == 1 => Some(Instr::VqsubA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2, _, x4) if x2 == 3 && x4 == 0 => {
                                    Some(Instr::VcgtRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 3 && x4 == 1 => {
                                    Some(Instr::VcgeRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 == 1 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha1PA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 12 && x4 == 1 =>
                                {
                                    Some(Instr::VfmsA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 13 && x4 == 0 =>
                                {
                                    Some(Instr::VsubFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 13 && x4 == 1 =>
                                {
                                    Some(Instr::VmlsFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 14 && x4 == 0 =>
                                {
                                    None
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 15 && x4 == 0 =>
                                {
                                    Some(Instr::VminFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 & 2 == 2 && x2 == 15 && x4 == 1 =>
                                {
                                    Some(Instr::VrsqrtsA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 4 && x4 == 0 => Some(Instr::VshlRA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2, _, x4) if x0 == 0 && x2 == 8 && x4 == 0 => {
                                    Some(Instr::VaddIA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4) if x0 == 0 && x1 == 2 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VorrRA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 0 && x2 == 8 && x4 == 1 => {
                                    Some(Instr::VtstA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 4 && x4 == 1 => Some(Instr::VqshlRA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2, _, x4) if x0 == 0 && x2 == 9 && x4 == 0 => {
                                    Some(Instr::VmlaIA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 5 && x4 == 0 => Some(Instr::VrshlA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2, _, x4) if x2 == 5 && x4 == 1 => Some(Instr::VqrshlA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, _, x2, _, x4) if x0 == 0 && x2 == 11 && x4 == 0 => {
                                    Some(Instr::VqdmulhA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 == 2 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha1MA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 0 && x2 == 11 && x4 == 1 => {
                                    Some(Instr::VpaddIA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 6 && x4 == 0 => Some(Instr::VmaxIA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4) if x0 == 0 && x1 == 3 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VornRA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 6 && x4 == 1 => Some(Instr::VminIA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2, _, x4) if x2 == 7 && x4 == 0 => Some(Instr::VabdIA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (_, _, x2, _, x4) if x2 == 7 && x4 == 1 => Some(Instr::VabaA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4)
                                    if x0 == 0 && x1 == 3 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha1Su0A1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 13 && x4 == 0 =>
                                {
                                    Some(Instr::VpaddFA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 13 && x4 == 1 =>
                                {
                                    Some(Instr::VmulFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 14 && x4 == 0 =>
                                {
                                    Some(Instr::VcgeRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 14 && x4 == 1 =>
                                {
                                    Some(Instr::VacgeA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 15 && x3 == 0 && x4 == 0 =>
                                {
                                    Some(Instr::VpmaxFA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 0 && x2 == 15 && x4 == 1 =>
                                {
                                    Some(Instr::VmaxnmA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4) if x0 == 1 && x1 == 0 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VeorA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, _, x4) if x2 == 9 && x4 == 1 => Some(Instr::VmulIA1Q {
                                    D: D as _,
                                    Vn: Vn as _,
                                    Vd: Vd as _,
                                    N: N as _,
                                    M: M as _,
                                    Vm: Vm as _,
                                }),
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 == 0 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha256HA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, x3, x4) if x2 == 10 && x3 == 0 && x4 == 0 => {
                                    Some(Instr::VpmaxIA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4) if x0 == 1 && x1 == 1 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VbslA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, x3, x4) if x2 == 10 && x3 == 0 && x4 == 1 => {
                                    Some(Instr::VpminIA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (_, _, x2, x3, _) if x2 == 10 && x3 == 1 => None,
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 == 1 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha256H2A1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 2 && x2 == 13 && x4 == 0 =>
                                {
                                    Some(Instr::VabdFA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 2 && x2 == 14 && x4 == 0 =>
                                {
                                    Some(Instr::VcgtRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 2 && x2 == 14 && x4 == 1 =>
                                {
                                    Some(Instr::VacgtA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, x3, x4)
                                    if x0 == 1 && x1 & 2 == 2 && x2 == 15 && x3 == 0 && x4 == 0 =>
                                {
                                    Some(Instr::VpminFA1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 & 2 == 2 && x2 == 15 && x4 == 1 =>
                                {
                                    Some(Instr::VminnmA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 8 && x4 == 0 => {
                                    Some(Instr::VsubIA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4) if x0 == 1 && x1 == 2 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VbitA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 8 && x4 == 1 => {
                                    Some(Instr::VceqRT1A1A {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 9 && x4 == 0 => {
                                    Some(Instr::VmlsIA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 11 && x4 == 0 => {
                                    Some(Instr::VqrdmulhA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4)
                                    if x0 == 1 && x1 == 2 && x2 == 12 && x4 == 0 =>
                                {
                                    Some(Instr::Sha256Su1A1 {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 11 && x4 == 1 => {
                                    Some(Instr::VqrdmlahA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, x1, x2, _, x4) if x0 == 1 && x1 == 3 && x2 == 1 && x4 == 1 => {
                                    Some(Instr::VbifA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, _, x4) if x0 == 1 && x2 == 12 && x4 == 1 => {
                                    Some(Instr::VqrdmlshA1Q {
                                        D: D as _,
                                        Vn: Vn as _,
                                        Vd: Vd as _,
                                        N: N as _,
                                        M: M as _,
                                        Vm: Vm as _,
                                    })
                                }
                                (x0, _, x2, x3, x4)
                                    if x0 == 1 && x2 == 15 && x3 == 1 && x4 == 0 =>
                                {
                                    None
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _) if x2 == 1 && x4 == 0 => {
                            match (
                                (instr >> 25) & 127,
                                (instr >> 24) & 1,
                                (instr >> 23) & 1,
                                (instr >> 22) & 1,
                                (instr >> 20) & 3,
                                (instr >> 12) & 255,
                                (instr >> 10) & 3,
                                (instr >> 7) & 7,
                                (instr >> 6) & 1,
                                (instr >> 5) & 1,
                                (instr >> 4) & 1,
                                instr & 15,
                            ) {
                                (_, x1, _, _, x4, _, _, _, _, _, _, _) if x1 == 0 && x4 == 3 => {
                                    let D = (instr >> 22) & 1;
                                    let Vn = (instr >> 16) & 15;
                                    let Vd = (instr >> 12) & 15;
                                    let imm4 = (instr >> 8) & 15;
                                    let N = (instr >> 7) & 1;
                                    let Q = (instr >> 6) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match () {
                                        () => Some(Instr::VextA1Q {
                                            D: D as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            imm4: imm4 as _,
                                            N: N as _,
                                            Q: Q as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                    }
                                }
                                (_, x1, _, _, x4, _, x6, _, _, _, _, _)
                                    if x1 == 1 && x4 == 3 && x6 & 2 == 0 =>
                                {
                                    let D = (instr >> 22) & 1;
                                    let size = (instr >> 18) & 3;
                                    let opc1 = (instr >> 16) & 3;
                                    let Vd = (instr >> 12) & 15;
                                    let opc2 = (instr >> 7) & 15;
                                    let Q = (instr >> 6) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match (size, opc1, opc2, Q) {
                                        (_, x1, x2, _) if x1 == 0 && x2 == 0 => {
                                            Some(Instr::Vrev64A1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 1 => {
                                            Some(Instr::Vrev32A1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 2 => {
                                            Some(Instr::Vrev16A1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 3 => None,
                                        (_, x1, x2, _) if x1 == 0 && x2 & 14 == 4 => {
                                            Some(Instr::VpaddlA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 0 && x2 == 6 && x3 == 0 => {
                                            Some(Instr::AeseA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 0 && x2 == 6 && x3 == 1 => {
                                            Some(Instr::AesdA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 0 && x2 == 7 && x3 == 0 => {
                                            Some(Instr::AesmcA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 0 && x2 == 7 && x3 == 1 => {
                                            Some(Instr::AesimcA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 8 => {
                                            Some(Instr::VclsA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 0 => {
                                            Some(Instr::VswpA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 9 => {
                                            Some(Instr::VclzA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 10 => {
                                            Some(Instr::VcntA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 11 => {
                                            Some(Instr::VmvnRA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, x2, x3)
                                            if x0 == 0 && x1 == 2 && x2 == 12 && x3 == 1 =>
                                        {
                                            None
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 & 14 == 12 => {
                                            Some(Instr::VpadalA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 14 => {
                                            Some(Instr::VqabsA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 0 && x2 == 15 => {
                                            Some(Instr::VqnegA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 0 => {
                                            Some(Instr::VcgtIA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 1 => {
                                            Some(Instr::VcgeIA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 2 => {
                                            Some(Instr::VceqIA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 3 => {
                                            Some(Instr::VcleIA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 4 => {
                                            Some(Instr::VcltIA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 6 => {
                                            Some(Instr::VabsA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 1 && x2 & 7 == 7 => {
                                            Some(Instr::VnegA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 1 && x2 == 5 && x3 == 1 => {
                                            Some(Instr::Sha1HA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, x2, x3)
                                            if x0 == 1 && x1 == 2 && x2 == 12 && x3 == 1 =>
                                        {
                                            Some(Instr::VcvtBfsA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 1 => {
                                            Some(Instr::VtrnA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 2 => {
                                            Some(Instr::VuzpA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 3 => {
                                            Some(Instr::VzipA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 4 && x3 == 0 => {
                                            Some(Instr::VmovnA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 4 && x3 == 1 => {
                                            Some(Instr::VqmovunA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 5 => {
                                            Some(Instr::VqmovnA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 6 && x3 == 0 => {
                                            Some(Instr::VshllA2 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 7 && x3 == 0 => {
                                            Some(Instr::Sha1Su1A1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 7 && x3 == 1 => {
                                            Some(Instr::Sha256Su0A1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 8 => {
                                            Some(Instr::VrintnAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 9 => {
                                            Some(Instr::VrintxAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 10 => {
                                            Some(Instr::VrintaAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 11 => {
                                            Some(Instr::VrintzAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, x2, x3)
                                            if x0 == 2 && x1 == 2 && x2 == 12 && x3 == 1 =>
                                        {
                                            None
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 12 && x3 == 0 => {
                                            Some(Instr::VcvtHsA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 2 && x2 == 13 => {
                                            Some(Instr::VrintmAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 14 && x3 == 0 => {
                                            Some(Instr::VcvtShA1 {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3) if x1 == 2 && x2 == 14 && x3 == 1 => None,
                                        (_, x1, x2, _) if x1 == 2 && x2 == 15 => {
                                            Some(Instr::VrintpAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 14 == 0 => {
                                            Some(Instr::VcvtaAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 14 == 2 => {
                                            Some(Instr::VcvtnAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 14 == 4 => {
                                            Some(Instr::VcvtpAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 14 == 6 => {
                                            Some(Instr::VcvtmAsimdA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 13 == 8 => {
                                            Some(Instr::VrecpeA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 13 == 9 => {
                                            Some(Instr::VrsqrteA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, x2, x3)
                                            if x0 == 3 && x1 == 2 && x2 == 12 && x3 == 1 =>
                                        {
                                            None
                                        }
                                        (_, x1, x2, _) if x1 == 3 && x2 & 12 == 12 => {
                                            Some(Instr::VcvtIsA1Q {
                                                D: D as _,
                                                Vd: Vd as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        _ => None,
                                    }
                                }
                                (_, x1, _, _, x4, _, x6, _, _, _, _, _)
                                    if x1 == 1 && x4 == 3 && x6 == 2 =>
                                {
                                    let D = (instr >> 22) & 1;
                                    let Vn = (instr >> 16) & 15;
                                    let Vd = (instr >> 12) & 15;
                                    let len = (instr >> 8) & 3;
                                    let N = (instr >> 7) & 1;
                                    let op = (instr >> 6) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match () {
                                        () => Some(Instr::VtbxA1 {
                                            D: D as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            len: len as _,
                                            N: N as _,
                                            op: op as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                    }
                                }
                                (_, x1, _, _, x4, _, x6, _, _, _, _, _)
                                    if x1 == 1 && x4 == 3 && x6 == 3 =>
                                {
                                    let D = (instr >> 22) & 1;
                                    let imm4 = (instr >> 16) & 15;
                                    let Vd = (instr >> 12) & 15;
                                    let opc = (instr >> 7) & 7;
                                    let Q = (instr >> 6) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match opc {
                                        x0 if x0 == 0 => Some(Instr::VdupSA1Q {
                                            D: D as _,
                                            imm4: imm4 as _,
                                            Vd: Vd as _,
                                            Q: Q as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        x0 if x0 == 1 => None,
                                        x0 if x0 & 6 == 2 => None,
                                        x0 if x0 & 4 == 4 => None,
                                        _ => None,
                                    }
                                }
                                (_, _, _, _, x4, _, _, _, x8, _, _, _) if x4 != 3 && x8 == 0 => {
                                    let U = (instr >> 24) & 1;
                                    let D = (instr >> 22) & 1;
                                    let size = (instr >> 20) & 3;
                                    let Vn = (instr >> 16) & 15;
                                    let Vd = (instr >> 12) & 15;
                                    let opc = (instr >> 8) & 15;
                                    let N = (instr >> 7) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match (U, opc) {
                                        (_, x1) if x1 == 0 => Some(Instr::VaddlA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 1 => Some(Instr::VaddwA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 2 => Some(Instr::VsublA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 4 => Some(Instr::VaddhnA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 3 => Some(Instr::VsubwA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::VsubhnA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 9 => Some(Instr::VqdmlalA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 5 => Some(Instr::VabalA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 11 => Some(Instr::VqdmlslA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 13 => Some(Instr::VqdmullA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 7 => Some(Instr::VabdlIA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 8 => Some(Instr::VmlalIA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 10 => Some(Instr::VmlslIA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 4 => Some(Instr::VraddhnA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::VrsubhnA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 & 13 == 12 => Some(Instr::VmullIA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 9 => None,
                                        (x0, x1) if x0 == 1 && x1 == 11 => None,
                                        (x0, x1) if x0 == 1 && x1 == 13 => None,
                                        (_, x1) if x1 == 15 => None,
                                        _ => None,
                                    }
                                }
                                (_, _, _, _, x4, _, _, _, x8, _, _, _) if x4 != 3 && x8 == 1 => {
                                    let Q = (instr >> 24) & 1;
                                    let D = (instr >> 22) & 1;
                                    let size = (instr >> 20) & 3;
                                    let Vn = (instr >> 16) & 15;
                                    let Vd = (instr >> 12) & 15;
                                    let opc = (instr >> 8) & 15;
                                    let N = (instr >> 7) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match (Q, opc) {
                                        (_, x1) if x1 & 14 == 0 => Some(Instr::VmlaSA1Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::VqdmlalA2 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 2 => Some(Instr::VmlalSA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::VqdmlslA2 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 & 14 == 4 => Some(Instr::VmlsSA1Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 0 && x1 == 11 => Some(Instr::VqdmullA2 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 6 => Some(Instr::VmlslSA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 & 14 == 8 => Some(Instr::VmulSA1Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 3 => None,
                                        (_, x1) if x1 == 10 => Some(Instr::VmullSA1 {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 7 => None,
                                        (_, x1) if x1 == 12 => Some(Instr::VqdmulhA2Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 13 => Some(Instr::VqrdmulhA2Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (x0, x1) if x0 == 1 && x1 == 11 => None,
                                        (_, x1) if x1 == 14 => Some(Instr::VqrdmlahA2Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        (_, x1) if x1 == 15 => Some(Instr::VqrdmlshA2Q {
                                            D: D as _,
                                            size: size as _,
                                            Vn: Vn as _,
                                            Vd: Vd as _,
                                            N: N as _,
                                            M: M as _,
                                            Vm: Vm as _,
                                        }),
                                        _ => None,
                                    }
                                }
                                _ => None,
                            }
                        }
                        (_, _, x2, _, x4, _) if x2 == 1 && x4 == 1 => {
                            match (
                                (instr >> 25) & 127,
                                (instr >> 24) & 1,
                                (instr >> 23) & 1,
                                (instr >> 22) & 1,
                                (instr >> 7) & 32767,
                                (instr >> 5) & 3,
                                (instr >> 4) & 1,
                                instr & 15,
                            ) {
                                (_, _, _, _, x4, _, _, _) if x4 & 28673 == 0 => {
                                    let i = (instr >> 24) & 1;
                                    let D = (instr >> 22) & 1;
                                    let imm3 = (instr >> 16) & 7;
                                    let Vd = (instr >> 12) & 15;
                                    let cmode = (instr >> 8) & 15;
                                    let Q = (instr >> 6) & 1;
                                    let op = (instr >> 5) & 1;
                                    let imm4 = instr & 15;
                                    match (cmode, op) {
                                        (x0, x1) if x0 & 9 == 0 && x1 == 0 => {
                                            Some(Instr::VmovIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 9 == 0 && x1 == 1 => {
                                            Some(Instr::VmvnIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 9 == 1 && x1 == 0 => {
                                            Some(Instr::VorrIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 9 == 1 && x1 == 1 => {
                                            Some(Instr::VbicIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 13 == 8 && x1 == 0 => {
                                            Some(Instr::VmovIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 13 == 8 && x1 == 1 => {
                                            Some(Instr::VmvnIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 13 == 9 && x1 == 0 => {
                                            Some(Instr::VorrIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 13 == 9 && x1 == 1 => {
                                            Some(Instr::VbicIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 12 == 12 && x1 == 0 => {
                                            Some(Instr::VmovIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 & 14 == 12 && x1 == 1 => {
                                            Some(Instr::VmvnIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 == 14 && x1 == 1 => {
                                            Some(Instr::VmovIT1A1A {
                                                i: i as _,
                                                D: D as _,
                                                imm3: imm3 as _,
                                                Vd: Vd as _,
                                                Q: Q as _,
                                                imm4: imm4 as _,
                                            })
                                        }
                                        (x0, x1) if x0 == 15 && x1 == 1 => None,
                                        _ => None,
                                    }
                                }
                                (_, _, _, _, x4, _, _, _) if x4 & 28673 != 0 => {
                                    let U = (instr >> 24) & 1;
                                    let D = (instr >> 22) & 1;
                                    let imm3H = (instr >> 19) & 7;
                                    let imm3L = (instr >> 16) & 7;
                                    let Vd = (instr >> 12) & 15;
                                    let opc = (instr >> 8) & 15;
                                    let L = (instr >> 7) & 1;
                                    let Q = (instr >> 6) & 1;
                                    let M = (instr >> 5) & 1;
                                    let Vm = instr & 15;
                                    match (U, (imm3H << 1) | L, imm3L, opc, Q) {
                                        (_, x1, _, x3, _) if x1 != 0 && x3 == 0 => {
                                            Some(Instr::VshrA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, _) if x1 != 0 && x3 == 1 => {
                                            Some(Instr::VsraA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, x2, x3, x4)
                                            if x1 != 0 && x2 == 0 && x3 == 10 && x4 == 0 =>
                                        {
                                            Some(Instr::VmovlA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, _) if x1 != 0 && x3 == 2 => {
                                            Some(Instr::VrshrA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, _) if x1 != 0 && x3 == 3 => {
                                            Some(Instr::VrsraA1D {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, _) if x1 != 0 && x3 == 7 => {
                                            Some(Instr::VqshlIA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, x4) if x1 != 0 && x3 == 9 && x4 == 0 => {
                                            Some(Instr::VqshrnA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, x4) if x1 != 0 && x3 == 9 && x4 == 1 => {
                                            Some(Instr::VqrshrnA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, x4) if x1 != 0 && x3 == 10 && x4 == 0 => {
                                            Some(Instr::VshllA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (_, x1, _, x3, _) if x1 != 0 && x3 & 12 == 12 => {
                                            Some(Instr::VcvtXsA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, _) if x0 == 0 && x1 != 0 && x3 == 5 => {
                                            Some(Instr::VshlIA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, x4)
                                            if x0 == 0 && x1 != 0 && x3 == 8 && x4 == 0 =>
                                        {
                                            Some(Instr::VshrnA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, x4)
                                            if x0 == 0 && x1 != 0 && x3 == 8 && x4 == 1 =>
                                        {
                                            Some(Instr::VrshrnA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, _) if x0 == 1 && x1 != 0 && x3 == 4 => {
                                            Some(Instr::VsriA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, _) if x0 == 1 && x1 != 0 && x3 == 5 => {
                                            Some(Instr::VsliA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, _) if x0 == 1 && x1 != 0 && x3 == 6 => {
                                            Some(Instr::VqshluIA1Q {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, x4)
                                            if x0 == 1 && x1 != 0 && x3 == 8 && x4 == 0 =>
                                        {
                                            Some(Instr::VqshrunA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        (x0, x1, _, x3, x4)
                                            if x0 == 1 && x1 != 0 && x3 == 8 && x4 == 1 =>
                                        {
                                            Some(Instr::VqrshrunA1 {
                                                D: D as _,
                                                imm3H: imm3H as _,
                                                Vd: Vd as _,
                                                L: L as _,
                                                M: M as _,
                                                Vm: Vm as _,
                                            })
                                        }
                                        _ => None,
                                    }
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, x1, _, x3, _) if x1 & 2 == 2 && x3 == 1 => {
                    match (
                        (instr >> 26) & 63,
                        (instr >> 21) & 31,
                        (instr >> 20) & 1,
                        (instr >> 5) & 32767,
                        (instr >> 4) & 1,
                        instr & 15,
                    ) {
                        (_, x1, _, _, _, _) if x1 & 25 == 1 => None,
                        (_, x1, _, _, _, _) if x1 == 9 => None,
                        (_, x1, _, _, _, _) if x1 == 11 => {
                            let opcode = (instr >> 4) & 15;
                            let option = instr & 15;
                            match (opcode, option) {
                                (x0, _) if x0 == 0 => None,
                                (x0, _) if x0 == 1 => Some(Instr::ClrexA1),
                                (x0, _) if x0 & 14 == 2 => None,
                                (x0, x1) if x0 == 4 && x1 & 11 != 0 => Some(Instr::DsbA1),
                                (x0, x1) if x0 == 4 && x1 == 0 => Some(Instr::SsbbA1),
                                (x0, x1) if x0 == 4 && x1 == 4 => Some(Instr::PssbbA1),
                                (x0, _) if x0 == 5 => Some(Instr::DmbA1),
                                (x0, _) if x0 == 6 => Some(Instr::IsbA1),
                                (x0, _) if x0 == 7 => Some(Instr::SbA1),
                                (x0, _) if x0 & 8 == 8 => None,
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, _) if x1 & 29 == 13 => None,
                        (_, x1, _, _, _, _) if x1 & 17 == 0 => {
                            let D = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let R = (instr >> 22) & 1;
                            let Rn = (instr >> 16) & 15;
                            let imm12 = instr & 4095;
                            match (D, R, Rn) {
                                (x0, x1, _) if x0 == 0 && x1 == 0 => Some(Instr::Nop),
                                (x0, x1, _) if x0 == 0 && x1 == 1 => Some(Instr::PliIA1 {
                                    U: U as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, _, x2) if x0 == 1 && x2 == 15 => Some(Instr::PldLA1 {
                                    U: U as _,
                                    imm12: imm12 as _,
                                }),
                                (x0, x1, x2) if x0 == 1 && x1 == 0 && x2 != 15 => {
                                    Some(Instr::PldwIA1 {
                                        U: U as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 1 && x2 != 15 => {
                                    Some(Instr::PldIA1 {
                                        U: U as _,
                                        imm12: imm12 as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        (_, x1, _, _, x4, _) if x1 & 17 == 16 && x4 == 0 => {
                            let D = (instr >> 24) & 1;
                            let U = (instr >> 23) & 1;
                            let o2 = (instr >> 22) & 1;
                            let Rn = (instr >> 16) & 15;
                            let imm5 = (instr >> 7) & 31;
                            let stype = (instr >> 5) & 3;
                            let Rm = instr & 15;
                            match (D, o2) {
                                (x0, x1) if x0 == 0 && x1 == 0 => Some(Instr::Nop),
                                (x0, x1) if x0 == 0 && x1 == 1 => Some(Instr::PliRA1Rrx {
                                    U: U as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 0 => Some(Instr::PldwRA1Rrx {
                                    U: U as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 1 => Some(Instr::PldRA1Rrx {
                                    U: U as _,
                                    Rn: Rn as _,
                                    imm5: imm5 as _,
                                    stype: stype as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, x4, _) if x1 & 17 == 17 && x4 == 0 => None,
                        (_, x1, _, _, x4, _) if x1 & 16 == 16 && x4 == 1 => None,
                        _ => None,
                    }
                }
                (_, x1, _, x3, _) if x1 == 2 && x3 == 0 => {
                    match (
                        (instr >> 24) & 255,
                        (instr >> 23) & 1,
                        (instr >> 21) & 3,
                        (instr >> 20) & 1,
                        (instr >> 12) & 255,
                        (instr >> 10) & 3,
                        instr & 1023,
                    ) {
                        (_, x1, _, _, _, _, _) if x1 == 0 => {
                            let D = (instr >> 22) & 1;
                            let L = (instr >> 21) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let itype = (instr >> 8) & 15;
                            let size = (instr >> 6) & 3;
                            let align = (instr >> 4) & 3;
                            let Rm = instr & 15;
                            match (L, itype) {
                                (x0, x1) if x0 == 0 && x1 & 14 == 0 => Some(Instr::Vst4MA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 2 => Some(Instr::Vst1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 3 => Some(Instr::Vst2MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 14 == 4 => Some(Instr::Vst3MA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 6 => Some(Instr::Vst1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 7 => Some(Instr::Vst1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 & 14 == 8 => Some(Instr::Vst2MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 0 && x1 == 10 => Some(Instr::Vst1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 & 14 == 0 => Some(Instr::Vld4MA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 2 => Some(Instr::Vld1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 3 => Some(Instr::Vld2MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 & 14 == 4 => Some(Instr::Vld3MA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (_, x1) if x1 == 11 => None,
                                (x0, x1) if x0 == 1 && x1 == 6 => Some(Instr::Vld1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 7 => Some(Instr::Vld1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (_, x1) if x1 & 12 == 12 => None,
                                (x0, x1) if x0 == 1 && x1 & 14 == 8 => Some(Instr::Vld2MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1) if x0 == 1 && x1 == 10 => Some(Instr::Vld1MT1A1A {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    align: align as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, x5, _) if x1 == 1 && x5 == 3 => {
                            let D = (instr >> 22) & 1;
                            let L = (instr >> 21) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let N = (instr >> 8) & 3;
                            let size = (instr >> 6) & 3;
                            let T = (instr >> 5) & 1;
                            let a = (instr >> 4) & 1;
                            let Rm = instr & 15;
                            match (L, N, a) {
                                (x0, _, _) if x0 == 0 => None,
                                (x0, x1, _) if x0 == 1 && x1 == 0 => Some(Instr::Vld1AA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    T: T as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1, _) if x0 == 1 && x1 == 1 => Some(Instr::Vld2AA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    T: T as _,
                                    Rm: Rm as _,
                                }),
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::Vld3AA1Posti {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        size: size as _,
                                        T: T as _,
                                        Rm: Rm as _,
                                    })
                                }
                                (x0, x1, x2) if x0 == 1 && x1 == 2 && x2 == 1 => None,
                                (x0, x1, _) if x0 == 1 && x1 == 3 => Some(Instr::Vld4AA1Posti {
                                    D: D as _,
                                    Rn: Rn as _,
                                    Vd: Vd as _,
                                    size: size as _,
                                    T: T as _,
                                    Rm: Rm as _,
                                }),
                                _ => None,
                            }
                        }
                        (_, x1, _, _, _, x5, _) if x1 == 1 && x5 != 3 => {
                            let D = (instr >> 22) & 1;
                            let L = (instr >> 21) & 1;
                            let Rn = (instr >> 16) & 15;
                            let Vd = (instr >> 12) & 15;
                            let size = (instr >> 10) & 3;
                            let N = (instr >> 8) & 3;
                            let index_align = (instr >> 4) & 15;
                            let Rm = instr & 15;
                            match (L, size, N, Rm) {
                                (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Vst11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Vst21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 2 => {
                                    Some(Instr::Vst31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 0 && x2 == 3 => {
                                    Some(Instr::Vst41A1Posti {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Vst11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Vst21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 2 => {
                                    Some(Instr::Vst31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 1 && x2 == 3 => {
                                    Some(Instr::Vst41A2Posti {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::Vst11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::Vst21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 0 && x1 == 2 && x2 == 2 => {
                                    Some(Instr::Vst31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, x3)
                                    if x0 == 0 && x1 == 2 && x2 == 3 && x3 & 13 != 13 =>
                                {
                                    Some(Instr::Vst41A3Postr {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 2 && x2 == 3 && x3 == 13 => {
                                    Some(Instr::Vst41A3Posti {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, x3) if x0 == 0 && x1 == 2 && x2 == 3 && x3 == 15 => {
                                    Some(Instr::Vst41A3Nowb {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 0 => {
                                    Some(Instr::Vld11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 1 => {
                                    Some(Instr::Vld21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 2 => {
                                    Some(Instr::Vld31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 0 && x2 == 3 => {
                                    Some(Instr::Vld41T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 0 => {
                                    Some(Instr::Vld11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 1 => {
                                    Some(Instr::Vld21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 2 => {
                                    Some(Instr::Vld31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 1 && x2 == 3 => {
                                    Some(Instr::Vld41T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 0 => {
                                    Some(Instr::Vld11T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 1 => {
                                    Some(Instr::Vld21T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 2 => {
                                    Some(Instr::Vld31T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                (x0, x1, x2, _) if x0 == 1 && x1 == 2 && x2 == 3 => {
                                    Some(Instr::Vld41T1A1A {
                                        D: D as _,
                                        Rn: Rn as _,
                                        Vd: Vd as _,
                                        index_align: index_align as _,
                                    })
                                }
                                _ => None,
                            }
                        }
                        _ => None,
                    }
                }
                (_, x1, _, x3, _) if x1 == 3 && x3 == 0 => None,
                _ => None,
            }
        }
        _ => None,
    }
} // end of decoding A32

#[allow(non_snake_case)]
#[derive(Debug, PartialEq, Clone)]
pub enum Instr {
    Adcs32AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sm3Partw1Vvv4Cryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StlxpSp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FnmulSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VudotA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1AsisdlsoB11B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    OrrsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    Ldumax32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrZBi {
        imm9h: u8,
        imm9l: u8,
        Rn: u8,
        Zt: u8,
    },
    StrDLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    UxtahA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    MsrIA1As {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    Ld4AsisdlsopS4I4S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    UhsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Sha1Su0VvvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldumaxl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcpyZPI {
        size: u8,
        Pg: u8,
        imm8: u8,
        Zd: u8,
    },
    Ld3AsisdlseR3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    SaddlvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    ScvtfZPZX2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    VminFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldrh32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    FtsmulZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    CmplePPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ldff1WZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ldff1WZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Fcvtms64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldsetalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzu32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Fcvtzs32DFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    VabsA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Sha1MA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VinsA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FcvtzuZPZFp162H {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1AsisdlsopSx1R1S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvtrUivA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VshrA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    SubsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ldrb32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldrsb64BlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    StlexbA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    FcvtmsAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    FtsselZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    St1WZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    ScvtfAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    FacgtAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StlrSl64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Uzp1ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    FmaxAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintmSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    IncwRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ld1AsisdlseR22V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RohZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    OrrsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    Orn64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Adds64AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BlxRA1 {
        cond: u8,
        Rm: u8,
    },
    FcvtasAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    AsrZZw {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    CmpgtPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    UqdechRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    UsqaddAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldaddah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    PunpkhiPP {
        Pn: u8,
        Pd: u8,
    },
    StpQLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldtrsb64LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UrsraAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    CaspCp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmeqAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzs32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Fcvtps64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    LdrIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    VfmslSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Eor64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SetpanA1 {
        imm1: u8,
    },
    Ldeorah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3RAsisdlsopR3I {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    CaslbC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldclral32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrsw64Loadlit {
        imm19: u32,
        Rt: u8,
    },
    SunpkloZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1SbZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StxrbSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdnpDLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldraa64WLdstPac {
        S: u8,
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    EorZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    VcmlaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1BZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Sm3Tt1AVvv4Crypto3Imm2 {
        Rm: u8,
        imm2: u8,
        Rn: u8,
        Rd: u8,
    },
    SaddlpAsimdmiscP {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Vld11T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    StmdbA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    UrshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Swplh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Clz32Dp1Src {
        Rd: u8,
    },
    LdaexA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Madd64ADp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    SmusdA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    SqincbRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    St1BZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    FmlaZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldff1ShZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SabdAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmltAsisdmiscFz {
        Rn: u8,
        Rd: u8,
    },
    Fcvtau64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    PliRA1Rrx {
        U: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    UsdotZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldtrsh32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UqsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Ldff1BZPBrU16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VmulSA1Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St2AsisdlsepR2R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    ScvtfAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld3AsisdlsopD3I3D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Vld3AA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        T: u8,
        Rm: u8,
    },
    LdxrhLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Vld2MT1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    SdotZZzziD {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    FcvtasAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Adds64SAddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    Ldff1BZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    FcaddAsimdsame2C {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdmulhAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fmov64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    FccmpeHFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    VmovTossA1 {
        cond: u8,
        Rt2: u8,
        Rt: u8,
        M: u8,
        Vm: u8,
    },
    Vld3MA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    Ld4AsisdlsepR4R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Sm4EkeyVvv4Cryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdmUA1As {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    Crc32HA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    SyslRcSysteminstrs {
        op1: u8,
        CRn: u8,
        CRm: u8,
        op2: u8,
        Rt: u8,
    },
    Ld1RohZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldumina64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Rev64AsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtasAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VqdmlalA2 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldsmina32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqdecdRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    LdlarbLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StllrbSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sttr64LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UqdecdRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FmlsZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    Ld1SbZPBrS16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrbIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    SubrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    BicZZz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld4AsisdlsoB44B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    PrfbIPBiS {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Uxtb16A1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    Ld1ShZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CasC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St2AsisdlseR2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrsbIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    WfiHiHints,
    Vst2MT1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    Ldr64LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    FstmdbxA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Ld3AsisdlsepI3I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrBLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UqaddZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    UcvtfAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    MlsAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    FabdAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3AsisdlsopSx3R3S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VpminIA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqrdmlahAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1HZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld4AsisdlsopDx4R4D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VmovlA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    Movn64Movewide {
        imm16: u16,
        Rd: u8,
    },
    Ccmp32CondcmpImm {
        imm5: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    SrsdbA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    LdmibA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    FmlalAsimdelemLh {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    AddsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    St3AsisdlsoD33D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrQLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    CmgeAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VcvtrSivA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldnt1DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqrdmulhAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    MrrcA1 {
        Rt2: u8,
        Rt: u8,
        cp15: u8,
        opc1: u8,
        CRm: u8,
    },
    FccmpSFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    SmmlarA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    StrtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    UqincdRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ld1ShZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    BfmmlaZZzz {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    PrfmPLoadlit {
        imm19: u32,
        Rt: u8,
    },
    Sm3Tt1BVvv4Crypto3Imm2 {
        Rm: u8,
        imm2: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld4DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2AsisdlsoS22S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VmovHA1 {
        cond: u8,
        op: u8,
        Vn: u8,
        Rt: u8,
        N: u8,
    },
    CtermeqRr {
        sz: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldgm64BulkLdsttags {
        Rn: u8,
        Rt: u8,
    },
    DecdRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    CmpltPPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    St2AsisdlsoD22D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FrecpeAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    FcvtzsAsimdshfC {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VacgeA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrintiDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    VpmaxIA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmlsZZzziH {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    FcmgeAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SxthA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    FminnmvAsimdallOnlySd {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    AddsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    FmlaZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    PrfwIPBiS {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    VabdFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VqdmullA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcvtHsFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldrsh64LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FmaxZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    Ldff1WZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SubsSpIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    VfnmaA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdrPBi {
        imm9h: u8,
        imm9l: u8,
        Rn: u8,
        Pt: u8,
    },
    Bfm32MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdecdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    IsbBiBarriers,
    St4AsisdlsopBx4R4B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Csinv32Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    PssbbOnlyBarriers,
    FnegAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    MsrRA1As {
        cond: u8,
        mask: u8,
        Rd: u8,
        m: u8,
        Rn: u8,
    },
    SqdecwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Autiza64ZDp1Src {
        Rd: u8,
    },
    UcvtfD64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldclra64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StpQLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtDhFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    AddsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    LdpDLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1HZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    FmovSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    UqincbRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FrsqrteAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    SqaddZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Stnt1DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    PrfwIPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    CmeqAsisdmiscZ {
        Rn: u8,
        Rd: u8,
    },
    Ldrsb64LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    St1DZPBr {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtps32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    BtiHbHints,
    DupZR {
        size: u8,
        Rn: u8,
        Zd: u8,
    },
    FminnmZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ld2AsisdlsopH2I2H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    St2HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1AsisdlsopD1I1D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Sm4EVv4Cryptosha5122 {
        Rn: u8,
        Rd: u8,
    },
    EorsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    FcvtzuAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Stlur32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SqdmlslAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrhRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    FcmltAsimdmiscFz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    StxrhSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Trn1ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    SmmlaAsimdsame2G {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Stlurh32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FmulAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtmu64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Qsub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    PrfbIPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    SubsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    FcvtpsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    Ldsmax64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    CasC64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    AsrZZi {
        tszh: u8,
        tszl: u8,
        imm3: u8,
        Zn: u8,
        Zd: u8,
    },
    BfmlalAsimdsame2F {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Ld4RAsisdlsopRx4R {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RqwZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Lduminl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Bic32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldclr32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VsubFA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FnmulHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BfmlalbZZzz {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    UxtbZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FrecpxZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    SabdZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    AesmcA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Str32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    ScvtfAsisdshfC {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    SqrshrnAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VummlaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldp64LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    BfdotZZzzi {
        i2: u8,
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldff1DZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St4AsisdlsopD4I4D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    PrfwIPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    FmulxZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    UmaxAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BfmlalAsimdelemF {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    DbgA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    Ldff1DZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtzsAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VmlsFA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrsqrtsAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SmlslAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    ScvtfZPZX2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Autia1716HiHints,
    UrecpeAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SmlalAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsmaxalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sbc64AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SaddvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Msub64ADp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzu64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    StrSLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Sub32AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UunpkloZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    BrknsPPPp {
        Pg: u8,
        Pn: u8,
        Pdm: u8,
    },
    CmplePPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ld1AsisdlsopH1I1H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ands64SLogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    LastaRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Rd: u8,
    },
    OrnAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    ClrexA1,
    AndsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    DechZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Brabz64BranchReg,
    LdrQLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    VqmovnA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldeoralb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sha1PQsvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldpsw64LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    SetendA1 {
        E: u8,
        A: u8,
        I: u8,
        F: u8,
    },
    FabsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    AndZZz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    UqinchRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    SuqaddAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    FmaxSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Smaddl64WaDp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    MlsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    Ld1BZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldrab64LdstPac {
        S: u8,
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Stnt1BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Autdb64PDp1Src {
        Rd: u8,
    },
    SevlHiHints,
    Ldeorl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmaxvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmlaAsimdelemCH {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    NandsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    CntZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld2RAsisdlsopR2I {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FminvAsimdallOnlyH {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmgeAsimdmiscfp16Fz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    TeqIA1 {
        cond: u8,
        Rn: u8,
        imm12: u16,
    },
    PliIA1 {
        U: u8,
        imm12: u16,
    },
    Ld1HZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    EretA1 {
        cond: u8,
    },
    FrintaHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    UqinchZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Zip1ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    CntbRS {
        imm4: u8,
        pattern: u8,
        Rd: u8,
    },
    Ldff1ShZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtns64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Fcvtzu64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    SqdecdRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    VclzA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldeora32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FrsqrteAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulZZziH {
        opc: u8,
        Zn: u8,
        Zd: u8,
    },
    Fjcvtzs32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    ShllAsimdmiscS {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    AutiaspHiHints,
    Fcvtas64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldursb64LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VcvtViA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Subs32SAddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    VuzpA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtzs64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldr64Loadlit {
        imm19: u32,
        Rt: u8,
    },
    SelA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Ld1RbZPBiU32 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VsubIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St4AsisdlsopH4I4H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Uqsub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    UqsubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmpDzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    StrQLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    PldLA1 {
        U: u8,
        imm12: u16,
    },
    LdrsbRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    Ldumaxlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Uhsub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    MvniAsimdimmLHl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    LdaxrLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    AndsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ld4RAsisdlsoR4 {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RodZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VceqIA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VmlslSA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St1AsisdlsepI4I4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    AesmcBCryptoaes {
        Rn: u8,
        Rd: u8,
    },
    FcvtnsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SmlalttA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    Ld3AsisdlsopSx3R3S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    RsbsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ld1WZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Autia64PDp1Src {
        Rd: u8,
    },
    Ldapurb32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Rev3264Dp1Src {
        Rd: u8,
    },
    FcvtzuZPZFp162X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Subp64SDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1RhZPBiU16 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    ShlAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    DupZZi {
        imm2: u8,
        tsz: u8,
        Zn: u8,
        Zd: u8,
    },
    Strb32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    SqrdmlshAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtmu32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    St1DZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    LdaxrLr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrsbIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    CmphsPPZi {
        size: u8,
        imm7: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    FsqrtAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldtrsh64LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldsetl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St3AsisdlsopDx3R3D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3RAsisdlsopRx3R {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FacgeAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmeqAsisdmiscFz {
        Rn: u8,
        Rd: u8,
    },
    FsqrtZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FmovS32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    QsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    St1HZPBr {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsmaxlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SabaAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrexdA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    StrhIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VmlaIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldsetah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Smsubl64WaDp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha512Su1Vvv2Cryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StlxrhSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FminpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AxflagMPstate {
        CRm: u8,
    },
    UqrshrnAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VstmA2 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    VrintnAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    CasaC64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Usada8A1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldnf1HZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UdotAsimdsame2D {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrSLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SrshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha1Su0A1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    TbnzOnlyTestbranch {
        b5: u8,
        b40: u8,
        imm14: u16,
        Rt: u8,
    },
    ScvtfS64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Ldrsw64LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    SqxtunAsisdmiscN {
        Rn: u8,
        Rd: u8,
    },
    Ccmn64CondcmpImm {
        imm5: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Fcvtns64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldursh32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SaddwAsimddiffW {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintmHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    CaslhC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrHLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    SasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Blrab64PBranchReg,
    FcmlaAsimdelemCS {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    UdivrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    SmaxZZi {
        size: u8,
        imm8: u8,
        Zdn: u8,
    },
    DsbA1,
    SturQLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FaddHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmltAsisdmiscfp16Fz {
        Rn: u8,
        Rd: u8,
    },
    FmlaZZzziH {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ld1SbZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    NorPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    SqrshrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Vld1MT1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    VcvtXvA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Xpaci64ZDp1Src {
        Rd: u8,
    },
    Ld1BZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UqaddZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    LdnpSLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    CnotZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UdfOnlyPermUndef {
        imm16: u16,
    },
    FrintaSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldsminal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UqincpRPRX {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    UaddvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    UqxtnAsisdmiscN {
        Rn: u8,
        Rd: u8,
    },
    LdabA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    BrkbPPP {
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    Ld1WZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    UqdechRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldclra32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    TbxAsimdtblL22 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1BZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld2RAsisdlsoR2 {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1DZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Vld41T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    St1HZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    IncdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Fcvtmu64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    BicAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnt1HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqxtnAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Sm3Ss1Vvv4Crypto4 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    StrbIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Blrabz64BranchReg,
    Ld4AsisdlsopBx4R4B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FrecpeZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    St2AsisdlsopDx2R2D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VfnmsA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcmlaZZzziH {
        opc: u8,
        rot: u8,
        Zn: u8,
        Zda: u8,
    },
    FnegDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldff1WZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AesdBCryptoaes {
        Rn: u8,
        Rd: u8,
    },
    Autda64PDp1Src {
        Rd: u8,
    },
    Frint32XSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    VsublA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Add64AddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    LdarLr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    TbxAsimdtblL33 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FsqrtDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Rev64Dp1Src {
        Rd: u8,
    },
    VmlslIA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdrshLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    St1AsisdlseR11V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1WZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AddSpRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ldrsh32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    SqdecbRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    VqnegA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SturHLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    CmnRrA1 {
        cond: u8,
        Rn: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    StrtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Subs64SAddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    St1BZPBzDX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Strb32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SvcExException {
        imm16: u16,
    },
    FrintzHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    PrfwIPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    PrfdIPBiS {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    VrintaAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    EorZZi {
        imm13: u16,
        Zdn: u8,
    },
    Ld4AsisdlsoH44H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3AsisdlsopHx3R3H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtns32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld1DZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Cls64Dp1Src {
        Rd: u8,
    },
    SqaddZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    Sub64AddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    StrhIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VmaxIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LslZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    LdxpLp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldur64LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VcaddA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    MsrBrA1As {
        cond: u8,
        mask: u8,
        Rd: u8,
        m: u8,
        Rn: u8,
    },
    Stz2G64SoffsetLdsttags {
        Rn: u8,
        Rt: u8,
    },
    SqshlAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VtrnA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VrintzVfpA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    StrbtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    SqdmlslAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldrab64WLdstPac {
        S: u8,
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    QsubA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Zip1AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SxtahA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    FminnmpAsisdpairOnlyH {
        Rn: u8,
        Rd: u8,
    },
    Ldursw64LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    TblAsimdtblL33 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UsmmlaAsimdsame2G {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Movk64Movewide {
        imm16: u16,
        Rd: u8,
    },
    Frint64XSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    UcvtfZPZW2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldnf1ShZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VqshlRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqdmlalAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtnuAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    Ldff1SbZPBrS16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    PunpkloPP {
        Pn: u8,
        Pd: u8,
    },
    BrkExException {
        imm16: u16,
    },
    Ld1SwZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1RwZPBiU32 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqrdmulhAsisdelemR {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulAsisdelemRSd {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtnAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    St3AsisdlsopB3I3B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VshrnA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    VqshlIA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    Ld1RobZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintzZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Umsubl64WaDp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    BfmlaltZZzz {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    OrrPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    FrintxDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    SrshrAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    StrbtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    St4AsisdlsoS44S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SqxtunAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    TstRrA1 {
        cond: u8,
        Rn: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    FmaxpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SvcA1 {
        cond: u8,
        imm24: u32,
    },
    Ldff1WZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld3BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtzuZPZFp162W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Sttr32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld1RqhZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SxtabA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    SmuadxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    SqincwRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    AddvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ssub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Uqsub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VdupRA1 {
        cond: u8,
        Vn: u8,
        Rt: u8,
        N: u8,
    },
    FcmgeAsisdmiscfp16Fz {
        Rn: u8,
        Rd: u8,
    },
    Ldsmaxa64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrsh64LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    FmulAsimdelemRhH {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    RfeiaA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    VldmA2 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    CnthRS {
        imm4: u8,
        pattern: u8,
        Rd: u8,
    },
    Ldumaxa64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtnsAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    MlaZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    VcvtnAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VsdotSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Add64AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VmvnRA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    CmplsPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    UcvtfH64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    CmtstAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1AsisdlsepR4R4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    DecwRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    SshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1RshZPBiS32 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1RdZPBiU64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LslZZi {
        tszh: u8,
        tszl: u8,
        imm3: u8,
        Zn: u8,
        Zd: u8,
    },
    Sm3Tt2AVvv4Crypto3Imm2 {
        Rm: u8,
        imm2: u8,
        Rn: u8,
        Rd: u8,
    },
    RevshA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
    },
    VmovSA1 {
        cond: u8,
        op: u8,
        Vn: u8,
        Rt: u8,
        N: u8,
    },
    Ldff1HZPBrU16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldapursh32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SqdmulhAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    VrecpeA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SmladA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    VpmaxFA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    StlrbSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmeqAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UsqaddAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    VqshluIA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    PrfhIPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    AddpAsisdpairOnly {
        Rn: u8,
        Rd: u8,
    },
    VmulIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Autib1716HiHints,
    Subs64AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Stnt1DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VcvtToxvA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SmovAsimdinsXX {
        Rn: u8,
        Rd: u8,
    },
    Dcps2DcException {
        imm16: u16,
    },
    VcvtaAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    St3AsisdlsopD3I3D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    AeseBCryptoaes {
        Rn: u8,
        Rd: u8,
    },
    Ldaddalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    ScvtfZPZX2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    SqincpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    FcvtasAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    AddhnAsimddiffN {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsmaxh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FaddAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrDLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UcvtfH64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    SubZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    SqrshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BfcvtntZPZS2Bf {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    TblZZz1 {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    CmpnePPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    FcvtmsAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Zip2AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrDLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UaddlAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha512H2QqvCryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UsraAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FmovH32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    FminnmpAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SmuadA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    FcvtZPZH2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    PldIA1 {
        U: u8,
        imm12: u16,
    },
    Stnt1WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqabsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    FsubZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    UcvtfZPZW2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1ShZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VselvsA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VldmdbA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Ld1BZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrecpxAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    Vst41A3Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    SqsubZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    StrexA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ldumaxal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    CmpIA1 {
        cond: u8,
        Rn: u8,
        imm12: u16,
    },
    Ld4WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    MsrSrSystemmove {
        o0: u8,
        op1: u8,
        CRn: u8,
        CRm: u8,
        op2: u8,
        Rt: u8,
    },
    FcvtDsFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldff1HZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtzsZPZFp162W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    TsbHcHints,
    St2G64SoffsetLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Ldapur64LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SrsibA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    CmpltPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Lduminal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sha256Su0A1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    LdrHLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UmaalA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldnf1BZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1WZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtzu32HFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    Ld2AsisdlsepI2I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1SbZPBrS32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Swpa64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UmaxpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1HZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FminnmHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FacgtAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrbIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    VrecpsA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmovH64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Fcvtns32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld3AsisdlsopBx3R3B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    BkptA1 {
        cond: u8,
        imm12: u16,
        imm4: u8,
    },
    CpsidA1Asm {
        E: u8,
        A: u8,
        I: u8,
        F: u8,
    },
    UmlalAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    RdvlRI {
        imm6: u8,
        Rd: u8,
    },
    SqdmlalAsisddiffOnly {
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VfmaBfsA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Frint64XDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Pacib64PDp1Src {
        Rd: u8,
    },
    UrsraAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    SbOnlyBarriers,
    Ld1AsisdlsepI1I1 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    SbcsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ldsmaxal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Lslv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Stp32LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Csneg32Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1HZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqaddAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    InchZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    FcvtZPZS2H {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    PrfhIPBrS {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Ldapr32LMemop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmaxnmpAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdarbLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    DecpRPR {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    Pacda64PDp1Src {
        Rd: u8,
    },
    Add32AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Swp64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SminvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    FrintxAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldumaxh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqrdmulhAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrecpxAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    UdotZZzziD {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ld2AsisdlsopD2I2D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    StllrSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FminpAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld4AsisdlsopH4I4H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    CmpRA1Rrx {
        cond: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    LdrbIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Pacib1716HiHints,
    AsrdZPZi {
        tszh: u8,
        Pg: u8,
        tszl: u8,
        imm3: u8,
        Zdn: u8,
    },
    MulAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FccmpHFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    FcvtpuAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    Ld2AsisdlsopHx2R2H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    MovsRA1Rrx {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ldadd32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St4WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    ExtAsimdextOnly {
        Q: u8,
        Rm: u8,
        imm4: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1SbZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    CmeqAsimdmiscZ {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtnuAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    St1BZPBi {
        size: u8,
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VcvtUivA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ld1AsisdlsoD11D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    AddZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Adds32SAddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    FcmeqAsimdmiscfp16Fz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdnpQLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    UcvtfD32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    UcvtfS32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    FmlsZZzziD {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldff1BZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    SmlalAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    UqasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    FmulZZziS {
        opc: u8,
        Zn: u8,
        Zd: u8,
    },
    CmltAsisdmiscZ {
        Rn: u8,
        Rd: u8,
    },
    Cbz32Compbranch {
        imm19: u32,
        Rt: u8,
    },
    VcgtIA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    LastbVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Csinc64Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Zip1ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    SdotZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    AesimcA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    ScvtfZPZW2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Sub32AddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    Ldapurh32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    ClastbVPZ {
        size: u8,
        Pg: u8,
        Zm: u8,
        Vdn: u8,
    },
    SxtbA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    CmphiPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Stur64LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SudotZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    FmovHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    FcmnePPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ld3AsisdlsopH3I3H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    St2AsisdlsopS2I2S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzu32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld1RqwZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    And64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UaddlvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Sttrb32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldadda32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldr64LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    AsrZPZw {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    UshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1DZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FdivZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    LdarLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UcvtfZPZW2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UqincwRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    CmgeAsimdmiscZ {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdmullAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    SmlattA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    Sub64AddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    Stg64SpostLdsttags {
        Rn: u8,
        Rt: u8,
    },
    PrfhIPBiS {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Swph32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UqshrnAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Ldsetalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St3AsisdlsoS33S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvtmAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldsetab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtzuAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    PrfdIPBrS {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Ldclralb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrshtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    Ld1DZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ldff1ShZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AdrZAzDU32Scaled {
        Zm: u8,
        msz: u8,
        Zn: u8,
        Zd: u8,
    },
    DsbBoBarriers,
    FmulSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FminvVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    LdrbIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    VcgeRT1A1A {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1SwZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    FmlaAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VorrRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    AddZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    St1DZPBi {
        size: u8,
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdpSLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtas32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    UcvtfH32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    SbcsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    SqshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CmpeqPPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ldr64LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcvtauAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrSLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Vst41A3Postr {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    VcvtShA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FabsHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Sdiv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SsbbA1,
    Ldnt1WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtau32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    StpSLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Stnp32LdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    UabalAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Lduminalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    McrA1 {
        opc1: u8,
        CRn: u8,
        Rt: u8,
        cp15: u8,
        opc2: u8,
        CRm: u8,
    },
    Ldrsb32BlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1BZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ubfm32MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Ubfm64MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    St1DZPBzDX32Scaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1RodZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtpuAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmgtPPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    St3AsisdlsoH33H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    UmaxZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FcvtZPZD2H {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UaddwAsimddiffW {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StmdaA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    PrfbIPBrS {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    ScvtfAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Csneg64Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmvAsimdallOnlySd {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    HltA1 {
        cond: u8,
        imm12: u16,
        imm4: u8,
    },
    ClzZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldeor32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VqdmlslA2 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ccmn64CondcmpReg {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Movz64Movewide {
        imm16: u16,
        Rd: u8,
    },
    St2BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsmaxb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Gmi64GDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1WZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    OrrAsimdimmLSl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    Ld1RhZPBiU32 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StlxrSr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqdechZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Ld2AsisdlsepR2R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrdRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    VmovRA2S {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Vld21T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    FminAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VqdmulhA2Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1HZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtau32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld1WZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Rorv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdpDLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Str64LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    St2AsisdlsoB22B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FaddpAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UhasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Add32AddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    SunpkhiZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    FaddpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld2AsisdlsopBx2R2B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrDLoadlit {
        imm19: u32,
        Rt: u8,
    },
    Ldaddal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StlxrbSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VpaddIA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LsrZPZw {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    NopA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    FminnmpAsisdpairOnlySd {
        Rn: u8,
        Rd: u8,
    },
    UqrshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1AsisdlsepI3I3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    UabdlAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    StcA1Post {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    Swp32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StrhtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    VshllA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    AddAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrecpsAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St2WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AddSpIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    FsubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrDLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VqdmlalA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld3AsisdlsepR3R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RsbZPBiS16 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    RevZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    FrintpZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FsubZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    Ldr32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    QdaddA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    SevlA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    And32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3AsisdlsoB33B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1SbZPBiS32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldaddal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sm3Partw2Vvv4Cryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VusdotSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqdechRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    BfcvtnAsimdmisc4S {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintzDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldnp32LdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    DmbA1,
    UqincdRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldaddlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VqrdmlahA2Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtms64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Uzp2ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    SelPPPp {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    FsubrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    BfmlaltZZzzi {
        i3h: u8,
        Zm: u8,
        i3l: u8,
        Zn: u8,
        Zda: u8,
    },
    Ld1AsisdlsepR3R3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3AsisdlsopDx3R3D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldumaxah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SrshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Pacdb64PDp1Src {
        Rd: u8,
    },
    Ldsminalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    WfeA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    LslZPZw {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    WhileltPPRr {
        size: u8,
        Rm: u8,
        sf: u8,
        Rn: u8,
        Pd: u8,
    },
    Fcvtps32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Lduminlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VmaxnmA2D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldrsw64LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcvtmuAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    SubrZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    Ld4HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlsopB1I1B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Sha256Su1VvvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1AsisdlsepI4I4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    St4AsisdlsopSx4R4S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FmaxnmpAsisdpairOnlySd {
        Rn: u8,
        Rd: u8,
    },
    St1HZPBzSX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Shadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    CmpgtPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Usub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    St2G64SpostLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Ld2AsisdlsopDx2R2D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    OrnPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    StnpQLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    EorAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Vst3MA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    St1BZPBr {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqshluAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FstmiaxA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Eon64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    RdffrPPF {
        Pg: u8,
        Pd: u8,
    },
    FmlsAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    ShasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    CmhsAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VrhaddA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    NorsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    PrfbIPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    Fcvtps64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    SqabsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SturDLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld1RsbZPBiS64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    RdffrPF {
        Pd: u8,
    },
    PrfmPLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldff1BZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St4BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Frint64XAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    BrkpbsPPPp {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    UcvtfD64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Ldff1SbZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Stg64SoffsetLdsttags {
        Rn: u8,
        Rt: u8,
    },
    FrsqrteAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldclrlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VmlaFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St3AsisdlsepI3I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    UqincdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Frint32ZAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ccmp64CondcmpImm {
        imm5: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    FscaleZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ldpsw64LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    BfmmlaAsimdsame2E {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulAsimdelemRSd {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    SmladxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    DupmZI {
        imm13: u16,
        Zd: u8,
    },
    FcmpeDzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    Ld1SbZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    PtestPP {
        Pg: u8,
        Pn: u8,
    },
    FrintaDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    DecbRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FcmpSzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    IsbA1,
    Ldff1SwZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdxrLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvtbA1Bfs {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1SbZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld3RAsisdlsoR3 {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    AdrA1A {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Sha256H2QqvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsoS11S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SmmlsA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldg64LoffsetLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Ldsmaxa32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UqdecdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    CasabC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldeoralh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Autib64PDp1Src {
        Rd: u8,
    },
    RfeibA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    Pacdza64ZDp1Src {
        Rd: u8,
    },
    Ld1HZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlseR33V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    VsdotA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FabdAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdmA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    Cls32Dp1Src {
        Rd: u8,
    },
    VtstA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UmaxvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    UxthZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UxthA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    UqdecbRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldp32LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    FexpaZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    Fmlsl2AsimdsameF {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzs32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    AddsSpRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VstmA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    SevHiHints,
    FmulDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Add32AddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    BifAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UsatA1Asr {
        cond: u8,
        sat_imm: u8,
        Rd: u8,
        imm5: u8,
        sh: u8,
        Rn: u8,
    },
    FcvtpsAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    SmmulA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    VpaddFA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmaxHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SuqaddAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FabdZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    StmibA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    Stgm64BulkLdsttags {
        Rn: u8,
        Rt: u8,
    },
    St4HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VshlIA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    BicsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    OrrsRA1Rrx {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ld1HZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlsepR4R4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    StpQLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldsminal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FrintaAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Lduminab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UabdAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrdRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    Rev32Dp1Src {
        Rd: u8,
    },
    LdaxpLp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Crc32Cb32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1DZPBzDX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcmgeAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1BZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld3AsisdlsoB33B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    StrRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    IncwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Ld3AsisdlsoD33D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrhRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    FcmpSFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    Fcvtns64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld1HZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Vst41A3Nowb {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    Ld1DZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LslrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    StrZBi {
        imm9h: u8,
        imm9l: u8,
        Rn: u8,
        Zt: u8,
    },
    FcmpeDFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    FmovSFloatimm {
        imm8: u8,
        Rd: u8,
    },
    Ld1AsisdlsepR2R2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Trn2PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    SrsdaA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    Frint64ZAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FmlsAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    EorsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    StllrhSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Qadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    UrshrAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtpu32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    LdrbRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VmaxFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldnf1BZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UsublAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    IndexZRi {
        size: u8,
        imm5: u8,
        Rn: u8,
        Zd: u8,
    },
    SevA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    TbxAsimdtblL11 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtpsAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    StrRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Str32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Fcvtps32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    MrsRsSystemmove {
        o0: u8,
        op1: u8,
        CRn: u8,
        CRm: u8,
        op2: u8,
        Rt: u8,
    },
    LdrBLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    VqrshrnA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    BrkbsPPPZ {
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    SqdecpRPRX {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    VqrdmlshA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VminIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    MlaAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AdrOnlyPcreladdr {
        immlo: u8,
        immhi: u32,
        Rd: u8,
    },
    UmullAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    StpDLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    SmaxAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FnmsubHFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldr32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SubsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    ClzAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Zip1PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    Ldsminab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Blr64BranchReg,
    FaddSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzuZPZS2X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    PrfhIPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    PaciaspHiHints,
    Ldeorlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VrsubhnA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld2AsisdlsopSx2R2S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    CmphsPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ldff1DZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    CasalbC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmltAsimdmiscfp16Fz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1ShZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    TstIA1 {
        cond: u8,
        Rn: u8,
        imm12: u16,
    },
    ShrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    AdcsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    CmeqAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VbicRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    CmphsPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    SsbbOnlyBarriers,
    MulsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    FcvtzsAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    AndPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    Ldsetal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmlaAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Braaz64BranchReg,
    BicAsimdimmLSl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    BxA1 {
        cond: u8,
        Rm: u8,
    },
    CmpnePPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    RevhZZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    IncdRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldnf1BZPBiU8 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1DZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CmpeqPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    ClastaVPZ {
        size: u8,
        Pg: u8,
        Zm: u8,
        Vdn: u8,
    },
    UdfA1 {
        imm12: u16,
        imm4: u8,
    },
    Str32LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtas64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    CmploPPZi {
        size: u8,
        imm7: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ldrsh32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FaddZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    Fcvtpu64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    VjcvtA1 {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    UsubwAsimddiffW {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StlxpSp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtmu32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Stz2G64SpreLdsttags {
        Rn: u8,
        Rt: u8,
    },
    FcmeqAsisdmiscfp16Fz {
        Rn: u8,
        Rd: u8,
    },
    LdrshtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    WhilelePPRr {
        size: u8,
        Rm: u8,
        sf: u8,
        Rn: u8,
        Pd: u8,
    },
    And32LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha256Su1A1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    PaciazHiHints,
    RfedaA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    Bfm64MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldset32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrBLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VsdotSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FnegSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldff1SwZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld4AsisdlsopHx4R4H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Rev16A1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
    },
    FcvtauAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    SriAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    AeseA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    AndZZi {
        imm13: u16,
        Zdn: u8,
    },
    VselgeA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmulZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    VcvtmVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    CntpRPP {
        size: u8,
        Pg: u8,
        Pn: u8,
        Rd: u8,
    },
    StrIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    UshrAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VpminFA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    PrfdIPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    IncpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    LdpSLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    StrHLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Sturb32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld3BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtauAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdaexbA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    CaspalCp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Crc32WA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    UcvtfAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SqnegAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FsubZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    UqdecpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    Ldr32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Cbnz32Compbranch {
        imm19: u32,
        Rt: u8,
    },
    SqsubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1RqbZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintnAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FdivDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnf1WZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrbRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VaddwA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmaddDFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmgtAsimdmiscFz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1SwZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqdmlslAsisdelemL {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Zip2ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    St1HZPBi {
        size: u8,
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FdivHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UmmlaZZzz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    FminZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ld3DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldnf1ShZPBiS32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldrsb32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Bics64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintmZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    LsrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ld1ShZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1AsisdlsopHx1R1H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RbZPBiU16 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2G64SpreLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Msub32ADp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    VrintnVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    VqmovunA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldrsb32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UdivZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    St3AsisdlsopHx3R3H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VmulFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FminZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    Sha256HQqvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdurSLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ret64RBranchReg,
    FcmpeHFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    LslZZw {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    StxpSp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Crc32ChA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Ldrsh32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VcvttA1Hd {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FrintmAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    UminvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    St3WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldapr64LMemop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St1AsisdlsoH11H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    UcvtfS64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Csinv64Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Setf8OnlySetf {
        Rn: u8,
    },
    VmlsSA1Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Sha1PA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqrdmlahAsimdsame2Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld4DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldaddl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1AsisdlsopB1I1B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VceqRT1A1A {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UshllAsimdshfL {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    SqinchZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Fcvtpu32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    SminpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    PrfwIPBrS {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Pacizb64ZDp1Src {
        Rd: u8,
    },
    StcA1Unind {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    TblAsimdtblL44 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CasaC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    ClrexBnBarriers,
    Subs32AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ands32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BxjA1 {
        cond: u8,
        Rm: u8,
    },
    Fmlsl2AsimdelemLh {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    BfdotZZzz {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    Subs64SAddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    SqaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnf1SbZPBiS16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Stzg64SpostLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Ccmp32CondcmpReg {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    StrHLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldff1DZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsmaxalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Eor32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SrsraAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    UqdecpRPRUw {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    Csinc32Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Vst21T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    FrintnHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    VcvtaVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    Ld1SbZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ld1BZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CasalC64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RhZPBiU64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    OrrAsimdimmLHl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    FsqrtSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    StrdIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    FmulxAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Uqadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VdotSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldclrl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    AdcsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ld1AsisdlsopDx1R1D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrb32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldsmaxah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UcvtfAsimdshfC {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtpu64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldclral64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldaddl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldnt1BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VmrsA1As {
        cond: u8,
        reg: u8,
        Rt: u8,
    },
    Ands32SLogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Smulh64Dp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    SrsraAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtmuAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    PrfdIPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Ld2DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CmhsAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmeqAsimdmiscFz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SubsSpRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Bics32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BrkpasPPPp {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    SbcsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    LastbRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Rd: u8,
    },
    Ldff1ShZPBrS32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Eretab64EBranchReg,
    NotAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    StrQLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    SabdlAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldur32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld2WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FaddpAsisdpairOnlyH {
        Rn: u8,
        Rd: u8,
    },
    StrDLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Rev32AsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SubZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    LdrSLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    AndAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Uzp1AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    ClsZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    CmhiAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrhIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    FmaxnmZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    FcvtnuAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    UqaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FminDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    RsbsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ld1DZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2AsisdlsopHx2R2H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    ClastbZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ldeorl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SminZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FldmdbxA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    ShsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    PrfdIPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    DupAsimdinsDrR {
        Rn: u8,
        Rd: u8,
    },
    FcvtzsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    St1WZPBzDX32Scaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ssub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VcvtpAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    UcvtfAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintiHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ld1SbZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    PsbHcHints,
    UxtwZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UbfxA1 {
        cond: u8,
        widthm1: u8,
        Rd: u8,
        lsb: u8,
        Rn: u8,
    },
    StrdRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    FcmgeAsimdmiscFz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    CsdbHiHints,
    SqdmullAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SubSpRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    InsAsimdinsIrR {
        Rn: u8,
        Rd: u8,
    },
    FmlslAsimdsameF {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrintxZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1SwZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VacgtA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Swpalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld4AsisdlsoS44S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VqdmulhA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UdotZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    VdivA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1RwZPBiU64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsmaxl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1WZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrsbIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    Ld1RqdZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CmgeAsisdmiscZ {
        Rn: u8,
        Rd: u8,
    },
    Ld4AsisdlsopSx4R4S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Sxtb16A1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    Sha512HQqvCryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrdRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    Vst31T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    Ld1AsisdlsepR1R1 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtzuZPZS2W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FmsubHFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldtrsb32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UcvtfAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    VpaddlA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VextA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        imm4: u8,
        N: u8,
        Q: u8,
        M: u8,
        Vm: u8,
    },
    LdrbRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    SqdecpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    Ld1BZPBrU8 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Autizb64ZDp1Src {
        Rd: u8,
    },
    Ld1HZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    EorvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Ldumaxlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    EorsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    LdrsbLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    StrbRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Add64AddsubImm {
        sh: u8,
        imm12: u16,
        Rn: u8,
        Rd: u8,
    },
    Ld1HZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    LdrHLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzs64SFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    FacgeAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AddsSpIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    LdrdIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    Ldnt1WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdcIA1Post {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    VmlalSA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    PrfmPLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    UqdecdRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    UminvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SdotAsimdelemD {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1BZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    OrrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ldtrsw64LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FabsSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    StpSLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    BlOnlyBranchImm {
        imm26: u32,
    },
    LsrZZw {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    VnegA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    BrkpaPPPp {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    FcmpDFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    RsbsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    VqsubA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VstmdbA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    VcvtHsA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SqsubZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    Fcvtmu32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    VrintmVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    StllrSl64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FminnmDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SminZZi {
        size: u8,
        imm8: u8,
        Zdn: u8,
    },
    FsubDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld3AsisdlsoS33S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldsminlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmaxpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcselHFloatsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsetal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    BOnlyCondbranch {
        imm19: u32,
        cond: u8,
    },
    Ldumaxb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Crc32Cw32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CmgeAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SbA1,
    LdrbtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    SqincdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Ld1RshZPBiS64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1WZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Stp32LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrshIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    AndsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    SmlawtA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    LdmEA1As {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    CmpgePPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    CaspCp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmullAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    MulAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    RfedbA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    FcvtxnAsisdmiscN {
        Rn: u8,
        Rd: u8,
    },
    FdivrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    VmulFA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1ShZPBrS32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld2AsisdlsopB2I2B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    St1AsisdlsepR1R1 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    StmA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    Extr32Extract {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VqdmlslA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VusdotSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcvtpsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ssat16A1 {
        cond: u8,
        sat_imm: u8,
        Rd: u8,
        Rn: u8,
    },
    Adds32AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmsbZPZzz {
        size: u8,
        Za: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FcvtZPZH2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1RswZPBiS64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2AsisdlsopB2I2B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Trn2ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    BfmlalbZZzzi {
        i3h: u8,
        Zm: u8,
        i3l: u8,
        Zn: u8,
        Zda: u8,
    },
    SdivZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    XaflagMPstate {
        CRm: u8,
    },
    FrintnSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    BfiA1 {
        cond: u8,
        msb: u8,
        Rd: u8,
        lsb: u8,
    },
    UcvtfH32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Ldumin64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdaxrbLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqxtnAsisdmiscN {
        Rn: u8,
        Rd: u8,
    },
    SmullsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    Fmov64VxFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Sha1HA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SubZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    FcmpeHzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    LdrshRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    LdrQLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcmeqAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Rax1Vvv2Cryptosha5123 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Dcps3DcException {
        imm16: u16,
    },
    Ld1ShZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FacgeAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CasalhC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldapursb32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SqdecpRPRSx {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    VdotSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1RsbZPBiS32 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtzsZPZD2X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1WZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Fcvtnu64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Subg64AddsubImmtags {
        uimm6: u8,
        op3: u8,
        uimm4: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldrb32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    BfcvtBsFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldrsh32LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    FacgeAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VqrshlA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    ScvtfH64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    PrfhIPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    FmaxvVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Ld1HZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    PrfhIPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    VmovIT1A1A {
        i: u8,
        D: u8,
        imm3: u8,
        Vd: u8,
        Q: u8,
        imm4: u8,
    },
    FmlaZZzziD {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldset64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld4HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FminHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Vld4AA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        T: u8,
        Rm: u8,
    },
    Crc32Ch32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdmlalAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Lduminb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmlaldxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    ScvtfD32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Stzg64SpreLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Stzg64SoffsetLdsttags {
        Rn: u8,
        Rt: u8,
    },
    RmifOnlyRmif {
        imm6: u8,
        Rn: u8,
        mask: u8,
    },
    VzipA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1SbZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Lduminl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    NandPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    CmtstAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    XtnAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Clz64Dp1Src {
        Rd: u8,
    },
    UcvtfS64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    VdupSA1Q {
        D: u8,
        imm4: u8,
        Vd: u8,
        Q: u8,
        M: u8,
        Vm: u8,
    },
    St1HZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ldclralh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Lduminalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    RscsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    SudotAsimdelemD {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsepR2R2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Stp64LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Adds32SAddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    UsdotAsimdsame2D {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AddpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrecpsAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtnu64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    FrintiZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FaddDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldrh32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    LdrBlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    MadZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Za: u8,
        Zdn: u8,
    },
    StcA1Off {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    FcmgeAsisdmiscFz {
        Rn: u8,
        Rd: u8,
    },
    FnegHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    LdrRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Strh32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    MvniAsimdimmLSl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    PrfwIPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    FminnmSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldrsw64LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    And64LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    InsAsimdinsIvV {
        Rn: u8,
        Rd: u8,
    },
    FdivSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmsubSFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    VcltIA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VaddhnA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St4AsisdlsepR4R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1BZPBrU8 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Setf16OnlySetf {
        Rn: u8,
    },
    Crc32CwA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VmovIA2H {
        cond: u8,
        D: u8,
        imm4H: u8,
        Vd: u8,
        imm4L: u8,
    },
    SqincwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    VnegA2D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldursb32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FmaxAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AddIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ldff1SbZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcmuoPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    AutibspHiHints,
    Ld1RAsisdlsopR1I {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SsraAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    UmlalAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VmlalIA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1ShZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Trn2ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld2HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdarhLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvtIsA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    AsrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    ClastbRPZ {
        size: u8,
        Pg: u8,
        Zm: u8,
        Rdn: u8,
    },
    St4AsisdlsopB4I4B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SmlslAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SsatA1Asr {
        cond: u8,
        sat_imm: u8,
        Rd: u8,
        imm5: u8,
        sh: u8,
        Rn: u8,
    },
    Ld1AsisdlsopS1I1S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    YieldA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    Fcvtms64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldclrab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqrshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtHdFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    LdrbLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Sadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Vst41A1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    St4DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldclrb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Stlur64LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcvtpuAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    EsbA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    InsrZR {
        size: u8,
        Rm: u8,
        Zdn: u8,
    },
    St1AsisdlsepI3I3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    St2AsisdlsepI2I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpa32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtzsAsisdshfC {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    SmovAsimdinsWW {
        Rn: u8,
        Rd: u8,
    },
    MovtA1 {
        cond: u8,
        imm4: u8,
        Rd: u8,
        imm12: u16,
    },
    FrintxAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1WZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SmmlaA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    SqrdmlahAsisdelemR {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtnu32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    LdaxrhLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Usad8A1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    UmlslAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AesdA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    StxrSr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StrIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    VsudotSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    AsrrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ld1RbZPBiU64 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UcvtfZPZX2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Sbcs64AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CmltAsimdmiscZ {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VcvtbA1Dh {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldnt1BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    NopHiHints,
    Sha1HSsCryptosha2 {
        Rn: u8,
        Rd: u8,
    },
    SmcExException {
        imm16: u16,
    },
    VswpA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    LdaA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    FminvAsimdallOnlySd {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Shadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Uadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    MlsZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    FaddpAsisdpairOnlySd {
        Rn: u8,
        Rd: u8,
    },
    UaddlpAsimdmiscP {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Frint64ZDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    FrintnZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Rev16AsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VorrIT1A1A {
        i: u8,
        D: u8,
        imm3: u8,
        Vd: u8,
        Q: u8,
        imm4: u8,
    },
    FnmulDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VsmmlaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqshrunAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Csel32Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld2BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1AsisdlseR33V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1ShZPBiS32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld2AsisdlseR2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    FmaxnmpAsisdpairOnlyH {
        Rn: u8,
        Rd: u8,
    },
    Fcvtzu64DFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    VfmaA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdaexdA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    St4DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VrintxVfpA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FmlsZZzziS {
        opc: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldurb32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VfmaBfA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UqsubAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    MlasA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    VqrshrunA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    VcvtSivA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    St1AsisdlsopSx1R1S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1WZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrBLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FmlsAsisdelemRhH {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    UqsubZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldapursw64LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzu32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    LdlarhLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    BicsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    St2AsisdlsoH22H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldtrh32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    CmphiPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    LdrSLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UmullAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    McrrA1 {
        Rt2: u8,
        Rt: u8,
        cp15: u8,
        opc1: u8,
        CRm: u8,
    },
    Movk32Movewide {
        imm16: u16,
        Rd: u8,
    },
    FrintpHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    VmovRA2D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ld4AsisdlsepI4I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    CompactZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld2BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VmovSsA1 {
        cond: u8,
        Rt2: u8,
        Rt: u8,
        M: u8,
        Vm: u8,
    },
    FmlaAsimdelemRhH {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsetb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UmovAsimdinsWW {
        Rn: u8,
        Rd: u8,
    },
    VsriA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    Ld3WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VsubhnA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    CasplCp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmulxAsimdelemRhH {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    ScvtfZPZH2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FsqrtHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ldff1WZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrhtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VmsrA1As {
        cond: u8,
        reg: u8,
        Rt: u8,
    },
    LdahA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ld1RobZPBiU8 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2AsisdlsopD2I2D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    StrQLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UqdechZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    Ldumaxal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FrintnDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsopS1I1S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    UminpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fmlal2AsimdsameF {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnf1SwZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CaspalCp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrhIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    Sbfm32MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldeora64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StnpSLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Stnp64LdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    WhileloPPRr {
        size: u8,
        Rm: u8,
        sf: u8,
        Rn: u8,
        Pd: u8,
    },
    Ld4AsisdlseR4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    RbitAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VmullSA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldapur32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    CaspaCp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpal64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UmullsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    Crc32Cx64CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    OrrZZi {
        imm13: u16,
        Zdn: u8,
    },
    Ld1AsisdlsopBx1R1B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SmullAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    VsraA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    St4AsisdlsopS4I4S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1WZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    FmaxnmZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    SqnegAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    ScvtfD64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldaddalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    PmullAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdurHLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcvtzuAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    St1BZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UqxtnAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld3AsisdlsoH33H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FmulHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzsZPZFp162X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Vst1MT1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    UqdecbRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Rbit64Dp1Src {
        Rd: u8,
    },
    Ld4BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VminnmA2D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldaddab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqincpRPRX {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    CntAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlseR22V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    FmaxnmHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Autdza64ZDp1Src {
        Rd: u8,
    },
    ScvtfAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    FcmpeSFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    UqsubZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    FmaddHFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    VminnmA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VmovIA2S {
        cond: u8,
        D: u8,
        imm4H: u8,
        Vd: u8,
        imm4L: u8,
    },
    NegZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    AbsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    BA1 {
        imm24: u32,
    },
    FrintpAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FmlsAsisdelemRSd {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    SelZPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    UqshrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    CasalC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UrshrAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsopBx1R1B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SqdmullAsisdelemL {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    UqrshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UmmlaAsimdsame2G {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    PrfwIPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    WfeHiHints,
    StrSLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VrsqrtsA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld3WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcvtzsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    IncbRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    InsrZV {
        size: u8,
        Vm: u8,
        Zdn: u8,
    },
    StlA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    VmovRsA1 {
        cond: u8,
        Vn: u8,
        Rt: u8,
        N: u8,
    },
    Ldapursb64LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Autdzb64ZDp1Src {
        Rd: u8,
    },
    Ldr64LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    NotZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    VsliA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    Ldr32Loadlit {
        imm19: u32,
        Rt: u8,
    },
    FcvtnsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    StrPBi {
        imm9h: u8,
        imm9l: u8,
        Rn: u8,
        Pt: u8,
    },
    CpyZPR {
        size: u8,
        Pg: u8,
        Rn: u8,
        Zd: u8,
    },
    Ld1RqhZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VmmlaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdrhRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    VfmsA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrintiSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Frint32XDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    StpDLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    VsubFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Str64LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    AutibzHiHints,
    AbsZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FmaxpAsisdpairOnlyH {
        Rn: u8,
        Rd: u8,
    },
    Fcvtms32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    SubIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    VqaddA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FnegAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdmdbA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    UhsubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UhaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnf1BZPBiU16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VhaddA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldumax64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    RaddhnAsimddiffN {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1RqbZPBiU8 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Frint32ZSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    AdrZAzDS32Scaled {
        Zm: u8,
        msz: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldff1SbZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsetlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VcleIA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VselgtA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcmgtAsisdmiscfp16Fz {
        Rn: u8,
        Rd: u8,
    },
    ScvtfH32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    BicAsimdimmLHl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    FrintxHFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Blraaz64BranchReg,
    St1AsisdlseR44V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtas32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Xpacd64ZDp1Src {
        Rd: u8,
    },
    Vrev64A1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VfmslSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1BZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrBLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    BfdotAsimdsame2D {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SmulttA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    FrsqrtsZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldff1ShZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Stnt1HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcmeqPPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    ClzA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
    },
    Ccmn32CondcmpImm {
        imm5: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Ld1BZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AbsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    Ld1HZPBrU16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldff1ShZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Sbfm64MBitfield {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Trn1AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    AutiazHiHints,
    Stnt1WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VnmulA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SdotAsimdsame2D {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3AsisdlsopS3I3S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    HvcA1 {
        cond: u8,
        imm12: u16,
        imm4: u8,
    },
    Crc32BA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    UqincbRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ld2AsisdlsoB22B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SmulwbA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    AddRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VcvttA1Dh {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VcvtbA1Hs {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    PrfumPLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldsminh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VmullIA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St2AsisdlsopH2I2H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Vst41A2Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    VmlsFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldnp64LdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    VfmaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrsqrtsAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulxAsimdelemRSd {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    UcvtfAsisdshfC {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    SshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrexdA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ld1RqdZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CfinvMPstate {
        CRm: u8,
    },
    FrsqrteAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    SabalAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrdIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    LdxpLp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldsmaxl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StrHLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FacgtPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    FaddZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1AsisdlsepI2I2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    UqrshrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Uzp1PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    FmovDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    PldRA1Rrx {
        U: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    St3BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UqincwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    St1WZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    UqshlAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtSdFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    FcvtlAsimdmiscL {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    St3AsisdlsepR3R {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    VnmlaA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrecpeAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsmaxab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    CmgtAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FrecpsZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    BicsRA1Rrx {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    FnmsubSFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    BrkpbPPPp {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    CasbC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1ShZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ldtr32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcmgtAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdecwRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    RsubhnAsimddiffN {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CpyZOI {
        size: u8,
        Pg: u8,
        sh: u8,
        imm8: u8,
        Zd: u8,
    },
    VsubwA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VcgeIA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Nop,
    CpyZPI {
        size: u8,
        Pg: u8,
        sh: u8,
        imm8: u8,
        Zd: u8,
    },
    Crc32CbA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VseleqA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcvtzsZPZD2W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    YieldHiHints,
    FldmiaxA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Vld1AA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        T: u8,
        Rm: u8,
    },
    Fcvtnu32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldsmaxlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UqinchRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FcmgtPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    LdrQLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    AddvlRRi {
        Rn: u8,
        imm6: u8,
        Rd: u8,
    },
    VrsraA1D {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    UsmmlaZZzz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    AdrpOnlyPcreladdr {
        immlo: u8,
        immhi: u32,
        Rd: u8,
    },
    SqdmlslAsisddiffOnly {
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    PrfbIPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    FcvtnsAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    DghHiHints,
    FcvtZPZD2S {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FcvtnuAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    HintHmHints,
    SmcA1As {
        cond: u8,
        imm12: u16,
        imm4: u8,
    },
    Ld4BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VusdotA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St1WZPBzSX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FaddvVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    FaddaVPZ {
        size: u8,
        Pg: u8,
        Zm: u8,
        Vdn: u8,
    },
    FmovAsimdimmD2D {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    FrsqrtsAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtpu64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Asrv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VcmlaSA1Qh {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld3HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    QaddA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Frint64ZSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    StlxrSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    AdrZAzSdSameScaled {
        Zm: u8,
        msz: u8,
        Zn: u8,
        Zd: u8,
    },
    Umaddl64WaDp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    UminZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FnmlaZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    SmmlaZZzz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    NegAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    DecdZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    BfdotAsimdelemE {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Sxtab16A1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    Ldumina32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    MvnsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    SadalpAsimdmiscP {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Retab64EBranchReg,
    Ldrsb64LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Eretaa64EBranchReg,
    VmaxnmA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    TeqRA1Rrx {
        cond: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ldff1SwZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    VshllA2 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SqshluAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FccmpeSFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Ldaddb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqsubAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    TbxAsimdtblL44 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdpQLdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1WZPBzSX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VudotSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmovDFloatimm {
        imm8: u8,
        Rd: u8,
    },
    MovprfxZPZ {
        size: u8,
        M: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldeorab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmlaZPZzz {
        size: u8,
        Zm: u8,
        rot: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    FmulZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    CasahC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldursh64LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Vld2AA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        T: u8,
        Rm: u8,
    },
    FccmpeDFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Ld1HZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlsepR3R3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    St3AsisdlsopBx3R3B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VaddFA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Sdiv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsopHx1R1H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Fmov64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    VabaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldnf1DZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    AdcsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    FnmaddDFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    SrshrAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VqrdmlshA2Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcmlaZZzziS {
        opc: u8,
        rot: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldrsb32BLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    CmgtAsimdmiscZ {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmleAsisdmiscfp16Fz {
        Rn: u8,
        Rd: u8,
    },
    Ccmn32CondcmpReg {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    FcvtmuAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrexbA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    FmaxDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UqaddAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VrshrA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    SsubwAsimddiffW {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdxrbLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldadda64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    LdcIA1Pre {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    Ldff1SwZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SysCrSysteminstrs {
        op1: u8,
        CRn: u8,
        CRm: u8,
        op2: u8,
        Rt: u8,
    },
    VqabsA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    BOnlyBranchImm {
        imm26: u32,
    },
    Stp64LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    VstmdbA2 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    FmadZPZzz {
        size: u8,
        Za: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    VsdotA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdrIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    FcmgtAsisdmiscFz {
        Rn: u8,
        Rd: u8,
    },
    LslZPZi {
        tszh: u8,
        Pg: u8,
        tszl: u8,
        imm3: u8,
        Zdn: u8,
    },
    SmusdxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    Ld2HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UmlalsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    LsrZPZi {
        tszh: u8,
        Pg: u8,
        tszl: u8,
        imm3: u8,
        Zdn: u8,
    },
    Ld1WZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmaxvAsimdallOnlySd {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha1MQsvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1AsisdlsoB11B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrDLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    VcgtRT1A1A {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FcselSFloatsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldp64LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    LdurDLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    StrBLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld1WZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SxthZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    LdrdLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VcvtbA1Hd {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    LdlarLr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StcA1Pre {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    Ldsmin64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldr32LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    VmovxA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Vst11T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    Fcvtpu32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Trn1PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    Vst4MA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    Fcvtzu64HFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    DecwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    FcmgePPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ldff1HZPBrU32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldff1SwZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SubRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    FrecpeAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SqshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmlePPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    MovsIA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm12: u16,
    },
    Sbcs32AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Eret64EBranchReg,
    Fcvtzu32SFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    SqdmlalAsisdelemL {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmvAsimdallOnlyH {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    UqincwRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FcvtZPZS2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldrsh64LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Adds64SAddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    Irg64IDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VandRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Crc32W32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Str32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FtmadZZzi {
        size: u8,
        imm3: u8,
        Zm: u8,
        Zdn: u8,
    },
    SmlsdA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    VldrA1D {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    FcmgeAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Umulh64Dp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzuAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    VqshrunA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    RevbZZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FminpAsisdpairOnlyH {
        Rn: u8,
        Rd: u8,
    },
    StrexhA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ld2DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1HZPBzDX32Scaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmaxvAsimdallOnlyH {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmDFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Csel64Condsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldumin32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmulxAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UcvtfS32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    LastaVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Ld2AsisdlsoD22D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    RdffrsPPF {
        Pg: u8,
        Pd: u8,
    },
    VbicIT1A1A {
        i: u8,
        D: u8,
        imm3: u8,
        Vd: u8,
        Q: u8,
        imm4: u8,
    },
    Ld1BZPBrU16 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UcvtfZPZX2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    VbslA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FrecpsAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmpHFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    Strh32LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    OrrsIA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm12: u16,
    },
    Ld2AsisdlsoS22S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld2AsisdlsopS2I2S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    MoviAsimdimmD2D {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    UmlslAsimdelemL {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Blraa64PBranchReg,
    VmvnIT1A1A {
        i: u8,
        D: u8,
        imm3: u8,
        Vd: u8,
        Q: u8,
        imm4: u8,
    },
    SdotZZzz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    FccmpDFloatccmp {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    Ldnt1DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrBlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    UsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    LdcIA1Unind {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    Retaa64EBranchReg,
    VcvtBfsA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FrecpsAsisdsamefp16Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St4BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FcmeqAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1ShZPBrS64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmlslAsimdelemLh {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    OrrZZz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    ScvtfD64Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    LdrdIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VsqrtA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VfmalA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Udiv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqshrunAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    StlbA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ldff1HZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    PtruePS {
        size: u8,
        pattern: u8,
        Pd: u8,
    },
    ClsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    UabaAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldclrh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvtpVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    LdrBLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    CmleAsisdmiscZ {
        Rn: u8,
        Rd: u8,
    },
    SmulwtA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldseta32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrsh64LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    ScvtfS32Float2Fix {
        Rn: u8,
        Rd: u8,
    },
    Ldff1ShZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Str64LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld4AsisdlsopB4I4B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    MulZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FrintzAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld4WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    SqinchRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    PssbbA1,
    Zip2PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    EsbHiHints,
    SubAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VcmpA1A {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    StpDLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1RAsisdlsoR1 {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmgtAsimdmiscfp16Fz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SbfxA1 {
        cond: u8,
        widthm1: u8,
        Rd: u8,
        lsb: u8,
        Rn: u8,
    },
    Stnt1BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlsopDx1R1D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldp32LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    UdotAsimdelemD {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    BitAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaddSFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldrsb64BLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    LdrexA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Ldnt1HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StlrhSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld1AsisdlseR11V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Orn32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqdmulhAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzs64HFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    CaslC64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FrintxSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Sha1Su1VvCryptosha2 {
        Rn: u8,
        Rd: u8,
    },
    StlexA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    VabdlIA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VmlaSA1Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldsmin32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    PtruesPS {
        size: u8,
        pattern: u8,
        Pd: u8,
    },
    FcvtmsAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    DmbBoBarriers,
    RevA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
    },
    VaddlA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ands64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SdivrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    CmphiPPZi {
        size: u8,
        imm7: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    FcmltPPZ0 {
        size: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Zip2ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    VcvtDsA1 {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    SdivA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    Ldeorlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St1WZPBi {
        size: u8,
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SminvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulxAsisdelemRSd {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Uhadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    VmovTodA1 {
        cond: u8,
        Rt2: u8,
        Rt: u8,
        M: u8,
        Vm: u8,
    },
    Fmov32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    PldwIA1 {
        U: u8,
        imm12: u16,
    },
    FcmeqPPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Orr64LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    FrsqrteZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    LdrsbtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    St2DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintpDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    MlsAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1WZPBzSX32Scaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FnmlsZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Zda: u8,
    },
    BlIA1A {
        imm24: u32,
    },
    Ldtr64LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    SmlsdxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    ShsubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmulZZziD {
        opc: u8,
        Zn: u8,
        Zd: u8,
    },
    Ld1HZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CmgtAsisdmiscZ {
        Rn: u8,
        Rd: u8,
    },
    FrintaZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldseta64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VcvttA1Hs {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    StrdIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    VcmlaSA1Qs {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldaprh32LMemop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmlalsA1 {
        cond: u8,
        RdHi: u8,
        RdLo: u8,
        Rm: u8,
        Rn: u8,
    },
    WfiA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    LdrshIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    UsraAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    UmulhZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ldff1HZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Lduminh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FacgtAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FminnmvVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    Sttrh32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    CmploPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    FrintnAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    CmnRA1Rrx {
        cond: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    St1AsisdlsopH1I1H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldaddh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzs32SFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    PrfhIPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    Stg64SpreLdsttags {
        Rn: u8,
        Rt: u8,
    },
    SxtbZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FcvtxnAsimdmiscN {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SshrAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    MvniAsimdimmMSm {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    FsubAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmvVPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    SmmlsrA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    SqrdmlshAsimdsame2Only {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SminAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrhIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    FrsqrtsAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Vld31T1A1A {
        D: u8,
        Rn: u8,
        Vd: u8,
        index_align: u8,
    },
    FmulxAsisdelemRhH {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    AddplRRi {
        Rn: u8,
        imm6: u8,
        Rd: u8,
    },
    FsubrZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    Crc32H32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Orr32LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Extr64Extract {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Addg64AddsubImmtags {
        uimm6: u8,
        op3: u8,
        uimm4: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzuZPZD2X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    ShaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    PrfbIPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    Ldsminalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VhsubA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ccmp64CondcmpReg {
        Rm: u8,
        cond: u8,
        Rn: u8,
        nzcv: u8,
    },
    UqshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SpliceZPZzDes {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    StlexhA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    LdcLA1 {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    FcvtauAsisdmiscfp16R {
        Rn: u8,
        Rd: u8,
    },
    VrshlA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld3AsisdlsopS3I3S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    St4AsisdlseR4 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    StmUA1As {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    Fcvtmu64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    StxrSr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    MsrSiPstate {
        CRm: u8,
    },
    VpadalA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Brab64PBranchReg,
    LdpSLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    SqincdRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    StrSLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1HZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    BrkasPPPZ {
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    StlexdA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    QdsubA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Subs32SAddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    HltExException {
        imm16: u16,
    },
    CmhiAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VmovnA1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1WZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmlaAsisdelemRhH {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Lslv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FaddZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Ldff1SwZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1DZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintpAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Movn32Movewide {
        imm16: u16,
        Rd: u8,
    },
    FminpAsisdpairOnlySd {
        Rn: u8,
        Rd: u8,
    },
    UdivA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    Adcs64AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VmovIA2D {
        cond: u8,
        D: u8,
        imm4H: u8,
        Vd: u8,
        imm4L: u8,
    },
    LdrsbRA1Pre {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    UcvtfZPZH2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    VcntA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldaprb32LMemop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3AsisdlsopB3I3B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VrintaVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    CntdRS {
        imm4: u8,
        pattern: u8,
        Rd: u8,
    },
    Movz32Movewide {
        imm16: u16,
        Rd: u8,
    },
    VmlaFA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St4AsisdlsopHx4R4H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    CmpeqPPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Adc32AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmpeSzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    Ldumaxalh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St1HZPBzSX32Scaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VcvtXsA1Q {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    VcvtSdA1 {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtas32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld3DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqdecbRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldff1SbZPBrS32 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Strh32LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VqdmullA2 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UcvtfZPZX2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Crc32X64CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1WZPBr {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VqrdmulhA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Rorv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3DZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    RbitZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Shsub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Uhsub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Fcvtzs32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    MoviAsimdimmNB {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    SqrdmlahAsisdsame2Only {
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrshIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    CsdbA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    Ldrh32LdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    StrQLdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldrsw64LdstImmpre {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    St1HZPBzDX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St3DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsminl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    TeqRrA1 {
        cond: u8,
        Rn: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    SliAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    VdotA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    TsbA1 {
        cond: u8,
        R: u8,
        imm4: u8,
    },
    FnmadZPZzz {
        size: u8,
        Za: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Sha512Su0Vv2Cryptosha5122 {
        Rn: u8,
        Rd: u8,
    },
    LdmdaA1 {
        cond: u8,
        W: u8,
        Rn: u8,
    },
    UsdotAsimdelemD {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzuAsisdshfC {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1WZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    ScvtfZPZW2D {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldclrl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    MovIA2 {
        cond: u8,
        imm4: u8,
        Rd: u8,
        imm12: u16,
    },
    VclsA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    FrintiAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VldmdbA2 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    CmpgePPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ld1BZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VcvtnVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    St1HZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    SqshlAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    StrIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Ld1ShZPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmovD64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Uhadd8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    MlaAsimdelemR {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1HZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SqincpRPRSx {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    Pacga64PDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrexhA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    LdrIA1Post {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    Fcvtau64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    BfcvtZPZS2Bf {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FmmlaZZzzS {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    VrintrVfpA1D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Stur32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldeoral64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcvtzuZPZD2W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FcmleAsisdmiscFz {
        Rn: u8,
        Rd: u8,
    },
    FminnmpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Uzp1ZZz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldumaxab32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Rbit32Dp1Src {
        Rd: u8,
    },
    StrexbA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    VbitA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldsmina64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Stlurb32LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    LdrSLoadlit {
        imm19: u32,
        Rt: u8,
    },
    Strb32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    UxtbA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    VqrdmulhA2Q {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdpQLdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldff1HZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1ShZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrBLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    FmovAsimdimmSS {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    DupZI {
        size: u8,
        sh: u8,
        imm8: u8,
        Zd: u8,
    },
    VbifA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    UxtabA1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    StxpSp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UmaxZZi {
        size: u8,
        imm8: u8,
        Zdn: u8,
    },
    Drps64EBranchReg,
    Uzp2PPp {
        size: u8,
        Pm: u8,
        Pn: u8,
        Pd: u8,
    },
    ScvtfS64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Subps64SDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    XpaclriHiHints,
    FcvtzsZPZFp162H {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    BicZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    UqshlAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1SwZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    ScvtfH64Float2Int {
        Rn: u8,
        Rd: u8,
    },
    LdrbtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    FcmgtAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1RowZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Swplb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FacgtAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    InchRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    LdurQLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    PmulAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FnmaddSFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtps64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    VldmA1 {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Ld1HZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrDLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    SqrdmlshAsisdsame2Only {
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UqdecwZZs {
        imm4: u8,
        pattern: u8,
        Zdn: u8,
    },
    FabdAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmmlaZZzzD {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    VldrLA1D {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    FmulxAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FabdAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UdotZZzz {
        size: u8,
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    LdpDLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldraa64LdstPac {
        S: u8,
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    St2DZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsmaxal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtau32DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldseth32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    RevPP {
        size: u8,
        Pn: u8,
        Pd: u8,
    },
    UrshlAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldff1ShZPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    VrintpVfpA1D {
        D: u8,
        Vd: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtzs64DFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    FcvtShFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Braa64PBranchReg,
    Ldsminlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SxtwZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldclrlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FrintiAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzu32DFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    FmaxpAsisdpairOnlySd {
        Rn: u8,
        Rd: u8,
    },
    VmovDA1 {
        cond: u8,
        Rt2: u8,
        Rt: u8,
        M: u8,
        Vm: u8,
    },
    Swpb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Strb32BlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Pacdzb64ZDp1Src {
        Rd: u8,
    },
    DecpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    FmlalAsimdsameF {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    RevwZZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    St4AsisdlsoB44B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SqshrnAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    PfalseP {
        Pd: u8,
    },
    FmaxpAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    ScvtfD32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    FcmgtAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FsubSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St1DZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Usat16A1 {
        cond: u8,
        sat_imm: u8,
        Rd: u8,
        Rn: u8,
    },
    SqdmulhAsisdelemR {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Qsub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    PacibzHiHints,
    VaddFA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    MrcA1 {
        opc1: u8,
        CRn: u8,
        Rt: u8,
        cp15: u8,
        opc2: u8,
        CRm: u8,
    },
    OrrAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VqshrnA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    Ld1RbZPBiU8 {
        imm6: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UqincpRPRUw {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    St3AsisdlseR3 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrh32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    St3AsisdlsopH3I3H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    UshrAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldadd64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    XarVvv2Crypto3Imm6 {
        Rm: u8,
        imm6: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsminl32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    MvnsIA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm12: u16,
    },
    Qadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    FdivAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqshrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    BrkaPPP {
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    FmovV64IFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ldnf1HZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldp32LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzu64SFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    Uadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    CmleAsimdmiscZ {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Pacia64PDp1Src {
        Rd: u8,
    },
    SsaxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    FminnmZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    St1HZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Stzgm64BulkLdsttags {
        Rn: u8,
        Rt: u8,
    },
    Lduminlh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VshlRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Trn2AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Swpalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SqrshrunAsisdshfN {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    CmnIA1 {
        cond: u8,
        Rn: u8,
        imm12: u16,
    },
    UqshlAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldurh32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Trn1ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Stgp64LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld4RAsisdlsopR4I {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    CmpgePPZw {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Rev1632Dp1Src {
        Rd: u8,
    },
    FsubHFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    DupAsimdinsDvV {
        Rn: u8,
        Rd: u8,
    },
    St3WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintmDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Fmov32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    SqrshrunAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FmlaAsimdelemRSd {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Bic64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SrsiaA1As {
        W: u8,
        Rn: u8,
        op: u16,
        mode: u8,
    },
    VfmslA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VnmlsA1D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtns32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    CmpRrA1 {
        cond: u8,
        Rn: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    VudotA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ld1SwZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SliAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    UrsqrteAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    RscsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    SqdechRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FdivAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BicsIA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm12: u16,
    },
    FcmpHzFloatcmp {
        Rm: u8,
        Rn: u8,
    },
    VeorA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VrintxAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldumaxalb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SmlawbA1 {
        cond: u8,
        Rd: u8,
        Ra: u8,
        Rm: u8,
        Rn: u8,
    },
    VcaddA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    St1AsisdlsopD1I1D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Swpah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Orr32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    StrhRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    PrfdIPBzSX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    FmlsAsimdelemRSd {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    MoviAsimdimmMSm {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    SmlaldA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    VdotA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldff1HZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    EorsIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    Ld1RAsisdlsopRx1R {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    BrknPPPp {
        Pg: u8,
        Pn: u8,
        Pdm: u8,
    },
    SmlsldA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    St1BZPBzSX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    CmplsPPZi {
        size: u8,
        imm7: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    VsudotSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    DupAsisdoneOnly {
        Rn: u8,
        Rd: u8,
    },
    St2BZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FnmsubDFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    VabdIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VfmsA2D {
        cond: u8,
        o0: u8,
        D: u8,
        o1: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    CaspaCp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmnePPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    St4WZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St2AsisdlsopBx2R2B {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    StnpDLdstnapairOffs {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzs64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    QasxA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    LdrhLA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    PkhtbA1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        imm5: u8,
        tb: u8,
        Rm: u8,
    },
    FmulAsisdelemRhH {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    RbitA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
    },
    Sha1Su1A1 {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Uxtab16A1 {
        cond: u8,
        Rd: u8,
        rotate: u8,
        Rm: u8,
    },
    ShlAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Sha1CA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    AddZZi {
        size: u8,
        sh: u8,
        imm8: u8,
        Zdn: u8,
    },
    St2AsisdlsopSx2R2S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FabsDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    PrfdIPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        prfop: u8,
    },
    Eor64LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    CmgtAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SmulhZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    OrvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    UabdZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FmulAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sm3Tt2BVvvCrypto3Imm2 {
        Rm: u8,
        imm2: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtzu64DFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Sub32AddsubExt {
        Rm: u8,
        option: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtpuAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    Lduminah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UsdotZZzzS {
        Zm: u8,
        Zn: u8,
        Zda: u8,
    },
    Ldnf1SbZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    SubAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St4AsisdlsoH44H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    ScvtfZPZW2Fp16 {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    LdxrLr64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    PnextPPP {
        size: u8,
        Pg: u8,
        Pdn: u8,
    },
    MvnsRA1Rrx {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Shsub16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    MulZZi {
        size: u8,
        imm8: u8,
        Zdn: u8,
    },
    CntwRS {
        imm4: u8,
        pattern: u8,
        Rd: u8,
    },
    ClastaRPZ {
        size: u8,
        Pg: u8,
        Zm: u8,
        Rdn: u8,
    },
    Madd32ADp3Src {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    SturBLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    IndexZIi {
        size: u8,
        imm5b: u8,
        imm5: u8,
        Zd: u8,
    },
    VrintmAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    CtermneRr {
        sz: u8,
        Rm: u8,
        Rn: u8,
    },
    SmaxZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    Crc32B32CDp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqinchRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    TblAsimdtblL22 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St4AsisdlsoD44D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SsublAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Uzp2AsimdpermOnly {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CmpgtPPZi {
        size: u8,
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ld1SwZPBzD64Scaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldpsw64LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    FcmleAsimdmiscfp16Fz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Rev1664Dp1Src {
        Rd: u8,
    },
    SqrdmulhAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    CaslC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    BicPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    LdpQLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    FminAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SrhaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrhtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    SqrdmlshAsisdelemR {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    MrsA1As {
        cond: u8,
        mask: u8,
        Rd: u8,
        m: u8,
        Rn: u8,
    },
    LsrZZi {
        tszh: u8,
        tszl: u8,
        imm3: u8,
        Zn: u8,
        Zd: u8,
    },
    AndZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    SmaxvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    VqrdmlahA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdrQLoadlit {
        imm19: u32,
        Rt: u8,
    },
    ScvtfS32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    MoviAsimdimmDDs {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    SmmulrA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    FmulZPZs {
        size: u8,
        Pg: u8,
        i1: u8,
        Zdn: u8,
    },
    VusdotA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldclrah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmovAsimdimmHH {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    Ld1DZPBrU64 {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrsbtA1 {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    SqdmullAsisddiffOnly {
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UunpkhiZZ {
        size: u8,
        Zn: u8,
        Zd: u8,
    },
    UmovAsimdinsXX {
        Rn: u8,
        Rd: u8,
    },
    Ld1BZPAiS {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Uqadd16A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    Ldsmax32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Stgp64LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Vrev32A1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Lsrv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Eor3Vvv16Crypto4 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    St4AsisdlsopDx4R4D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtzs64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    FminnmAsimdsamefp16Only {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    BcaxVvv16Crypto4 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtms32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    MoviAsimdimmLHl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    Sha256HA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmsubDFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    StpSLdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Stp64LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldtrb32LdstUnpriv {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ld1SbZPBiS16 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1AsisdlseR44V {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Orr64LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1SbZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Stz2G64SpostLdsttags {
        Rn: u8,
        Rt: u8,
    },
    MoviAsimdimmLSl {
        a: u8,
        b: u8,
        c: u8,
        d: u8,
        e: u8,
        f: u8,
        g: u8,
        h: u8,
        Rd: u8,
    },
    Usub8A1 {
        cond: u8,
        Rn: u8,
        Rd: u8,
        Rm: u8,
    },
    St1AsisdlsoD11D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FnmsbZPZzz {
        size: u8,
        Za: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    FnegZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    FcmgePPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    LdrhtA2 {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    CasplCp64Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VfmalSA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FmovHFloatimm {
        imm8: u8,
        Rd: u8,
    },
    Frint32XAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Fcvtnu64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Stp32LdstpairPre {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    UrhaddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SubSpIA1 {
        cond: u8,
        Rd: u8,
        imm12: u16,
    },
    HvcExException {
        imm16: u16,
    },
    Udiv32Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VabalA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    FnmaddHFloatdp3 {
        Rm: u8,
        Ra: u8,
        Rn: u8,
        Rd: u8,
    },
    St1WZPBzDX32Unscaled {
        Zm: u8,
        xs: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrHLdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldnf1SbZPBiS32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdlarLr32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    BfcA1 {
        cond: u8,
        msb: u8,
        Rd: u8,
        lsb: u8,
    },
    Cbz64Compbranch {
        imm19: u32,
        Rt: u8,
    },
    LdrHLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Ldff1BZPBzD64Unscaled {
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Pacia1716HiHints,
    Eon32LogShift {
        shift: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FabsAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldeorh32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    ClastaZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    NegAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SturSLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    Fcvtms32SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Ld4AsisdlsopD4I4D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FrecpeAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    AndvRPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Vd: u8,
    },
    CmpnePPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Strb32BLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldnf1WZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FrintzSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    LdrSLdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    LsrrZPZz {
        size: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    VcvttA1Bfs {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VusmmlaA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    SqincwRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    AesimcBCryptoaes {
        Rn: u8,
        Rd: u8,
    },
    Ld1DZPBiU64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldsetl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmlsAsimdelemRhH {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsetlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    FmlaAsisdelemRSd {
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    Br64BranchReg,
    PacibspHiHints,
    Fcvtau64HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    FrintaAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Lsrv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VrintzAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Ldclr64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UmaxvAsimdallOnly {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    StlrSl32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    BslAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SriAsisdshfR {
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FminSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    VmlsIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    MrsBrA1As {
        cond: u8,
        mask: u8,
        Rd: u8,
        m: u8,
        Rn: u8,
    },
    Vrev16A1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    CpyZPV {
        size: u8,
        Pg: u8,
        Vn: u8,
        Zd: u8,
    },
    FcvtzuAsimdshfC {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    CashC32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    MsbZPZzz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Za: u8,
        Zdn: u8,
    },
    FcmleAsimdmiscFz {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtzsZPZS2W {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    St4HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldrsb64LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    EorZZz {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    Ldp64LdstpairOff {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Eor32LogImm {
        immr: u8,
        imms: u8,
        Rn: u8,
        Rd: u8,
    },
    Fmlal2AsimdelemLh {
        Q: u8,
        L: u8,
        M: u8,
        Rm: u8,
        H: u8,
        Rn: u8,
        Rd: u8,
    },
    VstrA1D {
        cond: u8,
        D: u8,
        Vd: u8,
    },
    Ld1ShZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ld1RowZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdrDLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Adc64AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcvtmsAsisdmiscR {
        Rn: u8,
        Rd: u8,
    },
    SubhnAsimddiffN {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmlaAsimdsame2C {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    ScvtfAsimdshfC {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    FsqrtAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld2AsisdlsoH22H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FdupZI {
        size: u8,
        imm8: u8,
        Zd: u8,
    },
    FrintpSFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    TstRA1Rrx {
        cond: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    CmeqAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UadalpAsimdmiscP {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    FcmgeAsisdsameOnly {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ld1AsisdlsoS11S {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    VraddhnA1 {
        D: u8,
        size: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Fcvtzs32HFloat2Fix {
        Rn: u8,
        Rd: u8,
    },
    IncpRPR {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    Ldsminah32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrsb32LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Uzp2ZZzQ {
        Zm: u8,
        Zn: u8,
        Zd: u8,
    },
    FminnmAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    St3BZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UcvtfD32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    FminnmvAsimdallOnlyH {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    Ld1SbZPBiS64 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    LdaexhA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    OrnsPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    Ldff1WZPBzDX32Unscaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    FmaxnmAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UminAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Paciza64ZDp1Src {
        Rd: u8,
    },
    Sha256Su0VvCryptosha2 {
        Rn: u8,
        Rd: u8,
    },
    FcvtzsZPZS2X {
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    ExtZZiDes {
        imm8h: u8,
        imm8l: u8,
        Zm: u8,
        Zdn: u8,
    },
    FrintmAsimdmiscR {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    SmlsldxA1 {
        cond: u8,
        Rd: u8,
        Rm: u8,
        Rn: u8,
    },
    St1AsisdlsepI2I2 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Frint32ZDFloatdp1 {
        Rn: u8,
        Rd: u8,
    },
    Ld1AsisdlsoH11H {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldapursh64LdapstlUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    VaddIA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    LdaxpLp32Ldstexcl {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    UqdecwRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Strh32LdstImmpost {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    FcaddZPZz {
        size: u8,
        rot: u8,
        Pg: u8,
        Zm: u8,
        Zdn: u8,
    },
    VudotSA1D {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    Ldumaxl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld2RAsisdlsopRx2R {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    FcselDFloatsel {
        Rm: u8,
        cond: u8,
        Rn: u8,
        Rd: u8,
    },
    Vld4MA1Posti {
        D: u8,
        Rn: u8,
        Vd: u8,
        size: u8,
        align: u8,
        Rm: u8,
    },
    UqdecwRRsUw {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Ldrb32BlLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    Ld3HZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    Ldeor64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    VornRA1Q {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    VrshrnA1 {
        D: u8,
        imm3H: u8,
        Vd: u8,
        L: u8,
        M: u8,
        Vm: u8,
    },
    FmulxAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    LdurBLdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    LdcIA1Off {
        P: u8,
        U: u8,
        W: u8,
        imm8: u8,
    },
    MovprfxZZ {
        Zn: u8,
        Zd: u8,
    },
    FcvtmuAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    VrsqrteA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    VtbxA1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        len: u8,
        N: u8,
        op: u8,
        M: u8,
        Vm: u8,
    },
    Cbnz64Compbranch {
        imm19: u32,
        Rt: u8,
    },
    TbzOnlyTestbranch {
        b5: u8,
        b40: u8,
        imm14: u16,
        Rt: u8,
    },
    SaddlAsimddiffL {
        Q: u8,
        size: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldnf1HZPBiU32 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    RscsRA1Rrx {
        cond: u8,
        Rd: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    VabsA2D {
        cond: u8,
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    Sha1CQsvCryptosha3 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    TblAsimdtblL11 {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    SqincdRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    Fcvtnu32HFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    Str64LdstPos {
        imm12: u16,
        Rn: u8,
        Rt: u8,
    },
    Asrv64Dp2Src {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    WhilelsPPRr {
        size: u8,
        Rm: u8,
        sf: u8,
        Rn: u8,
        Pd: u8,
    },
    St4AsisdlsepI4I {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    SshllAsimdshfL {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrshRA1Post {
        cond: u8,
        U: u8,
        Rn: u8,
        Rt: u8,
        Rm: u8,
    },
    PrfbIPBzDX32Scaled {
        xs: u8,
        Zm: u8,
        Pg: u8,
        Rn: u8,
        prfop: u8,
    },
    FmaxnmpAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Ldsminb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    IndexZIr {
        size: u8,
        Rm: u8,
        imm5: u8,
        Zd: u8,
    },
    MovsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    PfirstPPP {
        Pg: u8,
        Pdn: u8,
    },
    PldwRA1Rrx {
        U: u8,
        Rn: u8,
        imm5: u8,
        stype: u8,
        Rm: u8,
    },
    Ldumaxa32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Sha256H2A1 {
        D: u8,
        Vn: u8,
        Vd: u8,
        N: u8,
        M: u8,
        Vm: u8,
    },
    EorPPPpZ {
        Pm: u8,
        Pg: u8,
        Pn: u8,
        Pd: u8,
    },
    Stnt1HZPBiContiguous {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    UqincpZPZ {
        size: u8,
        Pm: u8,
        Zdn: u8,
    },
    Dcps1DcException {
        imm16: u16,
    },
    DechRRs {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    RshrnAsimdshfN {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    Swpl64Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    St1BZPAiD {
        imm5: u8,
        Pg: u8,
        Zn: u8,
        Zt: u8,
    },
    Ldeorb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldeoral32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldaddlb32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    StrdIA1Off {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    Ld1BZPBiU8 {
        imm4: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    St1AsisdlsepI1I1 {
        Q: u8,
        size: u8,
        Rn: u8,
        Rt: u8,
    },
    Ldrb32BLdstRegoff {
        Rm: u8,
        S: u8,
        Rn: u8,
        Rt: u8,
    },
    FabsZPZ {
        size: u8,
        Pg: u8,
        Zn: u8,
        Zd: u8,
    },
    AddAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Lduminal32Memop {
        Rs: u8,
        Rn: u8,
        Rt: u8,
    },
    SshrAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
    StlhA1 {
        cond: u8,
        Rn: u8,
        xRd: u8,
        xRt: u8,
    },
    Sturh32LdstUnscaled {
        imm9: u16,
        Rn: u8,
        Rt: u8,
    },
    AndsRrA1 {
        cond: u8,
        S: u8,
        Rn: u8,
        Rd: u8,
        Rs: u8,
        stype: u8,
        Rm: u8,
    },
    VrintpAsimdA1Q {
        D: u8,
        Vd: u8,
        M: u8,
        Vm: u8,
    },
    IndexZRr {
        size: u8,
        Rm: u8,
        Rn: u8,
        Zd: u8,
    },
    Ld2WZPBrContiguous {
        Rm: u8,
        Pg: u8,
        Rn: u8,
        Zt: u8,
    },
    StrbIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm12: u16,
    },
    WrffrFP {
        Pn: u8,
    },
    AsrZPZi {
        tszh: u8,
        Pg: u8,
        tszl: u8,
        imm3: u8,
        Zdn: u8,
    },
    ScvtfH32Float2Int {
        Rn: u8,
        Rd: u8,
    },
    Stgp64LdstpairPost {
        imm7: u8,
        Rt2: u8,
        Rn: u8,
        Rt: u8,
    },
    Fcvtas64SFloat2Int {
        Rn: u8,
        Rd: u8,
    },
    UminZZi {
        size: u8,
        imm8: u8,
        Zdn: u8,
    },
    VmovSrA1 {
        cond: u8,
        Vn: u8,
        Rt: u8,
        N: u8,
    },
    Sbc32AddsubCarry {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    Sub64AddsubShift {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    UqdecpRPRX {
        size: u8,
        Pm: u8,
        Rdn: u8,
    },
    FcmgtAsimdsameOnly {
        Q: u8,
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FmaxnmSFloatdp2 {
        Rm: u8,
        Rn: u8,
        Rd: u8,
    },
    FacgePPZz {
        size: u8,
        Zm: u8,
        Pg: u8,
        Zn: u8,
        Pd: u8,
    },
    Ld4AsisdlsoD44D {
        Q: u8,
        Rn: u8,
        Rt: u8,
    },
    SqincbRRsSx {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    FrintzAsimdmiscfp16R {
        Q: u8,
        Rn: u8,
        Rd: u8,
    },
    LdrhIA1Pre {
        cond: u8,
        P: u8,
        U: u8,
        W: u8,
        Rt: u8,
        imm4H: u8,
        imm4L: u8,
    },
    SetffrF,
    SqdecwRRsX {
        imm4: u8,
        pattern: u8,
        Rdn: u8,
    },
    SsraAsimdshfR {
        Q: u8,
        immh: u8,
        immb: u8,
        Rn: u8,
        Rd: u8,
    },
}

#[cfg(test)]
mod tests;
